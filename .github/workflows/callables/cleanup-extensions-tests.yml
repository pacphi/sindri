name: Cleanup Extensions Tests

on:
  workflow_call:
    inputs:
      test_app_prefix:
        description: 'Test app prefix'
        required: false
        default: 'ext-test'
        type: string
      region:
        description: 'Fly.io region'
        required: false
        default: 'sjc'
        type: string
      skip_cleanup:
        description: 'Skip cleanup for debugging'
        required: false
        default: false
        type: boolean
    secrets:
      FLYIO_AUTH_TOKEN:
        required: true

jobs:
  cleanup-extensions-tests:
    name: Test Cleanup Extension Ordering
    runs-on: ubuntu-latest
    timeout-minutes: 35
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Generate test app name
        id: app-name
        run: |
          timestamp=$(date +%s)
          app_name="${TEST_APP_PREFIX}-cleanup-${timestamp}"
          echo "app_name=$app_name" >> $GITHUB_OUTPUT

      - name: Create test SSH key
        run: |
          ssh-keygen -t ed25519 -f test_key -N "" -C "cleanup-test"
          chmod 600 test_key
          chmod 644 test_key.pub

      - name: Prepare fly.toml
        env:
          APP_NAME: ${{ steps.app-name.outputs.app_name }}
          VOLUME_NAME: "test_data"
          VOLUME_SIZE: "10"
          VM_MEMORY: "2048"
          CPU_KIND: "shared"
          CPU_COUNT: "1"
          CI_MODE: "true"
        run: ./scripts/prepare-fly-config.sh --ci-mode

      - name: Deploy test environment
        run: |
          flyctl apps create ${{ steps.app-name.outputs.app_name }} --org personal || true
          flyctl deploy --app ${{ steps.app-name.outputs.app_name }} \
            --strategy immediate \
            --wait-timeout 600 \
            --ha=false

      - name: Wait for deployment
        timeout-minutes: 8
        run: |
          app_name="${{ steps.app-name.outputs.app_name }}"
          max_wait=420
          interval=15
          elapsed=0

          while [ $elapsed -lt $max_wait ]; do
            status_output=$(flyctl status --app $app_name 2>&1 || echo "error")

            if echo "$status_output" | grep -q "running"; then
              echo "✅ Deployment ready"
              break
            elif echo "$status_output" | grep -q "failed\|crashed\|error"; then
              echo "❌ Deployment failed"
              exit 1
            fi

            sleep $interval
            elapsed=$((elapsed + interval))
          done

      - name: Copy test fixture to VM
        run: |
          app_name="${{ steps.app-name.outputs.app_name }}"

          echo "Copying test fixture to VM..."
          flyctl ssh sftp shell --app $app_name <<'SFTP_CMDS'
            put .github/workflows/test-fixtures/manifest-cleanup-middle.conf /tmp/test-manifest.conf
            bye
          SFTP_CMDS

      - name: Test cleanup extension auto-moves to end
        run: |
          app_name="${{ steps.app-name.outputs.app_name }}"

          echo "Testing that cleanup extensions automatically move to end of manifest..."

          flyctl ssh console --app $app_name --user developer --command "/bin/bash -lc '
            cd /workspace/scripts/lib
            manifest=\"extensions.d/active-extensions.conf\"

            echo \"Copying test fixture to manifest location...\"
            cp /tmp/test-manifest.conf \$manifest

            echo \"\"
            echo \"=== Manifest before auto-reorder ===\"
            cat \$manifest

            echo \"\"
            echo \"Running: extension-manager list (triggers ensure_cleanup_extensions_last)...\"
            bash extension-manager.sh list > /dev/null 2>&1

            echo \"\"
            echo \"=== Manifest after auto-reorder ===\"
            cat \$manifest

            echo \"\"
            echo \"Verifying post-cleanup is at end...\"
            # Check last 3 non-comment lines
            if tail -n 3 \$manifest | grep -v \"^#\" | grep -v \"^$\" | grep -q \"^post-cleanup\"; then
              echo \"✅ post-cleanup correctly moved to end of manifest\"
            else
              echo \"❌ post-cleanup not at end of manifest\"
              echo \"Last 5 non-comment lines:\"
              grep -v \"^#\" \$manifest | grep -v \"^$\" | tail -n 5
              exit 1
            fi

            echo \"\"
            echo \"Verifying protected extensions still at top...\"
            # Check first non-comment lines contain all protected extensions
            first_extensions=\$(grep -v \"^#\" \$manifest | grep -v \"^$\" | head -n 3)
            if echo \"\$first_extensions\" | grep -q \"^workspace-structure$\" && \
               echo \"\$first_extensions\" | grep -q \"^mise-config$\" && \
               echo \"\$first_extensions\" | grep -q \"^ssh-environment$\"; then
              echo \"✅ Protected extensions still at top (first 3 extensions)\"
            else
              echo \"❌ Protected extensions not at top\"
              echo \"First 3 extensions (non-comment lines):\"
              echo \"\$first_extensions\"
              exit 1
            fi
          '"

      - name: Cleanup
        if: always()
        run: |
          app_name="${{ steps.app-name.outputs.app_name }}"

          machines=$(flyctl machine list --app $app_name --json 2>/dev/null | jq -r '.[].id' || echo "")
          for machine in $machines; do
            [[ -z "$machine" ]] && continue
            flyctl machine stop $machine --app $app_name || true
            sleep 2
            flyctl machine destroy $machine --app $app_name --force || true
          done

          volumes=$(flyctl volumes list --app $app_name --json 2>/dev/null | jq -r '.[].id' || echo "")
          for volume in $volumes; do
            [[ -z "$volume" ]] && continue
            flyctl volumes destroy $volume --app $app_name --yes || true
          done

          flyctl apps destroy $app_name --yes || true
          rm -f test_key test_key.pub
