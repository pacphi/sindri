name: Extension Combinations Tests

on:
  workflow_call:
    inputs:
      test_app_prefix:
        description: 'Test app prefix'
        required: false
        default: 'ext-test'
        type: string
      region:
        description: 'Fly.io region'
        required: false
        default: 'sjc'
        type: string
      skip_cleanup:
        description: 'Skip cleanup for debugging'
        required: false
        default: false
        type: boolean
    secrets:
      FLYIO_AUTH_TOKEN:
        required: true

jobs:
  extension-combinations:
    name: Test Combination - ${{ matrix.combination.name }}
    runs-on: ubuntu-latest
    timeout-minutes: 90
    permissions:
      contents: read
    # Only run on workflow_dispatch or when explicitly requested via commit message
    if: github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[test-combinations]')

    strategy:
      fail-fast: false
      matrix:
        combination:
          - { name: 'core-stack', extensions: 'workspace-structure,mise-config,ssh-environment', description: 'Protected Core Extensions' }
          - { name: 'mise-stack', extensions: 'workspace-structure,mise-config,nodejs,python,rust,golang,ssh-environment', description: 'mise-Powered Languages' }
          - { name: 'full-node', extensions: 'workspace-structure,nodejs,nodejs-devtools,claude-config', description: 'Complete Node.js Development Stack' }
          - { name: 'fullstack', extensions: 'workspace-structure,nodejs,python,docker,cloud-tools', description: 'Python + Docker + Cloud' }
          - { name: 'systems', extensions: 'workspace-structure,rust,golang,docker', description: 'Rust + Go + Docker' }
          - { name: 'enterprise', extensions: 'workspace-structure,nodejs,jvm,docker,infra-tools', description: 'JVM + Docker + Infrastructure' }
          - { name: 'ai-dev', extensions: 'workspace-structure,nodejs,python,ai-tools,monitoring', description: 'Python + AI Tools + Monitoring' }

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Generate test app name
        id: app-name
        run: |
          timestamp=$(date +%s)
          app_name="${TEST_APP_PREFIX}-combo-${{ matrix.combination.name }}-${timestamp}"
          echo "app_name=$app_name" >> $GITHUB_OUTPUT

      - name: Create test SSH key
        run: |
          ssh-keygen -t ed25519 -f test_key -N "" -C "ext-test"
          chmod 600 test_key
          chmod 644 test_key.pub

      - name: Prepare fly.toml for testing
        env:
          APP_NAME: ${{ steps.app-name.outputs.app_name }}
          VOLUME_NAME: "test_data"
          VOLUME_SIZE: "20"
          VM_MEMORY: "16384"
          CPU_KIND: "performance"
          CPU_COUNT: "4"
          CI_MODE: "true"
        run: |
          ./scripts/prepare-fly-config.sh --ci-mode

      - name: Deploy test environment
        run: |
          flyctl apps create ${{ steps.app-name.outputs.app_name }} --org personal || true

          flyctl volumes create test_data \
            --app ${{ steps.app-name.outputs.app_name }} \
            --region ${REGION} \
            --size 20 \
            --no-encryption \
            --yes

          ssh_key_content=$(cat test_key.pub)
          flyctl secrets set AUTHORIZED_KEYS="$ssh_key_content" \
            --app ${{ steps.app-name.outputs.app_name }}
          flyctl secrets set CI_MODE="true" \
            --app ${{ steps.app-name.outputs.app_name }}

          # Deploy with retry logic
          max_attempts=3
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Deployment attempt $attempt of $max_attempts..."
            if flyctl deploy --app ${{ steps.app-name.outputs.app_name }} --strategy immediate --wait-timeout 300s --yes; then
              echo "✅ Deployment successful"
              break
            else
              if [ $attempt -lt $max_attempts ]; then
                wait_time=$((30 * attempt))
                echo "⚠️  Deployment failed, retrying in ${wait_time}s..."
                sleep $wait_time
                attempt=$((attempt + 1))
              else
                echo "❌ Deployment failed after $max_attempts attempts"
                exit 1
              fi
            fi
          done

      - name: Wait for deployment
        run: |
          app_name="${{ steps.app-name.outputs.app_name }}"
          timeout=300
          elapsed=0
          interval=20

          while [ $elapsed -lt $timeout ]; do
            status_output=$(flyctl status --app $app_name 2>&1)

            if echo "$status_output" | grep -q "started"; then
              echo "✅ Deployment successful"
              sleep 45
              break
            fi

            sleep $interval
            elapsed=$((elapsed + interval))
          done

      - name: Add extension combination to manifest
        run: |
          app_name="${{ steps.app-name.outputs.app_name }}"
          extensions="${{ matrix.combination.extensions }}"

          echo "Adding extensions to manifest: $extensions"

          flyctl ssh console --app $app_name --user developer --command "/bin/bash -lc '
            cd /workspace/scripts/lib
            manifest_file=\"extensions.d/active-extensions.conf\"
            failed_extensions=()

            # Create manifest from CI template (already has protected extensions)
            if [ ! -f \"\$manifest_file\" ]; then
              cp extensions.d/active-extensions.ci.conf \"\$manifest_file\" 2>/dev/null || touch \"\$manifest_file\"
            fi

            # Protected extensions already in CI conf - no need to add
            protected=\"workspace-structure mise-config ssh-environment\"

            # Verify protected extensions are present
            echo \"Verifying protected extensions from CI config...\"
            for ext in workspace-structure mise-config ssh-environment; do
              if grep -q \"^\$ext\$\" \"\$manifest_file\"; then
                echo \"✅ \$ext present\"
              else
                echo \"❌ \$ext missing from CI config\"
                exit 1
              fi
            done

            # Split extensions and add non-protected ones
            echo \"\"
            echo \"Adding combination extensions (skipping protected)...\"
            IFS=\",\" read -ra EXT_ARRAY <<< \"$extensions\"

            for ext in \"\${EXT_ARRAY[@]}\"; do
              ext=\$(echo \"\$ext\" | xargs)  # Trim whitespace

              # Skip if protected (already in CI conf)
              if echo \"\$protected\" | grep -q \"\$ext\"; then
                echo \"⏭️  Skipping \$ext (protected, already in CI conf)\"
                continue
              fi

              if ! grep -q \"^\$ext\$\" \"\$manifest_file\" 2>/dev/null; then
                echo \"\$ext\" >> \"\$manifest_file\"
                echo \"✅ \$ext added to manifest\"
              else
                echo \"✅ \$ext already in manifest\"
              fi
            done

            echo \"\"
            echo \"=== Extensions in Manifest ===\"
            grep -v \"^[[:space:]]*#\" \"\$manifest_file\" | grep -v \"^[[:space:]]*$\" || echo \"(empty)\"
          '"

      - name: Install all extensions from manifest
        run: |
          app_name="${{ steps.app-name.outputs.app_name }}"

          echo "Running extension-manager install-all with extension combination..."

          flyctl ssh console --app $app_name --user developer --command "/bin/bash -lc '
            if timeout 60m bash -c \"cd /workspace/scripts/lib && bash extension-manager.sh install-all\" 2>&1 | tee /tmp/configure-combo.log; then
              echo \"✅ Configuration completed\"
            else
              echo \"❌ Configuration failed\"
              tail -100 /tmp/configure-combo.log
              exit 1
            fi
          '"

      - name: Verify no conflicts
        run: |
          app_name="${{ steps.app-name.outputs.app_name }}"

          echo "Checking for conflicts or errors..."

          flyctl ssh console --app $app_name --user developer --command "/bin/bash -lc '
            if [ -f /tmp/configure-combo.log ]; then
              # Check for common conflict indicators
              if grep -qi \"conflict\|collision\|duplicate\" /tmp/configure-combo.log; then
                echo \"⚠️  Potential conflicts detected\"
                grep -i \"conflict\|collision\|duplicate\" /tmp/configure-combo.log
              else
                echo \"✅ No conflicts detected\"
              fi
            fi
          '"

      - name: Test cross-extension functionality
        run: |
          app_name="${{ steps.app-name.outputs.app_name }}"
          combo="${{ matrix.combination.name }}"

          echo "Testing cross-extension functionality for $combo..."

          flyctl ssh console --app $app_name --user developer --command "/bin/bash -lc '
            # Source SSH environment for non-interactive sessions
            if [ -f /etc/profile.d/00-ssh-environment.sh ]; then
              source /etc/profile.d/00-ssh-environment.sh
            fi

            case \"$combo\" in
              core-stack)
                echo \"Testing Core Infrastructure...\"
                # Verify workspace structure
                test -d /workspace/src && echo \"✅ Workspace structure created\"
                # Verify SSH environment
                test -f /etc/profile.d/00-ssh-environment.sh && echo \"✅ SSH environment configured\"
                # Verify Node.js
                node --version && npm --version && echo \"✅ Node.js available\"
                ;;
              mise-stack)
                echo \"Testing mise-Powered Language Stack...\"

                # Verify mise is installed
                if ! command -v mise >/dev/null 2>&1; then
                  echo \"❌ mise not installed\"
                  exit 1
                fi
                echo \"✅ mise: \$(mise --version)\"

                # Show all mise-managed tools
                echo \"\"
                echo \"mise-managed tools:\"
                mise ls

                # Test Node.js
                echo \"\"
                echo \"Testing Node.js (via mise)...\"
                node --version && npm --version
                mise ls node && echo \"✅ Node.js managed by mise\"

                # Test Python
                echo \"\"
                echo \"Testing Python (via mise)...\"
                python3 --version
                mise ls python && echo \"✅ Python managed by mise\"

                # Test Rust
                echo \"\"
                echo \"Testing Rust (via mise)...\"
                rustc --version && cargo --version
                mise ls rust && echo \"✅ Rust managed by mise\"

                # Test Go
                echo \"\"
                echo \"Testing Go (via mise)...\"
                go version
                mise ls go && echo \"✅ Go managed by mise\"

                echo \"\"
                echo \"✅ mise-powered language stack verified\"
                ;;
              full-node)
                echo \"Testing Complete Node.js Stack...\"
                node --version && npm --version
                npx tsc --version
                npx eslint --version
                npx prettier --version
                command -v claude >/dev/null 2>&1 && echo \"✅ Claude CLI available\" || echo \"⚠️  Claude CLI not in PATH\"
                ;;
              fullstack)
                echo \"Testing Python + Docker + Cloud combination...\"
                python3 --version && docker --version && node --version
                ;;
              systems)
                echo \"Testing Rust + Go + Docker combination...\"
                rustc --version && go version && docker --version
                ;;
              enterprise)
                echo \"Testing JVM + Docker + Infrastructure combination...\"
                java -version && terraform version && docker --version && node --version
                ;;
              ai-dev)
                echo \"Testing Python + AI Tools + Monitoring combination...\"
                python3 --version && node --version
                ollama --version || echo \"⚠️  ollama not ready\"
                command -v claude-monitor >/dev/null 2>&1 && echo \"✅ Monitoring available\" || echo \"⚠️  Monitoring not in PATH\"
                ;;
            esac

            echo \"✅ Cross-extension functionality verified\"
          '"

      - name: Cleanup test resources
        if: always() && !inputs.skip_cleanup
        run: |
          app_name="${{ steps.app-name.outputs.app_name }}"

          machines=$(flyctl machine list --app $app_name --json 2>/dev/null | jq -r '.[].id' || echo "")
          for machine in $machines; do
            [[ -z "$machine" ]] && continue
            flyctl machine stop $machine --app $app_name || true
            sleep 3
            flyctl machine destroy $machine --app $app_name --force || true
          done

          volumes=$(flyctl volumes list --app $app_name --json 2>/dev/null | jq -r '.[].id' || echo "")
          for volume in $volumes; do
            [[ -z "$volume" ]] && continue
            flyctl volumes destroy $volume --app $app_name --yes || true
          done

          flyctl apps destroy $app_name --yes || true
          rm -f test_key test_key.pub
