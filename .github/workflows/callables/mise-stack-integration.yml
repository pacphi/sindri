name: Mise Stack Integration Test

on:
  workflow_call:
    inputs:
      test_app_prefix:
        description: 'Test app prefix'
        required: false
        default: 'sindri-ci-test'
        type: string
      region:
        description: 'Fly.io region'
        required: false
        default: 'sjc'
        type: string
      skip_cleanup:
        description: 'Skip cleanup for debugging'
        required: false
        default: false
        type: boolean
    secrets:
      FLYIO_AUTH_TOKEN:
        required: true

jobs:
  mise-stack-integration:
    name: mise-Stack Integration Test
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
    # Only run on workflow_dispatch or when explicitly requested
    if: github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[test-mise-stack]')

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Generate test app name
        id: app-name
        run: |
          timestamp=$(date +%s)
          app_name="${{ inputs.test_app_prefix }}-mise-${timestamp}"
          echo "app_name=$app_name" >> $GITHUB_OUTPUT
          echo "Test app name: $app_name"

      - name: Create test SSH key
        run: |
          ssh-keygen -t ed25519 -f test_key -N "" -C "mise-test"
          chmod 600 test_key
          chmod 644 test_key.pub

      - name: Prepare fly.toml for testing
        env:
          APP_NAME: ${{ steps.app-name.outputs.app_name }}
          VOLUME_NAME: "test_data"
          VOLUME_SIZE: "15"
          VM_MEMORY: "4096"
          CPU_KIND: "performance"
          CPU_COUNT: "2"
          CI_MODE: "true"
        run: |
          ./scripts/prepare-fly-config.sh --ci-mode

      - name: Deploy test environment
        run: |
          echo "Creating Fly.io app for mise-stack testing..."
          flyctl apps create ${{ steps.app-name.outputs.app_name }} --org personal || echo "App may already exist"

          flyctl volumes create test_data \
            --app ${{ steps.app-name.outputs.app_name }} \
            --region ${{ inputs.region }} \
            --size 15 \
            --no-encryption \
            --yes

          ssh_key_content=$(cat test_key.pub)
          flyctl secrets set AUTHORIZED_KEYS="$ssh_key_content" \
            --app ${{ steps.app-name.outputs.app_name }}
          flyctl secrets set CI_MODE="true" \
            --app ${{ steps.app-name.outputs.app_name }}

          flyctl deploy --app ${{ steps.app-name.outputs.app_name }} --strategy immediate --wait-timeout 120s --yes

      - name: Wait for deployment
        run: |
          app_name="${{ steps.app-name.outputs.app_name }}"
          timeout=240
          elapsed=0
          interval=15

          while [ $elapsed -lt $timeout ]; do
            status_output=$(flyctl status --app $app_name 2>&1)
            if echo "$status_output" | grep -q "started"; then
              echo "✅ Deployment successful"
              sleep 30
              break
            fi
            sleep $interval
            elapsed=$((elapsed + interval))
          done

      - name: Add mise-stack extensions to manifest
        run: |
          app_name="${{ steps.app-name.outputs.app_name }}"

          echo "Adding mise-stack extensions to manifest..."
          flyctl ssh console --app $app_name --user developer --command "/bin/bash -lc '
            cd /workspace/scripts/lib
            manifest_file=\"extensions.d/active-extensions.conf\"

            # Create manifest from CI template (already has protected extensions)
            if [ ! -f \"\$manifest_file\" ]; then
              cp extensions.d/active-extensions.ci.conf \"\$manifest_file\" 2>/dev/null || touch \"\$manifest_file\"
            fi

            # Verify protected extensions are present
            echo \"Verifying protected extensions from CI config...\"
            for ext in workspace-structure mise-config ssh-environment; do
              if grep -q \"^\$ext\$\" \"\$manifest_file\"; then
                echo \"✅ \$ext present\"
              else
                echo \"❌ \$ext missing from CI config\"
                exit 1
              fi
            done

            # Add additional mise-stack extensions (skip protected ones already in CI conf)
            echo \"\"
            echo \"Adding additional mise-stack extensions...\"
            for ext in nodejs python rust golang; do
              if ! grep -q \"^\$ext\$\" \"\$manifest_file\" 2>/dev/null; then
                echo \"\$ext\" >> \"\$manifest_file\"
                echo \"✅ \$ext added to manifest\"
              else
                echo \"✅ \$ext already in manifest\"
              fi
            done

            echo \"\"
            echo \"=== Extensions in Manifest ===\"
            grep -v \"^[[:space:]]*#\" \"\$manifest_file\" | grep -v \"^[[:space:]]*$\" || echo \"(empty)\"
          '"

      - name: Install all mise-stack extensions
        run: |
          app_name="${{ steps.app-name.outputs.app_name }}"

          echo "Installing all mise-stack extensions..."
          flyctl ssh console --app $app_name --user developer --command "/bin/bash -lc '
            cd /workspace/scripts/lib

            echo \"Running install-all for mise-stack...\"
            if bash extension-manager.sh install-all; then
              echo \"✅ All mise-stack extensions installed\"
            else
              echo \"❌ Extension installation failed\"
              exit 1
            fi
          '"

      - name: Test mise-stack cross-extension functionality
        run: |
          app_name="${{ steps.app-name.outputs.app_name }}"

          echo "Testing mise-stack cross-extension functionality..."

          flyctl ssh console --app $app_name --user developer --command "/bin/bash -lc '
            # Source SSH environment for non-interactive sessions
            if [ -f /etc/profile.d/00-ssh-environment.sh ]; then
              source /etc/profile.d/00-ssh-environment.sh
            fi

            echo \"Testing mise-Powered Language Stack...\"

            # Verify mise is installed
            if ! command -v mise >/dev/null 2>&1; then
              echo \"❌ mise not installed\"
              exit 1
            fi
            echo \"✅ mise: \$(mise --version)\"

            # Show all mise-managed tools
            echo \"\"
            echo \"mise-managed tools:\"
            mise ls

            # Test Node.js
            echo \"\"
            echo \"Testing Node.js (via mise)...\"
            node --version && npm --version
            mise ls node && echo \"✅ Node.js managed by mise\"

            # Test Python
            echo \"\"
            echo \"Testing Python (via mise)...\"
            python3 --version
            mise ls python && echo \"✅ Python managed by mise\"

            # Test Rust
            echo \"\"
            echo \"Testing Rust (via mise)...\"
            rustc --version && cargo --version
            mise ls rust && echo \"✅ Rust managed by mise\"

            # Test Go
            echo \"\"
            echo \"Testing Go (via mise)...\"
            go version
            mise ls go && echo \"✅ Go managed by mise\"

            echo \"\"
            echo \"✅ mise-powered language stack verified\"
          '"

      - name: Cleanup test resources
        if: always() && !inputs.skip_cleanup
        run: |
          app_name="${{ steps.app-name.outputs.app_name }}"

          machines=$(flyctl machine list --app $app_name --json 2>/dev/null | jq -r '.[].id' || echo "")
          for machine in $machines; do
            [[ -z "$machine" ]] && continue
            flyctl machine stop $machine --app $app_name || true
            sleep 3
            flyctl machine destroy $machine --app $app_name --force || true
          done

          volumes=$(flyctl volumes list --app $app_name --json 2>/dev/null | jq -r '.[].id' || echo "")
          for volume in $volumes; do
            [[ -z "$volume" ]] && continue
            flyctl volumes destroy $volume --app $app_name --yes || true
          done

          flyctl apps destroy $app_name --yes || true
          rm -f test_key test_key.pub

