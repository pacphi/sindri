name: Cleanup Extensions Tests

on:
  workflow_call:
    inputs:
      test_app_prefix:
        description: 'Test app prefix'
        required: false
        default: 'ext-test'
        type: string
      region:
        description: 'Fly.io region'
        required: false
        default: 'sjc'
        type: string
      skip_cleanup:
        description: 'Skip cleanup for debugging'
        required: false
        default: false
        type: boolean
    secrets:
      FLYIO_AUTH_TOKEN:
        required: true

jobs:
  cleanup-extensions-tests:
    name: Test Cleanup Extension Ordering
    runs-on: ubuntu-latest
    timeout-minutes: 35
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # Using composite action for setup
      - name: Setup Fly.io test environment
        id: setup
        uses: ./.github/actions/setup-fly-test-env
        with:
          app-prefix: ${{ inputs.test_app_prefix }}
          extension-name: 'cleanup'
          fly-api-token: ${{ secrets.FLYIO_AUTH_TOKEN }}
          vm-memory: '2048'
          vm-cpu-kind: 'shared'
          vm-cpu-count: '1'
          volume-size: '10'

      # Using composite action for deployment
      - name: Deploy test environment
        uses: ./.github/actions/deploy-fly-app
        with:
          app-name: ${{ steps.setup.outputs.app-name }}
          region: ${{ inputs.region }}
          fly-api-token: ${{ secrets.FLYIO_AUTH_TOKEN }}
          deploy-timeout: '600'

      # Using composite action for waiting
      - name: Wait for deployment
        uses: ./.github/actions/wait-fly-deployment
        with:
          app-name: ${{ steps.setup.outputs.app-name }}
          fly-api-token: ${{ secrets.FLYIO_AUTH_TOKEN }}
          timeout-seconds: '420'
          expected-status: 'started'

      - name: Copy test fixture to VM
        env:
          FLY_API_TOKEN: ${{ secrets.FLYIO_AUTH_TOKEN }}
        run: |
          app_name="${{ steps.setup.outputs.app-name }}"

          echo "Copying test fixture to VM..."
          flyctl ssh sftp shell --app $app_name <<'SFTP_CMDS'
            put .github/workflows/test-fixtures/manifest-cleanup-middle.conf /tmp/test-manifest.conf
            bye
          SFTP_CMDS

      - name: Test cleanup extension auto-moves to end
        env:
          FLY_API_TOKEN: ${{ secrets.FLYIO_AUTH_TOKEN }}
        run: |
          app_name="${{ steps.setup.outputs.app-name }}"

          echo "Testing that cleanup extensions automatically move to end of manifest..."

          flyctl ssh console --app $app_name --user developer --command "/bin/bash -lc '
            cd /workspace/scripts/lib
            manifest=\"extensions.d/active-extensions.conf\"

            echo \"Copying test fixture to manifest location...\"
            cp /tmp/test-manifest.conf \$manifest

            echo \"\"
            echo \"=== Manifest before auto-reorder ===\"
            cat \$manifest

            echo \"\"
            echo \"Running: extension-manager list (triggers ensure_cleanup_extensions_last)...\"
            bash extension-manager.sh list > /dev/null 2>&1

            echo \"\"
            echo \"=== Manifest after auto-reorder ===\"
            cat \$manifest

            echo \"\"
            echo \"Verifying post-cleanup is at end...\"
            # Check last 3 non-comment lines
            if tail -n 3 \$manifest | grep -v \"^#\" | grep -v \"^$\" | grep -q \"^post-cleanup\"; then
              echo \"✅ post-cleanup correctly moved to end of manifest\"
            else
              echo \"❌ post-cleanup not at end of manifest\"
              echo \"Last 5 non-comment lines:\"
              grep -v \"^#\" \$manifest | grep -v \"^$\" | tail -n 5
              exit 1
            fi

            echo \"\"
            echo \"Verifying protected extensions still at top...\"
            # Check first non-comment lines contain all protected extensions
            first_extensions=\$(grep -v \"^#\" \$manifest | grep -v \"^$\" | head -n 3)
            if echo \"\$first_extensions\" | grep -q \"^workspace-structure$\" && \
               echo \"\$first_extensions\" | grep -q \"^mise-config$\" && \
               echo \"\$first_extensions\" | grep -q \"^ssh-environment$\"; then
              echo \"✅ Protected extensions still at top (first 3 extensions)\"
            else
              echo \"❌ Protected extensions not at top\"
              echo \"First 3 extensions (non-comment lines):\"
              echo \"\$first_extensions\"
              exit 1
            fi
          '"

      # Using composite action for cleanup
      - name: Cleanup test resources
        if: always() && !inputs.skip_cleanup
        uses: ./.github/actions/cleanup-fly-app
        with:
          app-name: ${{ steps.setup.outputs.app-name }}
          fly-api-token: ${{ secrets.FLYIO_AUTH_TOKEN }}
