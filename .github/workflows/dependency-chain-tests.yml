name: Dependency Chain Tests

on:
  workflow_call:
    inputs:
      test_app_prefix:
        description: 'Test app prefix'
        required: false
        default: 'ext-test'
        type: string
      region:
        description: 'Fly.io region'
        required: false
        default: 'sjc'
        type: string
      skip_cleanup:
        description: 'Skip cleanup for debugging'
        required: false
        default: false
        type: boolean
    secrets:
      FLYIO_AUTH_TOKEN:
        required: true

jobs:
  dependency-chain-tests:
    name: Test Dependency Chain Resolution
    runs-on: ubuntu-latest
    timeout-minutes: 50
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # Using composite action for setup
      - name: Setup Fly.io test environment
        id: setup
        uses: ./.github/actions/setup-fly-test-env
        with:
          app-prefix: ${{ inputs.test_app_prefix }}
          extension-name: 'deps'
          fly-api-token: ${{ secrets.FLYIO_AUTH_TOKEN }}
          vm-memory: '4096'
          vm-cpu-kind: 'shared'
          vm-cpu-count: '2'
          volume-size: '15'

      # Using composite action for deployment
      - name: Deploy test environment
        uses: ./.github/actions/deploy-fly-app
        with:
          app-name: ${{ steps.setup.outputs.app-name }}
          region: ${{ inputs.region }}
          fly-api-token: ${{ secrets.FLYIO_AUTH_TOKEN }}
          deploy-timeout: '600'

      # Using composite action for waiting
      - name: Wait for deployment
        uses: ./.github/actions/wait-fly-deployment
        with:
          app-name: ${{ steps.setup.outputs.app-name }}
          fly-api-token: ${{ secrets.FLYIO_AUTH_TOKEN }}
          timeout-seconds: '420'
          expected-status: 'started'

      - name: Copy test fixture to VM
        env:
          FLY_API_TOKEN: ${{ secrets.FLYIO_AUTH_TOKEN }}
        run: |
          app_name="${{ steps.setup.outputs.app-name }}"

          echo "Copying test fixture to VM..."
          flyctl ssh sftp shell --app $app_name <<'SFTP_EOF'
            put .github/workflows/test-fixtures/manifest-only-top-level.conf /tmp/manifest-top-level.conf
            quit
          SFTP_EOF

      - name: Test transitive dependency installation
        timeout-minutes: 25
        env:
          FLY_API_TOKEN: ${{ secrets.FLYIO_AUTH_TOKEN }}
        run: |
          app_name="${{ steps.setup.outputs.app-name }}"

          echo "Testing transitive dependencies: nodejs-devtools -> nodejs -> mise-config..."

          flyctl ssh console --app $app_name --user developer --command "/bin/bash -lc '
            cd /workspace/scripts/lib
            manifest=\"extensions.d/active-extensions.conf\"

            echo \"Using test fixture with only top-level extension...\"
            cp /tmp/manifest-top-level.conf \$manifest

            echo \"\"
            echo \"=== Manifest (only top-level extension) ===\"
            cat \$manifest

            echo \"\"
            echo \"Running: extension-manager install-all\"
            if timeout 20m bash extension-manager.sh install-all 2>&1 | tee /tmp/install.log; then
              echo \"\"
              echo \"✅ install-all completed\"

              echo \"\"
              echo \"=== Manifest after install ===\"
              cat \$manifest

              echo \"\"
              echo \"Verifying dependency chain was installed...\"
              for dep in mise-config nodejs nodejs-devtools; do
                if grep -q \"^\$dep\" \$manifest; then
                  echo \"✅ \$dep in manifest\"
                else
                  echo \"❌ \$dep missing from manifest\"
                  exit 1
                fi
              done
            else
              echo \"❌ install-all failed\"
              tail -50 /tmp/install.log
              exit 1
            fi
          '"

      - name: Test missing dependency error handling
        env:
          FLY_API_TOKEN: ${{ secrets.FLYIO_AUTH_TOKEN }}
        run: |
          app_name="${{ steps.setup.outputs.app-name }}"

          echo "Testing error handling when dependency is missing..."

          flyctl ssh console --app $app_name --user developer --command "/bin/bash -lc '
            cd /workspace/scripts/lib
            manifest=\"extensions.d/active-extensions.conf\"

            echo \"Creating manifest with nodejs only...\"
            echo \"nodejs\" > \$manifest

            echo \"\"
            echo \"Temporarily disabling mise to test prerequisite check...\"
            if command -v mise >/dev/null 2>&1; then
              mise_path=\$(command -v mise)
              sudo mv \$mise_path \${mise_path}.disabled 2>/dev/null || mv \$mise_path \${mise_path}.disabled
            fi

            echo \"\"
            echo \"Running: extension-manager install nodejs (should fail - mise missing)\"
            # Capture exit code before piping to tee
            bash extension-manager.sh install nodejs 2>&1 | tee /tmp/prereq_fail.log
            install_exit=\${PIPESTATUS[0]}

            if [ \$install_exit -eq 0 ]; then
              echo \"❌ Installation succeeded when mise dependency missing\"
              sudo mv \${mise_path}.disabled \$mise_path 2>/dev/null || mv \${mise_path}.disabled \$mise_path
              cat /tmp/prereq_fail.log
              exit 1
            else
              echo \"\"
              echo \"✅ Installation correctly failed due to missing mise dependency\"

              if grep -qi \"prerequisite\|mise.*required\|mise.*not found\" /tmp/prereq_fail.log; then
                echo \"✅ Appropriate error message shown (dependency check working)\"
              else
                echo \"⚠️  Error message could be clearer\"
                cat /tmp/prereq_fail.log
              fi

              # Restore mise for subsequent tests
              sudo mv \${mise_path}.disabled \$mise_path 2>/dev/null || mv \${mise_path}.disabled \$mise_path
            fi
          '"

      # Using composite action for cleanup
      - name: Cleanup test resources
        if: always() && !inputs.skip_cleanup
        uses: ./.github/actions/cleanup-fly-app
        with:
          app-name: ${{ steps.setup.outputs.app-name }}
          fly-api-token: ${{ secrets.FLYIO_AUTH_TOKEN }}
