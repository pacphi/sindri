name: Dependency Chain Tests

on:
  workflow_call:
    inputs:
      test_app_prefix:
        description: 'Test app prefix'
        required: false
        default: 'ext-test'
        type: string
      region:
        description: 'Fly.io region'
        required: false
        default: 'sjc'
        type: string
      skip_cleanup:
        description: 'Skip cleanup for debugging'
        required: false
        default: false
        type: boolean
    secrets:
      FLYIO_AUTH_TOKEN:
        required: true

jobs:
  dependency-chain-tests:
    name: Test Dependency Chain Resolution
    runs-on: ubuntu-latest
    timeout-minutes: 50
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Generate test app name
        id: app-name
        run: |
          timestamp=$(date +%s)
          app_name="${TEST_APP_PREFIX}-deps-${timestamp}"
          echo "app_name=$app_name" >> $GITHUB_OUTPUT

      - name: Create test SSH key
        run: |
          ssh-keygen -t ed25519 -f test_key -N "" -C "deps-test"
          chmod 600 test_key
          chmod 644 test_key.pub

      - name: Prepare fly.toml
        env:
          APP_NAME: ${{ steps.app-name.outputs.app_name }}
          VOLUME_NAME: "test_data"
          VOLUME_SIZE: "15"
          VM_MEMORY: "4096"
          CPU_KIND: "shared"
          CPU_COUNT: "2"
          CI_MODE: "true"
        run: ./scripts/prepare-fly-config.sh --ci-mode

      - name: Deploy test environment
        run: |
          flyctl apps create ${{ steps.app-name.outputs.app_name }} --org personal || true
          flyctl deploy --app ${{ steps.app-name.outputs.app_name }} \
            --strategy immediate \
            --wait-timeout 600 \
            --ha=false

      - name: Wait for deployment
        timeout-minutes: 8
        run: |
          app_name="${{ steps.app-name.outputs.app_name }}"
          max_wait=420
          interval=15
          elapsed=0

          while [ $elapsed -lt $max_wait ]; do
            status_output=$(flyctl status --app $app_name 2>&1 || echo "error")

            if echo "$status_output" | grep -q "running"; then
              echo "✅ Deployment ready"
              break
            elif echo "$status_output" | grep -q "failed\|crashed\|error"; then
              echo "❌ Deployment failed"
              exit 1
            fi

            sleep $interval
            elapsed=$((elapsed + interval))
          done

      - name: Copy test fixture to VM
        run: |
          app_name="${{ steps.app-name.outputs.app_name }}"

          echo "Copying test fixture to VM..."
          flyctl ssh sftp shell --app $app_name <<'SFTP_EOF'
            put .github/workflows/test-fixtures/manifest-only-top-level.conf /tmp/manifest-top-level.conf
            quit
          SFTP_EOF

      - name: Test transitive dependency installation
        timeout-minutes: 25
        run: |
          app_name="${{ steps.app-name.outputs.app_name }}"

          echo "Testing transitive dependencies: nodejs-devtools -> nodejs -> mise-config..."

          flyctl ssh console --app $app_name --user developer --command "/bin/bash -lc '
            cd /workspace/scripts/lib
            manifest=\"extensions.d/active-extensions.conf\"

            echo \"Using test fixture with only top-level extension...\"
            cp /tmp/manifest-top-level.conf \$manifest

            echo \"\"
            echo \"=== Manifest (only top-level extension) ===\"
            cat \$manifest

            echo \"\"
            echo \"Running: extension-manager install-all\"
            if timeout 20m bash extension-manager.sh install-all 2>&1 | tee /tmp/install.log; then
              echo \"\"
              echo \"✅ install-all completed\"

              echo \"\"
              echo \"=== Manifest after install ===\"
              cat \$manifest

              echo \"\"
              echo \"Verifying dependency chain was installed...\"
              for dep in mise-config nodejs nodejs-devtools; do
                if grep -q \"^\$dep\" \$manifest; then
                  echo \"✅ \$dep in manifest\"
                else
                  echo \"❌ \$dep missing from manifest\"
                  exit 1
                fi
              done
            else
              echo \"❌ install-all failed\"
              tail -50 /tmp/install.log
              exit 1
            fi
          '"

      - name: Test missing dependency error handling
        run: |
          app_name="${{ steps.app-name.outputs.app_name }}"

          echo "Testing error handling when dependency is missing..."

          flyctl ssh console --app $app_name --user developer --command "/bin/bash -lc '
            cd /workspace/scripts/lib
            manifest=\"extensions.d/active-extensions.conf\"

            echo \"Creating manifest with nodejs only...\"
            echo \"nodejs\" > \$manifest

            echo \"\"
            echo \"Temporarily disabling mise to test prerequisite check...\"
            if command -v mise >/dev/null 2>&1; then
              mise_path=\$(command -v mise)
              sudo mv \$mise_path \${mise_path}.disabled 2>/dev/null || mv \$mise_path \${mise_path}.disabled
            fi

            echo \"\"
            echo \"Running: extension-manager install nodejs (should fail - mise missing)\"
            # Capture exit code before piping to tee
            bash extension-manager.sh install nodejs 2>&1 | tee /tmp/prereq_fail.log
            install_exit=\${PIPESTATUS[0]}

            if [ \$install_exit -eq 0 ]; then
              echo \"❌ Installation succeeded when mise dependency missing\"
              sudo mv \${mise_path}.disabled \$mise_path 2>/dev/null || mv \${mise_path}.disabled \$mise_path
              cat /tmp/prereq_fail.log
              exit 1
            else
              echo \"\"
              echo \"✅ Installation correctly failed due to missing mise dependency\"

              if grep -qi \"prerequisite\|mise.*required\|mise.*not found\" /tmp/prereq_fail.log; then
                echo \"✅ Appropriate error message shown (dependency check working)\"
              else
                echo \"⚠️  Error message could be clearer\"
                cat /tmp/prereq_fail.log
              fi

              # Restore mise for subsequent tests
              sudo mv \${mise_path}.disabled \$mise_path 2>/dev/null || mv \${mise_path}.disabled \$mise_path
            fi
          '"

      - name: Cleanup
        if: always()
        run: |
          app_name="${{ steps.app-name.outputs.app_name }}"

          machines=$(flyctl machine list --app $app_name --json 2>/dev/null | jq -r '.[].id' || echo "")
          for machine in $machines; do
            [[ -z "$machine" ]] && continue
            flyctl machine stop $machine --app $app_name || true
            sleep 2
            flyctl machine destroy $machine --app $app_name --force || true
          done

          volumes=$(flyctl volumes list --app $app_name --json 2>/dev/null | jq -r '.[].id' || echo "")
          for volume in $volumes; do
            [[ -z "$volume" ]] && continue
            flyctl volumes destroy $volume --app $app_name --yes || true
          done

          flyctl apps destroy $app_name --yes || true
          rm -f test_key test_key.pub
