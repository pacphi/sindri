name: Developer Workflow Test

on:
  workflow_call:
    inputs:
      test_app_prefix:
        description: 'Test app prefix'
        required: false
        default: 'sindri-ci-test'
        type: string
      region:
        description: 'Fly.io region'
        required: false
        default: 'sjc'
        type: string
      skip_cleanup:
        description: 'Skip cleanup for debugging'
        required: false
        default: false
        type: boolean
    secrets:
      FLYIO_AUTH_TOKEN:
        required: true

jobs:
  developer-workflow:
    name: Developer Workflow Integration
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      contents: read
    # Only run on workflow_dispatch or when explicitly requested
    if: github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[test-workflow]')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # Using composite action for setup
      - name: Setup Fly.io test environment
        id: setup
        uses: ./.github/actions/setup-fly-test-env
        with:
          app-prefix: ${{ inputs.test_app_prefix }}
          extension-name: 'workflow'
          fly-api-token: ${{ secrets.FLYIO_AUTH_TOKEN }}
          vm-memory: '2048'
          vm-cpu-kind: 'shared'
          vm-cpu-count: '1'
          volume-size: '10'

      # Using composite action for deployment
      - name: Deploy test environment
        uses: ./.github/actions/deploy-fly-app
        with:
          app-name: ${{ steps.setup.outputs.app-name }}
          region: ${{ inputs.region }}
          fly-api-token: ${{ secrets.FLYIO_AUTH_TOKEN }}
          deploy-timeout: '300'

      # Using composite action for waiting
      - name: Wait for deployment
        uses: ./.github/actions/wait-fly-deployment
        with:
          app-name: ${{ steps.setup.outputs.app-name }}
          fly-api-token: ${{ secrets.FLYIO_AUTH_TOKEN }}
          timeout-seconds: '240'
          expected-status: 'started'

      - name: Add core extensions to manifest
        env:
          FLY_API_TOKEN: ${{ secrets.FLYIO_AUTH_TOKEN }}
        run: |
          app_name="${{ steps.setup.outputs.app-name }}"

          echo "Setting up manifest with protected core extensions..."
          flyctl ssh console --app $app_name --user developer --command "/bin/bash -lc '
            cd /workspace/scripts/lib
            manifest_file=\"extensions.d/active-extensions.conf\"

            # Create manifest from CI template (already has protected extensions)
            if [ ! -f \"\$manifest_file\" ]; then
              cp extensions.d/active-extensions.ci.conf \"\$manifest_file\" 2>/dev/null || touch \"\$manifest_file\"
            fi

            echo \"\"
            echo \"=== Protected Extensions in Manifest (from CI config) ===\"
            grep -v \"^[[:space:]]*#\" \"\$manifest_file\" | grep -v \"^[[:space:]]*$\" || echo \"(empty)\"

            # Verify protected extensions are present
            echo \"\"
            echo \"Verifying protected extensions...\"
            for ext in workspace-structure mise-config ssh-environment; do
              if grep -q \"^\$ext\$\" \"\$manifest_file\"; then
                echo \"✅ \$ext present in manifest\"
              else
                echo \"❌ \$ext missing from CI config - this should not happen\"
                exit 1
              fi
            done
          '"

      - name: Install all extensions from manifest
        env:
          FLY_API_TOKEN: ${{ secrets.FLYIO_AUTH_TOKEN }}
        run: |
          app_name="${{ steps.setup.outputs.app-name }}"

          echo "Installing all activated extensions..."
          flyctl ssh console --app $app_name --user developer --command "/bin/bash -lc '
            cd /workspace/scripts/lib

            echo \"Running install-all...\"
            if bash extension-manager.sh install-all; then
              echo \"✅ All extensions installed\"
            else
              echo \"❌ Extension installation failed\"
              exit 1
            fi
          '"

      - name: Verify all extensions installed correctly
        env:
          FLY_API_TOKEN: ${{ secrets.FLYIO_AUTH_TOKEN }}
        run: |
          app_name="${{ steps.setup.outputs.app-name }}"

          echo "Verifying extension installations..."
          flyctl ssh console --app $app_name --user developer --command "/bin/bash -lc '
            # Source SSH environment
            if [ -f /etc/profile.d/00-ssh-environment.sh ]; then
              source /etc/profile.d/00-ssh-environment.sh
            fi

            echo \"=== Verification ===\"

            # Verify workspace structure
            if [ -d /workspace/src ] && [ -d /workspace/tests ]; then
              echo \"✅ Workspace structure created\"
            else
              echo \"❌ Workspace structure missing\"
              exit 1
            fi

            # Verify Node.js
            if command -v node >/dev/null 2>&1; then
              echo \"✅ Node.js installed: \$(node --version)\"
            else
              echo \"❌ Node.js not found\"
              exit 1
            fi

            # Verify SSH environment
            if [ -f /etc/profile.d/00-ssh-environment.sh ]; then
              echo \"✅ SSH environment configured\"
            else
              echo \"❌ SSH environment not configured\"
              exit 1
            fi

            echo \"\"
            echo \"✅ All extensions verified\"
          '"

      - name: Test extension status command
        env:
          FLY_API_TOKEN: ${{ secrets.FLYIO_AUTH_TOKEN }}
        run: |
          app_name="${{ steps.setup.outputs.app-name }}"

          echo "Testing extension status command..."
          flyctl ssh console --app $app_name --user developer --command "/bin/bash -lc '
            cd /workspace/scripts/lib

            for ext in workspace-structure nodejs ssh-environment; do
              echo \"\"
              echo \"Checking status of \$ext...\"
              if bash extension-manager.sh status \$ext; then
                echo \"✅ Status command works for \$ext\"
              else
                echo \"⚠️  Status command failed for \$ext\"
              fi
            done
          '"

      # Using composite action for cleanup
      - name: Cleanup test resources
        if: always() && !inputs.skip_cleanup
        uses: ./.github/actions/cleanup-fly-app
        with:
          app-name: ${{ steps.setup.outputs.app-name }}
          fly-api-token: ${{ secrets.FLYIO_AUTH_TOKEN }}
