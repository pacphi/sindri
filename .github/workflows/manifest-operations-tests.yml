name: Manifest Operations Tests

on:
  workflow_call:
    inputs:
      test_app_prefix:
        description: 'Test app prefix'
        required: false
        default: 'ext-test'
        type: string
      region:
        description: 'Fly.io region'
        required: false
        default: 'sjc'
        type: string
      skip_cleanup:
        description: 'Skip cleanup for debugging'
        required: false
        default: false
        type: boolean
    secrets:
      FLYIO_AUTH_TOKEN:
        required: true

jobs:
  manifest-operations-tests:
    name: Test Manifest Operations
    runs-on: ubuntu-latest
    timeout-minutes: 35
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      # Using composite action for setup
      - name: Setup Fly.io test environment
        id: setup
        uses: ./.github/actions/setup-fly-test-env
        with:
          app-prefix: ${{ inputs.test_app_prefix }}
          extension-name: 'manifest'
          fly-api-token: ${{ secrets.FLYIO_AUTH_TOKEN }}
          vm-memory: '2048'
          vm-cpu-kind: 'shared'
          vm-cpu-count: '1'
          volume-size: '10'

      # Using composite action for deployment
      - name: Deploy test environment
        uses: ./.github/actions/deploy-fly-app
        with:
          app-name: ${{ steps.setup.outputs.app-name }}
          region: ${{ inputs.region }}
          fly-api-token: ${{ secrets.FLYIO_AUTH_TOKEN }}
          deploy-timeout: '600'

      # Using composite action for waiting
      - name: Wait for deployment
        uses: ./.github/actions/wait-fly-deployment
        with:
          app-name: ${{ steps.setup.outputs.app-name }}
          fly-api-token: ${{ secrets.FLYIO_AUTH_TOKEN }}
          timeout-seconds: '420'
          expected-status: 'started'

      - name: Copy test fixtures to VM
        env:
          FLY_API_TOKEN: ${{ secrets.FLYIO_AUTH_TOKEN }}
        run: |
          app_name="${{ steps.setup.outputs.app-name }}"

          echo "Copying test fixtures to VM..."
          flyctl ssh sftp shell --app $app_name <<'SFTP_EOF'
            put .github/workflows/test-fixtures/manifest-reorder-test.conf /tmp/manifest-reorder.conf
            put .github/workflows/test-fixtures/manifest-with-comments.conf /tmp/manifest-comments.conf
            quit
          SFTP_EOF

      - name: Test reorder functionality
        env:
          FLY_API_TOKEN: ${{ secrets.FLYIO_AUTH_TOKEN }}
        run: |
          app_name="${{ steps.setup.outputs.app-name }}"

          echo "Testing extension reorder functionality..."

          flyctl ssh console --app $app_name --user developer --command "/bin/bash -lc '
            cd /workspace/scripts/lib
            manifest=\"extensions.d/active-extensions.conf\"

            echo \"Using test fixture for reorder test...\"
            cp /tmp/manifest-reorder.conf \$manifest

            echo \"\"
            echo \"=== Initial manifest ===\"
            cat -n \$manifest

            echo \"\"
            echo \"Running: extension-manager reorder python 5\"
            if bash extension-manager.sh reorder python 5 2>&1; then
              echo \"\"
              echo \"=== Manifest after reorder ===\"
              cat -n \$manifest

              # Check that python is at the 5th non-comment line (extension position 5)
              # With 1 comment line at top, this would be file line 6
              extension_line=\$(grep -v \"^#\" \$manifest | grep -v \"^$\" | sed -n \"5p\")
              if echo \"\$extension_line\" | grep -q \"^python\"; then
                echo \"\"
                echo \"✅ python correctly moved to extension position 5\"
                echo \"Extension at position 5: \$extension_line\"
              else
                echo \"\"
                echo \"❌ python not at extension position 5\"
                echo \"Extension at position 5: \$extension_line\"
                echo \"\"
                echo \"All extensions (non-comment lines):\"
                grep -v \"^#\" \$manifest | grep -v \"^$\" | cat -n
                exit 1
              fi
            else
              echo \"❌ reorder command failed\"
              exit 1
            fi
          '"

      - name: Test manifest comment preservation
        env:
          FLY_API_TOKEN: ${{ secrets.FLYIO_AUTH_TOKEN }}
        run: |
          app_name="${{ steps.setup.outputs.app-name }}"

          echo "Testing that comments are preserved in manifest operations..."

          flyctl ssh console --app $app_name --user developer --command "/bin/bash -lc '
            cd /workspace/scripts/lib
            manifest=\"extensions.d/active-extensions.conf\"

            echo \"Using test fixture with comments...\"
            cp /tmp/manifest-comments.conf \$manifest

            echo \"\"
            echo \"=== Manifest with comments ===\"
            cat \$manifest

            echo \"\"
            echo \"Running: extension-manager deactivate python\"
            bash extension-manager.sh deactivate python

            echo \"\"
            echo \"=== Manifest after deactivate ===\"
            cat \$manifest

            echo \"\"
            echo \"Verifying comments preserved...\"
            if grep -q \"^# My custom header comment\" \$manifest && \
               grep -q \"^# Language runtimes\" \$manifest && \
               grep -q \"^# This is my important comment\" \$manifest; then
              echo \"✅ All comments preserved\"
            else
              echo \"❌ Comments were not preserved\"
              exit 1
            fi

            if grep -q \"^python\" \$manifest; then
              echo \"❌ python still in manifest\"
              exit 1
            else
              echo \"✅ python correctly removed\"
            fi
          '"

      # Using composite action for cleanup
      - name: Cleanup test resources
        if: always() && !inputs.skip_cleanup
        uses: ./.github/actions/cleanup-fly-app
        with:
          app-name: ${{ steps.setup.outputs.app-name }}
          fly-api-token: ${{ secrets.FLYIO_AUTH_TOKEN }}
