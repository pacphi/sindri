name: Protected Extensions Tests

on:
  workflow_call:
    inputs:
      test_app_prefix:
        description: 'Test app prefix'
        required: false
        default: 'ext-test'
        type: string
      region:
        description: 'Fly.io region'
        required: false
        default: 'sjc'
        type: string
      skip_cleanup:
        description: 'Skip cleanup for debugging'
        required: false
        default: false
        type: boolean
    secrets:
      FLYIO_AUTH_TOKEN:
        required: true

jobs:
  protected-extensions-tests:
    name: Test Protected Extension Enforcement
    runs-on: ubuntu-latest
    timeout-minutes: 40
    permissions:
      contents: read

    steps:
      # Using composite action for setup
      - name: Setup Fly.io test environment
        id: setup
        uses: ./.github/actions/setup-fly-test-env
        with:
          app-prefix: ${{ inputs.test_app_prefix }}
          extension-name: 'protected'
          fly-api-token: ${{ secrets.FLYIO_AUTH_TOKEN }}
          vm-memory: '2048'
          vm-cpu-kind: 'shared'
          vm-cpu-count: '1'
          volume-size: '10'

      # Using composite action for deployment
      - name: Deploy test environment
        uses: ./.github/actions/deploy-fly-app
        with:
          app-name: ${{ steps.setup.outputs.app-name }}
          region: ${{ inputs.region }}
          fly-api-token: ${{ secrets.FLYIO_AUTH_TOKEN }}
          deploy-timeout: '600'

      # Using composite action for waiting
      - name: Wait for deployment
        uses: ./.github/actions/wait-fly-deployment
        with:
          app-name: ${{ steps.setup.outputs.app-name }}
          fly-api-token: ${{ secrets.FLYIO_AUTH_TOKEN }}
          timeout-seconds: '420'
          expected-status: 'running'

      - name: Install protected extensions
        env:
          FLY_API_TOKEN: ${{ secrets.FLYIO_AUTH_TOKEN }}
        run: |
          app_name="${{ steps.setup.outputs.app-name }}"

          flyctl ssh console --app $app_name --user developer --command "/bin/bash -lc '
            cd /workspace/scripts/lib
            manifest=\"extensions.d/active-extensions.conf\"

            # Add all protected extensions
            echo \"workspace-structure\" > \$manifest
            echo \"mise-config\" >> \$manifest
            echo \"ssh-environment\" >> \$manifest

            bash extension-manager.sh install-all
          '"

      - name: Test cannot deactivate protected extensions
        env:
          FLY_API_TOKEN: ${{ secrets.FLYIO_AUTH_TOKEN }}
        run: |
          app_name="${{ steps.setup.outputs.app-name }}"

          echo "Testing that protected extensions cannot be deactivated..."

          flyctl ssh console --app $app_name --user developer --command "/bin/bash -lc '
            cd /workspace/scripts/lib

            for ext in workspace-structure mise-config ssh-environment; do
              echo \"\"
              echo \"Testing deactivation prevention for \$ext...\"

              # Capture exit code before piping to tee
              bash extension-manager.sh deactivate \$ext 2>&1 | tee /tmp/deactivate_\${ext}.log
              deactivate_exit=\${PIPESTATUS[0]}

              if [ \$deactivate_exit -eq 0 ]; then
                echo \"❌ FAIL: \$ext was deactivated (should be protected)\"
                cat /tmp/deactivate_\${ext}.log
                exit 1
              else
                # Check that error message mentions protection
                if grep -qi \"protected\|cannot.*deactivate\" /tmp/deactivate_\${ext}.log; then
                  echo \"✅ PASS: \$ext properly protected from deactivation with correct error message\"
                else
                  echo \"⚠️  \$ext blocked but no protection message found\"
                  cat /tmp/deactivate_\${ext}.log
                fi
              fi
            done

            echo \"\"
            echo \"✅ All protected extensions properly blocked from deactivation\"
          '"

      - name: Test cannot uninstall protected extensions
        env:
          FLY_API_TOKEN: ${{ secrets.FLYIO_AUTH_TOKEN }}
        run: |
          app_name="${{ steps.setup.outputs.app-name }}"

          echo "Testing that protected extensions cannot be uninstalled..."

          flyctl ssh console --app $app_name --user developer --command "/bin/bash -lc '
            cd /workspace/scripts/lib

            for ext in workspace-structure mise-config ssh-environment; do
              echo \"\"
              echo \"Testing uninstall prevention for \$ext...\"

              # Capture exit code before piping to tee
              bash extension-manager.sh uninstall \$ext 2>&1 | tee /tmp/uninstall_\${ext}.log
              uninstall_exit=\${PIPESTATUS[0]}

              if [ \$uninstall_exit -eq 0 ]; then
                echo \"❌ FAIL: \$ext was uninstalled (should be protected)\"
                exit 1
              else
                # Check that error message mentions protection
                if grep -qi \"protected\|cannot.*uninstall\" /tmp/uninstall_\${ext}.log; then
                  echo \"✅ PASS: \$ext properly protected from uninstall with correct error message\"
                else
                  echo \"⚠️  \$ext blocked but no protection message found\"
                  cat /tmp/uninstall_\${ext}.log
                fi
              fi
            done

            echo \"\"
            echo \"✅ All protected extensions properly blocked from uninstall\"
          '"

      - name: Test auto-repair manifest (protected extensions missing)
        env:
          FLY_API_TOKEN: ${{ secrets.FLYIO_AUTH_TOKEN }}
        run: |
          app_name="${{ steps.setup.outputs.app-name }}"

          echo "Testing auto-repair when protected extensions removed from manifest..."

          flyctl ssh console --app $app_name --user developer --command "/bin/bash -lc '
            cd /workspace/scripts/lib
            manifest=\"extensions.d/active-extensions.conf\"

            echo \"Removing protected extensions from manifest...\"
            # Backup original
            cp \$manifest \${manifest}.backup

            # Remove protected extensions
            sed -i \"/^workspace-structure$/d\" \$manifest
            sed -i \"/^mise-config$/d\" \$manifest
            sed -i \"/^ssh-environment$/d\" \$manifest

            echo \"\"
            echo \"=== Manifest after removal ===\"
            cat \$manifest || echo \"(empty)\"

            echo \"\"
            echo \"Running: extension-manager list (triggers auto-repair)...\"
            bash extension-manager.sh list

            echo \"\"
            echo \"=== Manifest after auto-repair ===\"
            cat \$manifest

            # Verify protected extensions are back
            echo \"\"
            echo \"Verifying protected extensions were restored...\"
            for ext in workspace-structure mise-config ssh-environment; do
              if grep -q \"^\$ext\$\" \$manifest; then
                echo \"✅ \$ext restored to manifest\"
              else
                echo \"❌ \$ext NOT in manifest after auto-repair\"
                exit 1
              fi
            done

            # Verify they are at the top
            echo \"\"
            echo \"Verifying protected extensions are at top of manifest...\"
            head -n 10 \$manifest | grep -E \"^(workspace-structure|mise-config|ssh-environment)$\" || {
              echo \"❌ Protected extensions not at top of manifest\"
              exit 1
            }

            echo \"\"
            echo \"✅ Auto-repair correctly restored protected extensions to top of manifest\"
          '"

      - name: Test protected marker in list output
        env:
          FLY_API_TOKEN: ${{ secrets.FLYIO_AUTH_TOKEN }}
        run: |
          app_name="${{ steps.setup.outputs.app-name }}"

          echo "Testing that protected extensions show [PROTECTED] marker..."

          flyctl ssh console --app $app_name --user developer --command "/bin/bash -lc '
            cd /workspace/scripts/lib

            echo \"Running: extension-manager list\"
            output=\$(bash extension-manager.sh list 2>&1)
            echo \"\$output\"

            echo \"\"
            echo \"Checking for [PROTECTED] markers...\"
            for ext in workspace-structure mise-config ssh-environment; do
              if echo \"\$output\" | grep \"\$ext\" | grep -q \"PROTECTED\"; then
                echo \"✅ \$ext shows [PROTECTED] marker\"
              else
                echo \"❌ \$ext missing [PROTECTED] marker\"
                exit 1
              fi
            done

            echo \"\"
            echo \"✅ All protected extensions show [PROTECTED] marker in list output\"
          '"

      # Using composite action for cleanup
      - name: Cleanup test resources
        if: always() && !inputs.skip_cleanup
        uses: ./.github/actions/cleanup-fly-app
        with:
          app-name: ${{ steps.setup.outputs.app-name }}
          fly-api-token: ${{ secrets.FLYIO_AUTH_TOKEN }}
