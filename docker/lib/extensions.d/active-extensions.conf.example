# Active Extensions Configuration
# ============================================================================
# Extensions execute in the order listed below.
# Uncomment lines to activate extensions (remove the # at the start).
# Lines starting with # are comments and are ignored.
#
# To manage extensions:
#   1. Edit this file to uncomment desired extensions
#   2. Run: extension-manager install-all
#
# Or use interactive mode:
#   extension-manager --interactive
#
# Manual editing:
#   - Uncomment the extension name to activate
#   - Comment out or remove lines to deactivate
#   - Reorder lines to change execution priority
# ============================================================================

# ============================================================================
# CORE INFRASTRUCTURE (protected - cannot be removed)
# ============================================================================
# These extensions are automatically ensured by extension-manager and
# installed first. They provide foundational system functionality.

# Creates /workspace directory structure (PROTECTED)
workspace-structure

# Unified tool version manager - enables mise-powered extensions (PROTECTED)
# Required by: nodejs, python, rust, golang, nodejs-devtools
mise-config

# Configures SSH daemon for non-interactive sessions (PROTECTED)
# Required for CI/CD and remote command execution
ssh-environment

# ============================================================================
# FOUNDATIONAL LANGUAGES (install at least one)
# ============================================================================
# While not protected, nodejs is highly recommended as many tools depend on it

# Node.js LTS via mise and npm (required by claude-config, nodejs-devtools, playwright, monitoring)
# Depends on: mise-config
nodejs

# Python 3 via mise and pip (required by monitoring and many tools)
# Depends on: mise-config
python

# ============================================================================
# CLAUDE AI (recommended)
# ============================================================================

# Claude Code CLI with developer configuration (depends on nodejs)
# Creates ~/.claude/CLAUDE.md and ~/.claude/settings.json with hooks
claude-config

# ============================================================================
# DEVELOPMENT TOOLS (optional - uncomment as needed)
# ============================================================================

# GitHub CLI authentication and workflow configuration
github-cli

# Node.js development tools: TypeScript, ESLint, Prettier, nodemon, goalie (depends on nodejs)
nodejs-devtools

# Browser automation with Playwright and Chromium (depends on nodejs)
playwright

# Claude monitoring and usage tracking tools (depends on python, nodejs)
monitoring

# Agent manager for Claude Code agents (depends on curl, jq)
agent-manager

# Tmux workspace management with helper scripts
tmux-workspace

# Context management utilities for Claude Code
context-loader

# ============================================================================
# ADDITIONAL LANGUAGES (uncomment as needed)
# ============================================================================

# Rust toolchain with cargo via mise (depends on mise-config)
# rust

# Go programming language via mise (depends on mise-config)
# golang

# Docker and Docker Compose
# docker

# JVM languages (Java, Kotlin, Scala)
# jvm

# PHP and Composer
# php

# Ruby and Bundler
# ruby

# .NET Core SDK
# dotnet

# ============================================================================
# INFRASTRUCTURE & CLOUD TOOLS (uncomment as needed)
# ============================================================================

# Infrastructure tools (Terraform, Ansible, K8s tools)
# infra-tools

# Cloud CLI tools (AWS, GCP, Azure)
# cloud-tools

# AI coding assistants and tools
# ai-tools

# ============================================================================
# POST-INSTALLATION (optional - run this LAST)
# ============================================================================

# Clean caches, set permissions, create tools summary
# Run this LAST for optimal cleanup after all other extensions
post-cleanup

# ============================================================================
# NOTES
# ============================================================================
# - Order matters: extensions execute top to bottom
# - Protected extensions (workspace-structure, mise-config, ssh-environment)
#   are automatically added to manifest and cannot be removed
# - Cleanup extensions (post-cleanup) automatically move to the end
# - Dependencies are checked in prerequisites()
# - Use extension-manager commands for management:
#     extension-manager list              # Show all extensions
#     extension-manager install <name>    # Install extension (auto-activates)
#     extension-manager install-all       # Install all uncommented extensions
#     extension-manager --interactive     # Interactive setup with prompts
#     extension-manager validate-all      # Validate all installed extensions
# ============================================================================
