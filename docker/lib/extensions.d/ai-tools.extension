#!/bin/bash
# ai-tools.extension - AI CLI tools and coding assistants
# Extension API v1.0
#
# This extension installs AI CLI tools using a hybrid approach:
# - Native installs: Ollama (binary), Fabric (git clone)
# - mise npm backend: codex-cli, @google/gemini-cli (if Node.js available)
# - mise go backend: plandex, hector (if Go available)
# - Fallback: Direct npm/go install if mise unavailable

# Source shared extension library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$(dirname "$SCRIPT_DIR")/extensions-common.sh"

# ============================================================================
# METADATA
# ============================================================================

EXT_NAME="ai-tools"
EXT_VERSION="2.0.0"
EXT_DESCRIPTION="AI CLI tools and coding assistants (hybrid: native + mise-managed)"
EXT_CATEGORY="ai-tools"

# Initialize extension environment
extension_init

# ============================================================================
# PREREQUISITES
# ============================================================================

prerequisites() {
  print_status "Checking prerequisites for ${EXT_NAME}..."

  # Check for required system tools
  local missing_tools=()
  for tool in curl git sudo; do
    if ! command_exists "$tool"; then
      missing_tools+=("$tool")
    fi
  done

  if [[ ${#missing_tools[@]} -gt 0 ]]; then
    print_error "Missing required tools: ${missing_tools[*]}"
    print_status "Install with: sudo apt-get install ${missing_tools[*]}"
    return 1
  fi

  # Check disk space (AI tools need ~1GB)
  local available_space
  available_space=$(df -BM / | awk 'NR==2 {print $4}' | sed 's/M//')
  if [[ $available_space -lt 1500 ]]; then
    print_warning "Low disk space: ${available_space}MB available (1.5GB recommended for AI tools)"
  fi

  # Optional: Check for mise (preferred method)
  if command_exists mise; then
    print_status "mise detected - will use for npm/go tools"
  else
    print_warning "mise not available - will use fallback installations"
  fi

  # Optional dependencies (enable additional tools)
  local optional_deps=()
  command_exists npm && optional_deps+=("npm")
  command_exists go && optional_deps+=("go")
  command_exists pip && optional_deps+=("pip")
  command_exists gh && optional_deps+=("gh")
  command_exists aws && optional_deps+=("aws")

  if [[ ${#optional_deps[@]} -gt 0 ]]; then
    print_status "Optional dependencies available: ${optional_deps[*]}"
  fi

  print_success "All prerequisites met"
  return 0
}

# ============================================================================
# INSTALL
# ============================================================================

install() {
  print_status "Installing AI CLI tools using hybrid approach..."

  # ========================================================================
  # NATIVE INSTALLATIONS (Always installed this way)
  # ========================================================================

  # Check if running in CI mode
  if [[ "$CI_MODE" == "true" ]]; then
    print_status "CI mode detected - skipping native tools (Ollama, Fabric)"
  else
    # Ollama - Native binary installation
    print_status "Installing Ollama (native binary)..."
    if command_exists ollama; then
      print_warning "Ollama already installed"
    else
      local install_output
      if install_output=$(curl -fsSL https://ollama.com/install.sh | sh 2>&1); then
        if command_exists ollama; then
          print_success "Ollama installed"
          print_status "Start with: nohup ollama serve > ~/ollama.log 2>&1 &"
        else
          print_warning "Failed to install Ollama - binary not found after installation"
        fi
      else
        print_warning "Failed to install Ollama"
        echo "$install_output" | grep -i "error\|warn" | head -3
      fi
    fi

    # Fabric - Git clone + Go build (if Go available)
    print_status "Installing Fabric (git clone)..."
    if command_exists fabric; then
      print_warning "Fabric already installed"
    elif ! command_exists go; then
      print_warning "Go not found - skipping Fabric (requires Go to build)"
      print_status "Install golang extension for Fabric"
    else
      local FABRIC_DIR="$HOME/.local/share/fabric"
      mkdir -p "$HOME/.local/bin"

      if [[ -d "$FABRIC_DIR" ]]; then
        print_warning "Fabric repository already exists"
      else
        if git clone --depth 1 https://github.com/danielmiessler/fabric.git "$FABRIC_DIR" 2>&1; then
          print_success "Fabric repository cloned"
        else
          print_warning "Failed to clone Fabric repository"
        fi
      fi

      if [[ -d "$FABRIC_DIR" ]]; then
        cd "$FABRIC_DIR" || return 1
        if go build -o fabric 2>&1; then
          ln -sf "$FABRIC_DIR/fabric" "$HOME/.local/bin/fabric"
          export PATH="$HOME/.local/bin:$PATH"
          print_success "Fabric built and linked"
          print_status "Initialize with: fabric --setup"
        else
          print_warning "Failed to build Fabric"
        fi
        cd - > /dev/null || true
      fi
    fi
  fi

  # ========================================================================
  # MISE-MANAGED INSTALLATIONS (Preferred method)
  # ========================================================================

  if command_exists mise; then
    print_status "Installing AI tools via mise..."

    # Create mise config for ai-tools
    local MISE_CONF_DIR="$HOME/.config/mise/conf.d"
    mkdir -p "$MISE_CONF_DIR"
    local TOML_FILE="$MISE_CONF_DIR/ai-tools.toml"

    # Build toml content dynamically based on available runtimes
    local toml_content="# AI Tools - mise configuration\n# Auto-generated by ai-tools extension\n\n[tools]\n"

    # Add npm-based tools if Node.js is available
    if command_exists npm || command_exists node; then
      toml_content+="# npm-based tools (requires nodejs extension)\n"
      toml_content+='"npm:codex-cli" = "latest"\n'
      toml_content+='"npm:@google/gemini-cli" = "latest"\n'
      toml_content+="\n"
    fi

    # Add Go-based tools if Go is available
    if command_exists go; then
      toml_content+="# Go-based tools (requires golang extension)\n"
      toml_content+='"go:github.com/plandex-ai/plandex" = "latest"\n'
      toml_content+='"go:github.com/kadirpekel/hector/cmd/hector" = "latest"\n'
      toml_content+="\n"
    fi

    # Write toml file
    echo -e "$toml_content" > "$TOML_FILE"
    print_success "Created mise config: $TOML_FILE"

    # Install tools via mise
    if mise install 2>&1 | tee /tmp/mise-install.log; then
      print_success "mise install completed"
    else
      print_warning "mise install encountered issues - check /tmp/mise-install.log"
    fi

  else
    # ========================================================================
    # FALLBACK INSTALLATIONS (Direct npm/go install)
    # ========================================================================
    print_warning "mise not available - using fallback installations"

    # Fallback: npm global installs
    if command_exists npm; then
      print_status "Installing npm-based tools (fallback)..."

      # Codex CLI
      if command_exists codex; then
        print_warning "Codex CLI already installed"
      else
        if npm install -g codex-cli 2>&1; then
          command_exists codex && print_success "Codex CLI installed"
        else
          print_warning "Failed to install Codex CLI"
        fi
      fi

      # Gemini CLI
      if command_exists gemini; then
        print_warning "Gemini CLI already installed"
      else
        if npm install -g @google/gemini-cli 2>&1; then
          command_exists gemini && print_success "Gemini CLI installed"
        else
          print_warning "Failed to install Gemini CLI"
        fi
      fi
    else
      print_warning "npm not found - skipping npm-based tools"
      print_status "Install nodejs extension for npm-based tools"
    fi

    # Fallback: go install
    if command_exists go; then
      print_status "Installing Go-based tools (fallback)..."

      # Set up Go bin path
      export GOPATH=$HOME/go
      export GOBIN=$GOPATH/bin
      export PATH=$PATH:$GOBIN
      mkdir -p "$GOBIN"

      # Plandex
      if command_exists plandex; then
        print_warning "Plandex already installed"
      else
        if timeout 300 go install github.com/plandex-ai/plandex@latest 2>&1; then
          command_exists plandex && print_success "Plandex installed"
        else
          print_warning "Failed to install Plandex"
        fi
      fi

      # Hector
      if command_exists hector; then
        print_warning "Hector already installed"
      else
        if timeout 300 go install github.com/kadirpekel/hector/cmd/hector@latest 2>&1; then
          command_exists hector && print_success "Hector installed"
        else
          print_warning "Failed to install Hector"
        fi
      fi
    else
      print_warning "Go not found - skipping Go-based tools"
      print_status "Install golang extension for Go-based tools"
    fi
  fi

  # ========================================================================
  # PLATFORM CLIs (No change - installed via platform-specific methods)
  # ========================================================================

  # GitHub Copilot CLI
  print_status "Installing GitHub Copilot CLI..."
  if command_exists gh; then
    if gh extension list 2>/dev/null | grep -q "github/gh-copilot"; then
      print_warning "GitHub Copilot CLI already installed"
    else
      if gh extension install github/gh-copilot 2>&1; then
        print_success "GitHub Copilot CLI installed"
      else
        print_warning "Failed to install GitHub Copilot CLI"
      fi
    fi
  else
    print_warning "GitHub CLI (gh) not found - skipping GitHub Copilot CLI"
    print_status "Install github-cli extension for gh"
  fi

  # AWS Q Developer
  if command_exists aws; then
    print_status "AWS CLI available - Amazon Q Developer accessible via 'aws q' commands"
  else
    print_warning "AWS CLI not found - Amazon Q Developer unavailable"
    print_status "Install cloud-tools extension for AWS CLI"
  fi

  # Python-based tools (Grok CLI)
  if command_exists pip || command_exists pip3; then
    local pip_cmd="pip"
    command_exists pip3 && pip_cmd="pip3"

    print_status "Installing Grok CLI..."
    if command_exists grok; then
      print_warning "Grok CLI already installed"
    else
      if $pip_cmd install grok-cli 2>&1; then
        command_exists grok && print_success "Grok CLI installed"
      else
        print_warning "Failed to install Grok CLI"
      fi
    fi
  else
    print_warning "pip not found - skipping Grok CLI"
    print_status "Install python extension for Python-based tools"
  fi

  return 0
}

# ============================================================================
# CONFIGURE
# ============================================================================

configure() {
  print_status "Configuring AI CLI tools..."

  # Configure ~/.local/bin PATH for Fabric
  if [[ -d "$HOME/.local/bin" ]]; then
    if command_exists setup_tool_path 2>/dev/null; then
      setup_tool_path "local-bin" 'export PATH=$HOME/.local/bin:$PATH'
    else
      # Fallback: add to bashrc
      if ! grep -q '$HOME/.local/bin' "$HOME/.bashrc" 2>/dev/null; then
        echo "" >> "$HOME/.bashrc"
        echo "# ${EXT_NAME} - Local bin" >> "$HOME/.bashrc"
        echo 'export PATH=$HOME/.local/bin:$PATH' >> "$HOME/.bashrc"
        print_success "Added ~/.local/bin to PATH"
      fi
    fi
    export PATH=$HOME/.local/bin:$PATH
  fi

  # Configure Go bin PATH for SSH sessions (if Go tools were installed)
  if command_exists go && [[ -d "$HOME/go/bin" ]]; then
    if command_exists setup_tool_path 2>/dev/null; then
      setup_tool_path "go-tools" 'export PATH=$PATH:$HOME/go/bin'
    else
      # Fallback: add to bashrc
      if ! grep -q '$HOME/go/bin' "$HOME/.bashrc" 2>/dev/null; then
        echo "" >> "$HOME/.bashrc"
        echo "# ${EXT_NAME} - Go tools" >> "$HOME/.bashrc"
        echo 'export PATH=$PATH:$HOME/go/bin' >> "$HOME/.bashrc"
        print_success "Added Go tools to PATH"
      fi
    fi
    export PATH=$PATH:$HOME/go/bin
  fi

  # Create SSH wrappers
  if command_exists create_tool_wrapper 2>/dev/null; then
    local ai_tools=(codex gemini ollama fabric plandex hector grok)
    for tool in "${ai_tools[@]}"; do
      if command_exists "$tool"; then
        create_tool_wrapper "$tool" "$(which $tool)"
      fi
    done
  fi

  # Create AI tools aliases
  if ! grep -q "# AI tools aliases" "$HOME/.bashrc" 2>/dev/null; then
    print_status "Creating AI tools aliases..."
    cat >> "$HOME/.bashrc" << 'EOF'

# AI tools aliases
# Codex
alias cx="codex"
alias cxs="codex suggest"
alias cxe="codex edit"
alias cxr="codex run"

# Gemini
alias gm="gemini"
alias gmc="gemini chat"
alias gmg="gemini generate"

# Ollama
alias ol="ollama"
alias olp="ollama pull"
alias olr="ollama run"
alias oll="ollama list"

# Fabric
alias fb="fabric"
alias fbex="fabric --pattern explain"
alias fbsum="fabric --pattern summarize"
alias fbimp="fabric --pattern improve_code"

# Plandex
alias px="plandex"
alias pxi="plandex init"
alias pxp="plandex plan"
alias pxe="plandex execute"
alias pxs="plandex status"

# GitHub Copilot
alias ghcp="gh copilot suggest"
alias ghce="gh copilot explain"

# AWS Q
alias awsq="aws q"
EOF
    print_success "AI tools aliases created"
  else
    print_debug "AI tools aliases already exist"
  fi

  # Create AI tools workspace
  local WORKSPACE_DIR="${WORKSPACE_DIR:-/workspace}"
  print_status "Setting up AI tools workspace..."
  mkdir -p "$WORKSPACE_DIR/ai-tools"/{ollama-models,fabric-patterns,projects}

  # Create comprehensive README (truncated for brevity - includes full content)
  if [[ ! -f "$WORKSPACE_DIR/ai-tools/README.md" ]]; then
    cat > "$WORKSPACE_DIR/ai-tools/README.md" << 'EOF'
# AI CLI Tools and Coding Assistants

## Installed AI Tools

### Autonomous Coding Agents

#### Codex CLI
- **Command**: `codex`
- **Description**: Multi-mode AI assistant with suggest, edit, and run capabilities
- **Usage**:
  ```bash
  codex suggest "how to optimize this function"
  codex edit file.js
  codex run "create a REST API"
  ```

#### Plandex
- **Command**: `plandex`
- **Prerequisites**: Requires Go
- **Usage**:
  ```bash
  plandex init
  plandex plan "add user authentication"
  plandex execute
  ```

#### Hector
- **Command**: `hector`
- **Prerequisites**: Requires Go
- **Description**: Pure A2A-Native declarative AI agent platform using YAML
- **Usage**:
  ```bash
  hector serve --config agent.yaml
  hector chat assistant
  hector call assistant "task"
  hector list
  ```

### Major Platform CLIs

#### Gemini CLI
- **Command**: `gemini`
- **API Key**: Set `GOOGLE_GEMINI_API_KEY`
- **Get Key**: https://makersuite.google.com/app/apikey
- **Usage**: `gemini chat "explain this code"`

#### GitHub Copilot CLI
- **Command**: `gh copilot`
- **Prerequisites**: GitHub CLI and Copilot subscription
- **Usage**:
  ```bash
  gh copilot suggest "git command to undo"
  gh copilot explain "docker-compose up"
  ```

#### Amazon Q Developer
- **Command**: `aws q`
- **Prerequisites**: AWS CLI
- **Usage**: `aws q chat`

### Local Model Management

#### Ollama
- **Command**: `ollama`
- **Description**: Run LLMs locally
- **Start**: `nohup ollama serve > ~/ollama.log 2>&1 &`
- **Usage**:
  ```bash
  ollama pull llama3.2
  ollama run llama3.2
  ollama list
  ```

#### Grok CLI
- **Command**: `grok`
- **Prerequisites**: Python/pip
- **API Key**: Set `GROK_API_KEY`
- **Usage**: `grok chat`

### Framework Tools

#### Fabric
- **Command**: `fabric`
- **Description**: AI pattern framework
- **Setup**: `fabric --setup`
- **Usage**:
  ```bash
  echo "code" | fabric --pattern explain
  fabric --list
  ```

## API Key Requirements

- **Google Gemini**: `GOOGLE_GEMINI_API_KEY` - https://makersuite.google.com/app/apikey
- **GitHub Copilot**: GitHub account with subscription
- **AWS Q**: AWS credentials
- **Grok**: `GROK_API_KEY` - xAI account
- **Ollama**: No API key (local)

### Setting API Keys

```bash
# Via Fly.io secrets (recommended)
flyctl secrets set GOOGLE_GEMINI_API_KEY=key -a <app>
flyctl secrets set GROK_API_KEY=key -a <app>

# Or in ~/.bashrc
export GOOGLE_GEMINI_API_KEY=your_key
export GROK_API_KEY=your_key
```

## Directory Structure

```
ai-tools/
├── ollama-models/   # Ollama model storage
├── fabric-patterns/ # Custom Fabric patterns
└── projects/        # AI-assisted projects
```

## Getting Started

**Local AI (no API keys):**
```bash
nohup ollama serve > ~/ollama.log 2>&1 &
ollama pull llama3.2
ollama run llama3.2
```

**Cloud AI (requires API keys):**
```bash
export GOOGLE_GEMINI_API_KEY=your_key
gemini chat "help me debug this"
```

**Development Tasks:**
```bash
plandex init
plandex plan "add JWT authentication"
```

## Best Practices

1. **Cost Management**: Use Ollama for dev/testing
2. **Security**: Never commit API keys
3. **Context**: Provide clear, specific prompts
4. **Validation**: Review AI-generated code
5. **Privacy**: Use local models for sensitive code
EOF
    print_success "AI tools README created"
  fi

  print_success "AI CLI tools configured"
  return 0
}

# ============================================================================
# VALIDATE
# ============================================================================

validate() {
  print_status "Validating AI CLI tools installation (hybrid approach)..."

  local all_valid=true
  local tools_found=0

  # Native tools
  print_status "Checking native tools..."
  if command_exists ollama; then
    local ollama_version=$(ollama --version 2>/dev/null || echo "unknown")
    print_success "Ollama: $ollama_version"
    ((tools_found++))
  fi

  if command_exists fabric; then
    # Fabric --help doesn't always return clean version info
    print_success "Fabric: installed"
    ((tools_found++))
  fi

  # npm-based tools (mise or fallback)
  print_status "Checking npm-based tools..."
  if command_exists codex; then
    local codex_version=$(codex --version 2>/dev/null || echo "installed")
    print_success "codex: $codex_version"
    ((tools_found++))
  fi

  if command_exists gemini; then
    local gemini_version=$(gemini --version 2>/dev/null || echo "installed")
    print_success "gemini: $gemini_version"
    ((tools_found++))
  fi

  # Go-based tools (mise or fallback)
  print_status "Checking Go-based tools..."
  if command_exists plandex; then
    local plandex_version=$(plandex version 2>/dev/null || echo "installed")
    print_success "plandex: $plandex_version"
    ((tools_found++))
  fi

  if command_exists hector; then
    local hector_version=$(hector version 2>/dev/null || echo "installed")
    print_success "hector: $hector_version"
    ((tools_found++))
  fi

  # Python-based tools
  if command_exists grok; then
    print_success "grok: installed"
    ((tools_found++))
  fi

  # Platform CLIs
  print_status "Checking platform CLIs..."
  local platform_found=0
  if command_exists gh && gh extension list 2>/dev/null | grep -q "gh-copilot"; then
    print_success "GitHub Copilot CLI: installed"
    ((platform_found++))
  fi
  if command_exists aws; then
    print_success "AWS Q Developer: available via 'aws q'"
    ((platform_found++))
  fi

  # Check mise config if mise is available
  if command_exists mise; then
    local TOML_FILE="$HOME/.config/mise/conf.d/ai-tools.toml"
    if [[ -f "$TOML_FILE" ]]; then
      print_success "mise config: $TOML_FILE"
    fi
  fi

  # Check workspace
  local WORKSPACE_DIR="${WORKSPACE_DIR:-/workspace}"
  if [[ -d "$WORKSPACE_DIR/ai-tools" ]]; then
    print_success "AI tools workspace: exists"
  else
    print_warning "AI tools workspace: not found"
  fi

  # Summary
  print_status "Total tools found: $tools_found (including $platform_found platform CLIs)"

  if [[ $tools_found -eq 0 ]]; then
    print_error "No AI tools found"
    all_valid=false
  fi

  if [[ "$all_valid" == "true" ]]; then
    print_success "Validation passed"
    return 0
  else
    print_error "Validation failed"
    return 1
  fi
}

# ============================================================================
# STATUS
# ============================================================================

status() {
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo "Extension: $EXT_NAME v$EXT_VERSION"
  echo "Description: $EXT_DESCRIPTION"
  echo "Category: $EXT_CATEGORY"
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo ""

  # Check installation status - at least one tool should be present
  local any_tool_found=false
  local all_tools=(codex gemini ollama fabric plandex hector grok)
  for tool in "${all_tools[@]}"; do
    if command_exists "$tool"; then
      any_tool_found=true
      break
    fi
  done

  if ! $any_tool_found; then
    echo "Status: ✗ NOT INSTALLED"
    return 1
  fi

  echo "Status: ✓ INSTALLED (Hybrid: Native + mise)"
  echo ""

  # Installation method
  if command_exists mise; then
    local TOML_FILE="$HOME/.config/mise/conf.d/ai-tools.toml"
    if [[ -f "$TOML_FILE" ]]; then
      print_status "Installation method: mise (preferred) + native"
    else
      print_status "Installation method: Native + fallback"
    fi
  else
    print_status "Installation method: Native + fallback (mise not available)"
  fi
  echo ""

  # Native tools
  echo "  Native installations:"
  if command_exists ollama; then
    local version=$(ollama --version 2>/dev/null || echo "installed")
    echo "    ✓ Ollama: $version"
  else
    echo "    ✗ Ollama: not installed"
  fi

  if command_exists fabric; then
    echo "    ✓ Fabric: installed (git clone + Go build)"
  else
    echo "    ✗ Fabric: not installed"
  fi

  # mise-managed or fallback tools
  echo ""
  if command_exists mise && [[ -f "$HOME/.config/mise/conf.d/ai-tools.toml" ]]; then
    echo "  mise-managed tools:"
  else
    echo "  Fallback installations:"
  fi

  # npm-based tools
  if command_exists npm || command_exists node; then
    echo "    npm-based:"
    for tool in codex gemini; do
      if command_exists "$tool"; then
        local version=$($tool --version 2>/dev/null || echo "installed")
        echo "      ✓ $tool: $version"
      else
        echo "      ✗ $tool: not installed"
      fi
    done
  else
    echo "    npm-based: (Node.js not available)"
  fi

  # Go-based tools
  if command_exists go; then
    echo "    Go-based:"
    for tool in plandex hector; do
      if command_exists "$tool"; then
        local version=$($tool version 2>/dev/null || echo "installed")
        echo "      ✓ $tool: $version"
      else
        echo "      ✗ $tool: not installed"
      fi
    done
  else
    echo "    Go-based: (Go not available)"
  fi

  # Python-based tools
  echo ""
  echo "  Python-based tools:"
  if command_exists grok; then
    echo "    ✓ grok: installed"
  else
    echo "    ✗ grok: not installed (requires pip)"
  fi

  # Platform CLIs
  echo ""
  echo "  Platform CLIs:"
  if command_exists gh && gh extension list 2>/dev/null | grep -q "gh-copilot"; then
    echo "    ✓ GitHub Copilot CLI (via gh extension)"
  else
    echo "    ✗ GitHub Copilot CLI (requires gh)"
  fi
  if command_exists aws; then
    echo "    ✓ AWS Q Developer (via 'aws q' commands)"
  else
    echo "    ✗ AWS Q Developer (requires AWS CLI)"
  fi

  # API key requirements
  echo ""
  print_status "API key requirements:"
  echo "  • Ollama: None (local models)"
  echo "  • Fabric: Optional (for AI features)"
  echo "  • Codex: Requires API key"
  echo "  • Gemini: Requires GOOGLE_GEMINI_API_KEY"
  echo "  • GitHub Copilot: Requires GitHub subscription"
  echo "  • AWS Q: Requires AWS credentials"
  echo "  • Grok: Requires GROK_API_KEY"

  # Dependencies
  echo ""
  print_status "Available dependencies:"
  local deps=()
  command_exists mise && deps+=("mise")
  command_exists npm && deps+=("npm")
  command_exists go && deps+=("go")
  command_exists pip && deps+=("pip")
  command_exists gh && deps+=("gh")
  command_exists aws && deps+=("aws")

  if [[ ${#deps[@]} -gt 0 ]]; then
    echo "  ${deps[*]}"
  else
    echo "  (none)"
  fi

  # mise config location
  if command_exists mise; then
    echo ""
    print_status "mise configuration:"
    local TOML_FILE="$HOME/.config/mise/conf.d/ai-tools.toml"
    if [[ -f "$TOML_FILE" ]]; then
      echo "  $TOML_FILE"
    else
      echo "  (not configured)"
    fi
  fi

  # Workspace
  echo ""
  local WORKSPACE_DIR="${WORKSPACE_DIR:-/workspace}"
  if [[ -d "$WORKSPACE_DIR/ai-tools" ]]; then
    print_status "AI tools workspace:"
    echo "  $WORKSPACE_DIR/ai-tools/"
    for dir in ollama-models fabric-patterns projects; do
      [[ -d "$WORKSPACE_DIR/ai-tools/$dir" ]] && echo "    ├── $dir/"
    done
  fi

  return 0
}

# ============================================================================
# HELPER FUNCTIONS
# ============================================================================

check_dependent_extensions() {
  local provided_commands=("$@")
  local dependent_extensions=()
  local manifest_file="$SCRIPT_DIR/active-extensions.conf"
  [[ ! -f "$manifest_file" ]] && manifest_file="/workspace/scripts/extensions.d/active-extensions.conf"
  [[ ! -f "$manifest_file" ]] && return 0

  while IFS= read -r line; do
    [[ "$line" =~ ^[[:space:]]*# ]] && continue
    [[ -z "${line// }" ]] && continue
    local ext_name=$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
    [[ "$ext_name" == "$EXT_NAME" ]] && continue
    local ext_file="$SCRIPT_DIR/${ext_name}.sh"
    if [[ ! -f "$ext_file" ]]; then
      local matches=("$SCRIPT_DIR/"*"-${ext_name}.sh")
      ext_file="${matches[0]}"
    fi
    [[ ! -f "$ext_file" ]] && continue
    for cmd in "${provided_commands[@]}"; do
      if grep -q "$cmd" "$ext_file" 2>/dev/null; then
        dependent_extensions+=("$ext_name")
        break
      fi
    done
  done < "$manifest_file"

  printf '%s\n' "${dependent_extensions[@]}"
}

# ============================================================================
# REMOVE
# ============================================================================

remove() {
  print_warning "Uninstalling AI CLI tools (hybrid approach)..."

  local dependent_exts=()
  mapfile -t dependent_exts < <(check_dependent_extensions "codex" "gemini" "ollama" "fabric" "plandex")
  if [[ ${#dependent_exts[@]} -gt 0 ]]; then
    print_warning "The following extensions depend on AI tools and may stop working:"
    for ext in "${dependent_exts[@]}"; do
      echo "  - $ext"
    done
    echo ""
  fi

  if ! prompt_confirmation "Continue with AI tools removal?"; then
    print_status "Removal cancelled"
    return 1
  fi

  # Remove mise config
  if command_exists mise; then
    local TOML_FILE="$HOME/.config/mise/conf.d/ai-tools.toml"
    if [[ -f "$TOML_FILE" ]]; then
      print_status "Removing mise configuration..."
      rm -f "$TOML_FILE"
      print_success "mise config removed"
    fi
  fi

  # Remove npm-based tools (if installed via fallback)
  if command_exists npm; then
    print_status "Removing npm-based tools..."
    local npm_tools=(codex-cli @google/gemini-cli)
    for tool in "${npm_tools[@]}"; do
      if npm list -g "$tool" 2>/dev/null | grep -q "$tool"; then
        npm uninstall -g "$tool" 2>/dev/null
      fi
    done
  fi

  # Remove GitHub Copilot extension
  if command_exists gh && gh extension list 2>/dev/null | grep -q "gh-copilot"; then
    gh extension remove github/gh-copilot 2>/dev/null
    print_success "GitHub Copilot CLI removed"
  fi

  # Remove Ollama (native installation)
  if command_exists ollama; then
    print_status "Removing Ollama..."
    sudo systemctl stop ollama 2>/dev/null || killall ollama 2>/dev/null
    sudo rm -f /usr/local/bin/ollama /usr/bin/ollama
    rm -rf ~/.ollama
    print_success "Ollama removed"
  fi

  # Remove Fabric (git clone + build)
  if [[ -d "$HOME/.local/share/fabric" ]]; then
    print_status "Removing Fabric..."
    rm -rf "$HOME/.local/share/fabric"
    [[ -L "$HOME/.local/bin/fabric" ]] && rm -f "$HOME/.local/bin/fabric"
    print_success "Fabric removed"
  fi

  # Remove Go-based tools (if installed via fallback)
  if [[ -d "$HOME/go/bin" ]]; then
    for tool in plandex hector; do
      [[ -f "$HOME/go/bin/$tool" ]] && rm -f "$HOME/go/bin/$tool"
    done
  fi

  # Remove Python-based tools
  if command_exists pip || command_exists pip3; then
    local pip_cmd="pip"
    command_exists pip3 && pip_cmd="pip3"
    $pip_cmd uninstall -y grok-cli 2>/dev/null
  fi

  # Remove aliases
  cleanup_bashrc "# AI tools aliases"

  # Remove Go tools PATH from bashrc
  cleanup_bashrc "# ${EXT_NAME} - Go tools"

  # Remove local bin PATH from bashrc
  cleanup_bashrc "# ${EXT_NAME} - Local bin"

  # Remove workspace
  local WORKSPACE_DIR="${WORKSPACE_DIR:-/workspace}"
  if [[ -d "$WORKSPACE_DIR/ai-tools" ]]; then
    read -p "Remove AI tools workspace directory? (y/N): " -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      rm -rf "$WORKSPACE_DIR/ai-tools"
      print_success "AI tools workspace removed"
    fi
  fi

  print_success "AI CLI tools uninstalled"
  print_warning "Restart shell: source ~/.bashrc"
  return 0
}

# ============================================================================
# MAIN EXECUTION
# ============================================================================

extension_main "$@"
