#!/bin/bash
# claude-config.sh.example - Claude Code CLI and configuration
# Extension API v1.0
#
# This extension installs Claude Code CLI and creates developer configuration.
# Requires the nodejs extension to be installed first.

# Source shared extension library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$(dirname "$SCRIPT_DIR")/extensions-common.sh"

# ============================================================================
# METADATA
# ============================================================================

EXT_NAME="claude-config"
EXT_VERSION="2.0.0"
EXT_DESCRIPTION="Claude Code CLI with developer preferences and hooks"
EXT_CATEGORY="dev-tools"
EXT_INSTALL_METHOD="mise"  # Uses mise npm plugin
EXT_UPGRADE_STRATEGY="automatic"

# Initialize extension environment
extension_init

# ============================================================================
# PREREQUISITES
# ============================================================================

prerequisites() {
  print_status "Checking prerequisites for ${EXT_NAME}..."

  # Hard requirement: Node.js
  if ! command_exists node; then
    print_error "Node.js is required but not installed"
    print_status "Install with: extension-manager install nodejs"
    return 1
  fi

  # Hard requirement: npm
  if ! command_exists npm; then
    print_error "npm is required but not found"
    print_status "Install the nodejs extension first"
    return 1
  fi

  print_success "All prerequisites met"
  return 0
}

# ============================================================================
# INSTALL
# ============================================================================

install() {
  print_status "Installing Claude Code..."

  # Load NVM if available
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

  # Check if already installed
  if command_exists claude; then
    local claude_version=$(claude --version 2>/dev/null || echo "installed")
    print_warning "Claude Code already installed: $claude_version"
    print_status "Skipping installation (remove first to reinstall)"
    return 0
  fi

  # Install Claude Code globally
  if ! npm install -g @anthropic-ai/claude-code; then
    print_error "Claude Code installation failed"
    return 1
  fi

  # Verify installation
  if ! command_exists claude; then
    print_warning "Claude Code installed but command not found in PATH"
    print_status "You may need to reload your shell"
    return 1
  fi

  local claude_version=$(claude --version 2>/dev/null || echo "Not authenticated")
  print_success "Claude Code installed: $claude_version"
  return 0
}

# ============================================================================
# CONFIGURE
# ============================================================================

configure() {
  print_status "Setting up Claude Code configuration..."

  # Load NVM if available
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

  # Create Claude configuration directory
  mkdir -p "$HOME/.claude"

  # Create global CLAUDE.md with user preferences
  if [[ ! -f "$HOME/.claude/CLAUDE.md" ]]; then
    cat "$(dirname "${BASH_SOURCE[0]}")/claude-config.claude-md.template" > "$HOME/.claude/CLAUDE.md"
    print_success "Created global preferences: ~/.claude/CLAUDE.md"
  else
    print_status "Global preferences already exist: ~/.claude/CLAUDE.md"
  fi

  # Create settings.json with useful hooks
  if [[ ! -f "$HOME/.claude/settings.json" ]]; then
    cat "$(dirname "${BASH_SOURCE[0]}")/claude-config.settings-json.template" > "$HOME/.claude/settings.json"
    print_success "Created Claude hooks: ~/.claude/settings.json"
  else
    print_status "Claude hooks already exist: ~/.claude/settings.json"
  fi

  # Create SSH wrapper
  if command_exists create_tool_wrapper 2>/dev/null; then
    if command_exists claude; then
      create_tool_wrapper "claude" "$(which claude)"
    fi
  fi

  print_success "Claude Code configuration created"
  print_status "Authenticate with: claude"
  return 0
}

# ============================================================================
# VALIDATE
# ============================================================================

validate() {
  print_status "Validating Claude Code installation..."

  # Load NVM if available
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

  local all_valid=true

  # Check claude command exists
  if ! command_exists claude; then
    print_error "claude command not found"
    all_valid=false
  else
    local claude_version=$(claude --version 2>/dev/null || echo "Not authenticated")
    print_success "claude: $claude_version"
  fi

  # Check config directory structure
  if [[ -d "$HOME/.claude" ]]; then
    print_success "Configuration directory exists: ~/.claude"
  else
    print_error "Configuration directory not found: ~/.claude"
    all_valid=false
  fi

  # Validate CLAUDE.md exists
  if [[ -f "$HOME/.claude/CLAUDE.md" ]]; then
    print_success "Global preferences file exists: ~/.claude/CLAUDE.md"
  else
    print_warning "Global preferences file not found: ~/.claude/CLAUDE.md"
    all_valid=false
  fi

  # Validate settings.json exists
  if [[ -f "$HOME/.claude/settings.json" ]]; then
    print_success "Settings file exists: ~/.claude/settings.json"

    # Validate JSON syntax
    if command_exists jq && jq . "$HOME/.claude/settings.json" >/dev/null 2>&1; then
      print_success "Settings file is valid JSON"
    elif command_exists python3 && python3 -c "import json; json.load(open('$HOME/.claude/settings.json'))" >/dev/null 2>&1; then
      print_success "Settings file is valid JSON"
    else
      print_warning "Could not validate settings.json syntax"
    fi
  else
    print_warning "Settings file not found: ~/.claude/settings.json"
    all_valid=false
  fi

  if [[ "$all_valid" == "true" ]]; then
    print_success "Validation passed"
    return 0
  else
    print_error "Validation failed"
    return 1
  fi
}

# ============================================================================
# STATUS
# ============================================================================

status() {
  print_extension_header

  # Load NVM if available
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

  # Check installation status
  if ! command_exists claude; then
    echo "Status: ✗ NOT INSTALLED"
    return 1
  fi

  echo "Status: ✓ INSTALLED"
  echo ""

  # Extension-specific tool listing with versions
  print_status "Installed tools:"
  local claude_version=$(claude --version 2>/dev/null || echo "Not authenticated")
  echo "  ✓ claude: $claude_version"
  echo ""

  print_status "Authentication: Check with 'claude' command"

  # List configured hooks
  if [[ -f "$HOME/.claude/settings.json" ]]; then
    local hooks_count
    if command_exists jq; then
      hooks_count=$(jq '.hooks | length' "$HOME/.claude/settings.json" 2>/dev/null || echo "unknown")
    elif command_exists python3; then
      hooks_count=$(python3 -c "import json; print(len(json.load(open('$HOME/.claude/settings.json')).get('hooks', [])))" 2>/dev/null || echo "unknown")
    else
      hooks_count="unknown"
    fi
    echo ""
    print_status "Configured hooks: $hooks_count"
  fi

  # Show config files
  echo ""
  print_status "Configuration files:"
  [[ -f "$HOME/.claude/CLAUDE.md" ]] && echo "  ✓ ~/.claude/CLAUDE.md (global preferences)"
  [[ -f "$HOME/.claude/settings.json" ]] && echo "  ✓ ~/.claude/settings.json (hooks)"

  return 0
}

# ============================================================================
# UPGRADE
# ============================================================================

upgrade() {
  print_status "Upgrading ${EXT_NAME}..."

  # Load NVM if available
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

  # Get current version
  print_status "Current version:"
  if command_exists claude; then
    local current_version=$(claude --version 2>/dev/null || echo "version check failed")
    echo "  claude: $current_version"
  else
    echo "  claude: not installed"
  fi
  echo ""

  # Upgrade via npm
  print_status "Upgrading Claude Code..."
  if npm update -g @anthropic-ai/claude-code 2>&1; then
    print_success "Claude Code upgraded successfully"

    echo ""
    print_status "Updated version:"
    if command_exists claude; then
      local new_version=$(claude --version 2>/dev/null || echo "version check failed")
      echo "  claude: $new_version"
    fi

    return 0
  else
    print_error "Failed to upgrade Claude Code"
    return 1
  fi
}

# ============================================================================
# REMOVE
# ============================================================================

remove() {
  print_warning "Uninstalling Claude Code..."

  # Load NVM if available
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

  # Uninstall npm package
  if command_exists npm; then
    npm uninstall -g @anthropic-ai/claude-code 2>/dev/null
    print_success "Claude Code package uninstalled"
  fi

  # Prompt for config removal
  echo ""
  if prompt_confirmation "Remove Claude configuration directory (~/.claude)?"; then
    rm -rf "$HOME/.claude"
    print_success "Claude configuration removed"
  else
    print_status "Claude configuration preserved at ~/.claude"
    print_status "Contains: CLAUDE.md (preferences) and settings.json (hooks)"
  fi

  print_success "Claude Code uninstalled"
  return 0
}

# ============================================================================
# MAIN EXECUTION
# ============================================================================

extension_main "$@"
