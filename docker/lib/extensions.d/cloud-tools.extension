#!/bin/bash
# cloud-tools.sh.example - Cloud provider CLI tools
# Extension API v1.0
#
# This extension installs cloud provider CLIs with:
# - AWS CLI
# - Azure CLI
# - Google Cloud CLI (gcloud)
# - Oracle Cloud Infrastructure CLI
# - Alibaba Cloud CLI
# - DigitalOcean CLI (doctl)
# - IBM Cloud CLI
# - Cloud workspace setup

# Source shared extension library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$(dirname "$SCRIPT_DIR")/extensions-common.sh"

# ============================================================================
# METADATA
# ============================================================================

EXT_NAME="cloud-tools"
EXT_VERSION="1.0.0"
EXT_DESCRIPTION="Cloud provider CLI tools (AWS, Azure, GCP, OCI, Alibaba, DO, IBM)"
EXT_CATEGORY="infrastructure"

# Initialize extension environment
extension_init

# ============================================================================
# PREREQUISITES
# ============================================================================

prerequisites() {
  print_status "Checking prerequisites for ${EXT_NAME}..."

  # Check for apt-get (needed for GCP)
  if ! command_exists apt-get; then
    print_error "apt-get is required but not found"
    print_status "This extension requires a Debian/Ubuntu based system"
    return 1
  fi

  # Check for required tools
  local missing_tools=()
  for tool in wget curl sudo unzip; do
    if ! command_exists "$tool"; then
      missing_tools+=("$tool")
    fi
  done

  if [[ ${#missing_tools[@]} -gt 0 ]]; then
    print_error "Missing required tools: ${missing_tools[*]}"
    print_status "Install with: sudo apt-get install ${missing_tools[*]}"
    return 1
  fi

  # Check disk space (cloud CLIs need ~2GB)
  local available_space
  available_space=$(df -BM / | awk 'NR==2 {print $4}' | sed 's/M//')
  if [[ $available_space -lt 2500 ]]; then
    print_warning "Low disk space: ${available_space}MB available (2.5GB recommended for cloud CLIs)"
  fi

  print_success "All prerequisites met"
  return 0
}

# ============================================================================
# INSTALL
# ============================================================================

install() {
  print_status "Installing cloud provider CLI tools..."

  # AWS CLI
  print_status "Installing AWS CLI..."
  if command_exists aws; then
    print_warning "AWS CLI already installed: $(aws --version)"
  else
    if curl -fsSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"; then
      unzip -q awscliv2.zip
      sudo ./aws/install 2>/dev/null
      rm -rf aws awscliv2.zip
      print_success "AWS CLI installed"
    else
      print_warning "Failed to install AWS CLI"
    fi
  fi

  # Azure CLI
  print_status "Installing Azure CLI..."
  if command_exists az; then
    print_warning "Azure CLI already installed"
  else
    if curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash 2>/dev/null; then
      print_success "Azure CLI installed"
    else
      print_warning "Failed to install Azure CLI"
    fi
  fi

  # Google Cloud CLI
  print_status "Installing Google Cloud CLI..."
  if command_exists gcloud; then
    print_warning "Google Cloud CLI already installed"
  else
    echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list > /dev/null
    if curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - 2>/dev/null; then
      sudo apt-get update -qq && sudo apt-get install -y google-cloud-cli 2>/dev/null
      print_success "Google Cloud CLI installed"
    else
      print_warning "Failed to install Google Cloud CLI"
    fi
  fi

  # Check if running in CI mode
  if [[ "$CI_MODE" == "true" ]]; then
    print_status "CI mode detected - skipping optional cloud CLIs (Oracle, Alibaba, DigitalOcean, IBM)"
    return 0
  fi

  # Oracle Cloud Infrastructure CLI
  print_status "Installing Oracle Cloud CLI..."
  if command_exists oci; then
    print_warning "Oracle Cloud CLI already installed: $(oci --version)"
  else
    if bash -c "$(curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh)" -- --accept-all-defaults 2>/dev/null; then
      export PATH=$PATH:$HOME/bin
      print_success "Oracle Cloud CLI installed"
    else
      print_warning "Failed to install Oracle Cloud CLI"
    fi
  fi

  # Alibaba Cloud CLI
  print_status "Installing Alibaba Cloud CLI..."
  if command_exists aliyun; then
    print_warning "Alibaba Cloud CLI already installed: $(aliyun version)"
  else
    if wget -q https://aliyuncli.alicdn.com/aliyun-cli-linux-latest-amd64.tgz; then
      tar xzf aliyun-cli-linux-latest-amd64.tgz
      sudo mv aliyun /usr/local/bin/
      rm aliyun-cli-linux-latest-amd64.tgz
      print_success "Alibaba Cloud CLI installed"
    else
      print_warning "Failed to install Alibaba Cloud CLI"
    fi
  fi

  # DigitalOcean CLI
  print_status "Installing DigitalOcean CLI (doctl)..."
  if command_exists doctl; then
    print_warning "DigitalOcean CLI already installed: $(doctl version)"
  else
    local DOCTL_VERSION
    DOCTL_VERSION=$(curl -s https://api.github.com/repos/digitalocean/doctl/releases/latest 2>/dev/null | grep '"tag_name"' | sed -E 's/.*"v([^"]+)".*/\1/')
    if [[ -n "$DOCTL_VERSION" ]] && wget -q "https://github.com/digitalocean/doctl/releases/download/v${DOCTL_VERSION}/doctl-${DOCTL_VERSION}-linux-amd64.tar.gz"; then
      tar xzf "doctl-${DOCTL_VERSION}-linux-amd64.tar.gz"
      sudo mv doctl /usr/local/bin/
      rm "doctl-${DOCTL_VERSION}-linux-amd64.tar.gz"
      print_success "DigitalOcean CLI installed"
    else
      print_warning "Failed to install DigitalOcean CLI"
    fi
  fi

  # IBM Cloud CLI
  print_status "Installing IBM Cloud CLI..."
  if command_exists ibmcloud; then
    print_warning "IBM Cloud CLI already installed: $(ibmcloud version)"
  else
    if curl -fsSL https://clis.cloud.ibm.com/install/linux | sh 2>/dev/null; then
      print_success "IBM Cloud CLI installed"
    else
      print_warning "Failed to install IBM Cloud CLI"
    fi
  fi

  return 0
}

# ============================================================================
# CONFIGURE
# ============================================================================

configure() {
  print_status "Configuring cloud provider CLIs..."

  # Configure Oracle CLI PATH for SSH sessions
  if command_exists oci; then
    if command_exists setup_tool_path 2>/dev/null; then
      setup_tool_path "oci" 'export PATH=$PATH:$HOME/bin'
    else
      # Fallback: add to bashrc
      if ! grep -q '$HOME/bin' "$HOME/.bashrc" 2>/dev/null; then
        echo "" >> "$HOME/.bashrc"
        echo "# ${EXT_NAME} - Oracle Cloud CLI" >> "$HOME/.bashrc"
        echo 'export PATH=$PATH:$HOME/bin' >> "$HOME/.bashrc"
        print_success "Added Oracle CLI to PATH"
      fi
    fi
    export PATH=$PATH:$HOME/bin
  fi

  # Create SSH wrappers
  if command_exists create_tool_wrapper 2>/dev/null; then
    local cloud_clis=(aws az gcloud oci aliyun doctl ibmcloud)
    for cli in "${cloud_clis[@]}"; do
      if command_exists "$cli"; then
        create_tool_wrapper "$cli" "$(which $cli)"
      fi
    done
  fi

  # Create cloud CLI aliases
  if ! grep -q "# Cloud CLI aliases" "$HOME/.bashrc" 2>/dev/null; then
    print_status "Creating cloud CLI aliases..."
    cat >> "$HOME/.bashrc" << 'EOF'

# Cloud CLI aliases
# AWS
alias awsl="aws s3 ls"
alias awse="aws ec2 describe-instances"
alias awsv="aws --version"

# Azure
alias azl="az login"
alias azg="az group list"
alias azv="az vm list"

# Google Cloud
alias gcl="gcloud auth login"
alias gcp="gcloud config set project"
alias gci="gcloud compute instances list"

# Oracle Cloud
alias ocis="oci setup config"

# Alibaba Cloud
alias alic="aliyun configure"

# DigitalOcean
alias doa="doctl auth init"
alias dod="doctl compute droplet list"
alias dok="doctl kubernetes cluster list"

# IBM Cloud
alias ibml="ibmcloud login"
alias ibmr="ibmcloud resource groups"
EOF
    print_success "Cloud CLI aliases created"
  else
    print_debug "Cloud CLI aliases already exist"
  fi

  # Create cloud workspace
  local WORKSPACE_DIR="${WORKSPACE_DIR:-/workspace}"
  print_status "Setting up cloud workspace..."
  mkdir -p "$WORKSPACE_DIR/cloud"/{aws,azure,gcp,oracle,alibaba,digitalocean,ibm}

  # Create comprehensive README
  if [[ ! -f "$WORKSPACE_DIR/cloud/README.md" ]]; then
    cat > "$WORKSPACE_DIR/cloud/README.md" << 'EOF'
# Cloud Provider CLIs Workspace

## Installed Cloud Provider CLIs

### Amazon Web Services (AWS)
- **CLI**: `aws`
- **Documentation**: https://aws.amazon.com/cli/
- **Configuration**: `aws configure`

### Microsoft Azure
- **CLI**: `az`
- **Documentation**: https://docs.microsoft.com/cli/azure/
- **Login**: `az login`

### Google Cloud Platform (GCP)
- **CLI**: `gcloud`
- **Documentation**: https://cloud.google.com/sdk/gcloud
- **Authentication**: `gcloud auth login`
- **Set Project**: `gcloud config set project PROJECT_ID`

### Oracle Cloud Infrastructure (OCI)
- **CLI**: `oci`
- **Documentation**: https://docs.oracle.com/iaas/tools/oci-cli/
- **Setup**: `oci setup config`

### Alibaba Cloud
- **CLI**: `aliyun`
- **Documentation**: https://www.alibabacloud.com/help/cli
- **Configuration**: `aliyun configure`

### DigitalOcean
- **CLI**: `doctl`
- **Documentation**: https://docs.digitalocean.com/reference/doctl/
- **Authentication**: `doctl auth init`

### IBM Cloud
- **CLI**: `ibmcloud`
- **Documentation**: https://cloud.ibm.com/docs/cli
- **Login**: `ibmcloud login`

## Directory Structure
```
cloud/
├── aws/            # AWS configurations and scripts
├── azure/          # Azure configurations and scripts
├── gcp/            # GCP configurations and scripts
├── oracle/         # Oracle Cloud configurations
├── alibaba/        # Alibaba Cloud configurations
├── digitalocean/   # DigitalOcean configurations
└── ibm/            # IBM Cloud configurations
```

## Quick Start Examples

### AWS
```bash
# Configure credentials
aws configure

# List S3 buckets
aws s3 ls

# List EC2 instances
aws ec2 describe-instances
```

### Azure
```bash
# Login
az login

# List resource groups
az group list

# List virtual machines
az vm list
```

### Google Cloud
```bash
# Authenticate
gcloud auth login

# Set project
gcloud config set project my-project

# List compute instances
gcloud compute instances list
```

### Oracle Cloud
```bash
# Configure
oci setup config

# List compute instances
oci compute instance list --compartment-id <compartment-ocid>
```

### Alibaba Cloud
```bash
# Configure
aliyun configure

# List ECS instances
aliyun ecs DescribeInstances
```

### DigitalOcean
```bash
# Authenticate
doctl auth init

# List droplets
doctl compute droplet list

# List Kubernetes clusters
doctl kubernetes cluster list
```

### IBM Cloud
```bash
# Login
ibmcloud login

# List resource groups
ibmcloud resource groups

# List virtual server instances
ibmcloud is instances
```

## Multi-Cloud Best Practices

1. **Credential Management**: Keep credentials secure and never commit them to version control
2. **Environment Separation**: Use different profiles/accounts for dev, staging, and production
3. **Cost Monitoring**: Regularly review cloud spending across all providers
4. **Resource Tagging**: Tag resources consistently for better organization and cost allocation
5. **Infrastructure as Code**: Use Terraform, Pulumi, or provider-specific tools (CloudFormation, ARM templates, etc.)

## Additional Tools

Consider installing these multi-cloud tools:
- **Terraform**: Multi-cloud infrastructure as code
- **Pulumi**: Infrastructure as code using programming languages
- **CloudQuery**: Multi-cloud asset inventory and security
EOF
    print_success "Cloud workspace README created"
  fi

  print_success "Cloud provider CLIs configured"
  return 0
}

# ============================================================================
# VALIDATE
# ============================================================================

validate() {
  print_status "Validating cloud provider CLIs installation..."

  local all_valid=true

  # Core CLIs (always installed)
  local core_clis=(aws az gcloud)
  for cli in "${core_clis[@]}"; do
    if ! command_exists "$cli"; then
      print_error "$cli not found"
      all_valid=false
    else
      print_success "$cli: installed"
    fi
  done

  # Optional CLIs
  local optional_clis=(oci aliyun doctl ibmcloud)
  local optional_found=0
  for cli in "${optional_clis[@]}"; do
    command_exists "$cli" && ((optional_found++))
  done
  print_status "Optional CLIs: $optional_found/${#optional_clis[@]}"

  # Check workspace
  local WORKSPACE_DIR="${WORKSPACE_DIR:-/workspace}"
  if [[ -d "$WORKSPACE_DIR/cloud" ]]; then
    print_success "Cloud workspace: exists"
  else
    print_warning "Cloud workspace: not found"
  fi

  if [[ "$all_valid" == "true" ]]; then
    print_success "Validation passed"
    return 0
  else
    print_error "Validation failed"
    return 1
  fi
}

# ============================================================================
# STATUS
# ============================================================================

status() {
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo "Extension: $EXT_NAME v$EXT_VERSION"
  echo "Description: $EXT_DESCRIPTION"
  echo "Category: $EXT_CATEGORY"
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo ""

  # Check installation status
  local core_clis=(aws az gcloud)
  local any_installed=false
  for cli in "${core_clis[@]}"; do
    if command_exists "$cli"; then
      any_installed=true
      break
    fi
  done

  if [[ "$any_installed" == "false" ]]; then
    echo "Status: ✗ NOT INSTALLED"
    return 1
  fi

  echo "Status: ✓ INSTALLED"
  echo ""

  # Cloud-tools-specific tool listing with versions
  print_status "Installed tools:"

  # Core CLIs
  echo "  Core CLIs:"
  for cli in "${core_clis[@]}"; do
    if command_exists "$cli"; then
      local version=""
      case "$cli" in
        aws) version=$(aws --version 2>&1) ;;
        az) version=$(az version --output tsv --query '"azure-cli"' 2>/dev/null) ;;
        gcloud) version=$(gcloud version --format='value(version)' 2>/dev/null) ;;
      esac
      echo "    ✓ $cli: $version"
    fi
  done

  # Optional CLIs
  echo "  Optional CLIs:"
  local optional_clis=(oci aliyun doctl ibmcloud)
  for cli in "${optional_clis[@]}"; do
    if command_exists "$cli"; then
      local version=""
      case "$cli" in
        oci) version=$(oci --version 2>&1) ;;
        aliyun) version=$(aliyun version 2>&1) ;;
        doctl) version=$(doctl version 2>&1) ;;
        ibmcloud) version=$(ibmcloud version 2>&1) ;;
      esac
      echo "    ✓ $cli: $version"
    fi
  done

  # Workspace
  local WORKSPACE_DIR="${WORKSPACE_DIR:-/workspace}"
  if [[ -d "$WORKSPACE_DIR/cloud" ]]; then
    echo ""
    print_status "Cloud workspace:"
    echo "  $WORKSPACE_DIR/cloud/"
    for provider in aws azure gcp oracle alibaba digitalocean ibm; do
      [[ -d "$WORKSPACE_DIR/cloud/$provider" ]] && echo "    ├── $provider/"
    done
  fi

  return 0
}

# ============================================================================
# HELPER FUNCTIONS
# ============================================================================

check_dependent_extensions() {
  local provided_commands=("$@")
  local dependent_extensions=()
  local manifest_file="$SCRIPT_DIR/active-extensions.conf"
  [[ ! -f "$manifest_file" ]] && manifest_file="/workspace/scripts/extensions.d/active-extensions.conf"
  [[ ! -f "$manifest_file" ]] && return 0

  while IFS= read -r line; do
    [[ "$line" =~ ^[[:space:]]*# ]] && continue
    [[ -z "${line// }" ]] && continue
    local ext_name=$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
    [[ "$ext_name" == "$EXT_NAME" ]] && continue
    local ext_file="$SCRIPT_DIR/${ext_name}.sh"
    if [[ ! -f "$ext_file" ]]; then
      local matches=("$SCRIPT_DIR/"*"-${ext_name}.sh")
      ext_file="${matches[0]}"
    fi
    [[ ! -f "$ext_file" ]] && continue
    for cmd in "${provided_commands[@]}"; do
      if grep -q "$cmd" "$ext_file" 2>/dev/null; then
        dependent_extensions+=("$ext_name")
        break
      fi
    done
  done < "$manifest_file"

  printf '%s\n' "${dependent_extensions[@]}"
}

# ============================================================================
# REMOVE
# ============================================================================

remove() {
  print_warning "Uninstalling cloud provider CLIs..."

  local dependent_exts=()
  mapfile -t dependent_exts < <(check_dependent_extensions "aws" "az" "gcloud" "oci" "doctl" "ibmcloud")
  if [[ ${#dependent_exts[@]} -gt 0 ]]; then
    print_warning "The following extensions depend on cloud CLIs and may stop working:"
    for ext in "${dependent_exts[@]}"; do
      echo "  - $ext"
    done
    echo ""
  fi

  if ! prompt_confirmation "Continue with cloud CLIs removal?"; then
    print_status "Removal cancelled"
    return 1
  fi

  # Remove AWS CLI
  if [[ -d /usr/local/aws-cli ]]; then
    print_status "Removing AWS CLI..."
    sudo rm -rf /usr/local/aws-cli
    sudo rm -f /usr/local/bin/aws /usr/local/bin/aws_completer
    print_success "AWS CLI removed"
  fi

  # Remove Azure CLI
  if command_exists az; then
    print_status "Removing Azure CLI..."
    sudo apt-get remove -y azure-cli 2>/dev/null
    sudo apt-get autoremove -y 2>/dev/null
  fi

  # Remove Google Cloud CLI
  if command_exists gcloud; then
    print_status "Removing Google Cloud CLI..."
    sudo apt-get remove -y google-cloud-cli 2>/dev/null
    sudo rm -f /etc/apt/sources.list.d/google-cloud-sdk.list
    sudo rm -f /usr/share/keyrings/cloud.google.gpg
  fi

  # Remove Oracle Cloud CLI
  if [[ -d "$HOME/lib/oracle-cli" ]]; then
    read -p "Remove Oracle Cloud CLI installation directory? (y/N): " -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      rm -rf "$HOME/lib/oracle-cli" "$HOME/bin/oci"
      print_success "Oracle Cloud CLI removed"
    fi
  fi

  # Remove Alibaba Cloud CLI
  [[ -f /usr/local/bin/aliyun ]] && sudo rm -f /usr/local/bin/aliyun

  # Remove DigitalOcean CLI
  [[ -f /usr/local/bin/doctl ]] && sudo rm -f /usr/local/bin/doctl

  # Remove IBM Cloud CLI
  if [[ -d /usr/local/ibmcloud ]]; then
    sudo rm -rf /usr/local/ibmcloud
    sudo rm -f /usr/local/bin/ibmcloud
  fi

  # Remove aliases
  cleanup_bashrc "# Cloud CLI aliases"

  # Remove Oracle CLI PATH from bashrc
  cleanup_bashrc "# ${EXT_NAME}"

  # Remove workspace
  local WORKSPACE_DIR="${WORKSPACE_DIR:-/workspace}"
  if [[ -d "$WORKSPACE_DIR/cloud" ]]; then
    read -p "Remove cloud workspace directory? (y/N): " -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      rm -rf "$WORKSPACE_DIR/cloud"
      print_success "Cloud workspace removed"
    fi
  fi

  print_success "Cloud provider CLIs uninstalled"
  print_warning "Restart shell: source ~/.bashrc"
  return 0
}

# ============================================================================
# MAIN EXECUTION
# ============================================================================

extension_main "$@"
