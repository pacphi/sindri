#!/bin/bash
# context-loader.sh.example - Claude Code context management utilities
# Extension API v1.0
#
# This extension installs context management utilities for Claude Code,
# including context loading functions and Claude Flow wrappers.

# Source shared extension library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$(dirname "$SCRIPT_DIR")/extensions-common.sh"

# ============================================================================
# METADATA
# ============================================================================

EXT_NAME="context-loader"
EXT_VERSION="1.0.0"
EXT_DESCRIPTION="Claude Code context management utilities"
EXT_CATEGORY="development"

# Initialize extension environment
extension_init

# ============================================================================
# PREREQUISITES
# ============================================================================

prerequisites() {
  print_status "Checking prerequisites for ${EXT_NAME}..."

  # Check template files exist
  if [[ ! -f "/docker/lib/context-loader.sh" ]]; then
    print_warning "Template file not found: /docker/lib/context-loader.sh"
    print_status "Context loading utilities will need to be created manually"
  fi

  if [[ ! -f "/docker/lib/cf-with-context.sh" ]]; then
    print_warning "Template file not found: /docker/lib/cf-with-context.sh"
    print_status "Claude Flow wrapper will need to be created manually"
  fi

  print_success "All prerequisites met"
  return 0
}

# ============================================================================
# INSTALL
# ============================================================================

install() {
  print_status "Installing context management utilities..."

  # No packages to install - this extension only copies scripts
  print_success "No packages to install"
  return 0
}

# ============================================================================
# CONFIGURE
# ============================================================================

configure() {
  print_status "Configuring context management..."

  # Create context loading utilities
  local utilities_script="/workspace/scripts/lib/context-loader.sh"
  local template_file="/docker/lib/context-loader.sh"

  mkdir -p "/workspace/scripts/lib"

  if [[ -f "$template_file" ]]; then
    print_status "Copying context loader utilities..."
    cp "$template_file" "$utilities_script"
    chmod +x "$utilities_script"
    print_success "Context loading utilities installed"
  else
    print_warning "Template not found at $template_file"
    print_status "You'll need to create context-loader.sh manually"
  fi

  # Create Claude Flow context wrapper
  local wrapper_script="/workspace/scripts/cf-with-context.sh"
  local wrapper_template="/docker/lib/cf-with-context.sh"

  mkdir -p /workspace/scripts

  if [[ -f "$wrapper_template" ]]; then
    print_status "Copying Claude Flow context wrapper..."
    cp "$wrapper_template" "$wrapper_script"
    chmod +x "$wrapper_script"
    print_success "Claude Flow context wrapper installed"
  else
    print_warning "Template not found at $wrapper_template"
    print_status "You'll need to create cf-with-context.sh manually"
  fi

  # Create context directories if they don't exist
  mkdir -p /workspace/context/global
  mkdir -p /workspace/context/templates

  print_success "Context management configured"
  return 0
}

# ============================================================================
# VALIDATE
# ============================================================================

validate() {
  print_status "Validating context management installation..."

  local all_valid=true

  # Check utilities script
  if [[ ! -f "/workspace/scripts/lib/context-loader.sh" ]]; then
    print_error "Context loader utilities not found"
    all_valid=false
  else
    print_success "Context loader utilities: installed"

    if [[ ! -x "/workspace/scripts/lib/context-loader.sh" ]]; then
      print_warning "Context loader is not executable"
    fi
  fi

  # Check wrapper script
  if [[ ! -f "/workspace/scripts/cf-with-context.sh" ]]; then
    print_error "Claude Flow wrapper not found"
    all_valid=false
  else
    print_success "Claude Flow wrapper: installed"

    if [[ ! -x "/workspace/scripts/cf-with-context.sh" ]]; then
      print_warning "Wrapper is not executable"
    fi
  fi

  # Check context directories
  if [[ ! -d "/workspace/context" ]]; then
    print_warning "Context directory not found"
  else
    print_success "Context directory: exists"
  fi

  if [[ "$all_valid" == "true" ]]; then
    print_success "Validation passed"
    return 0
  else
    print_error "Validation failed"
    return 1
  fi
}

# ============================================================================
# STATUS
# ============================================================================

status() {
  print_status "Checking context management status..."

  # Check utilities script
  if [[ -f "/workspace/scripts/lib/context-loader.sh" ]]; then
    print_success "Context loader: /workspace/scripts/lib/context-loader.sh"
  else
    print_warning "Context loader utilities not installed"
  fi

  # Check wrapper script
  if [[ -f "/workspace/scripts/cf-with-context.sh" ]]; then
    print_success "CF wrapper: /workspace/scripts/cf-with-context.sh"
  else
    print_warning "Claude Flow wrapper not installed"
  fi

  # Show context directories
  print_status "Context directories:"
  if [[ -d "/workspace/context/global" ]]; then
    local global_count
    global_count=$(find /workspace/context/global -type f 2>/dev/null | wc -l)
    echo "  global: $global_count file(s)"
  else
    echo "  global: not found"
  fi

  if [[ -d "/workspace/context/templates" ]]; then
    local template_count
    template_count=$(find /workspace/context/templates -type f 2>/dev/null | wc -l)
    echo "  templates: $template_count file(s)"
  else
    echo "  templates: not found"
  fi

  return 0
}

# ============================================================================
# HELPER FUNCTIONS
# ============================================================================

# Check which active extensions depend on this one
check_dependent_extensions() {
  local provided_commands=("$@")
  local dependent_extensions=()

  # Get manifest file location
  local manifest_file="$SCRIPT_DIR/active-extensions.conf"
  [[ ! -f "$manifest_file" ]] && manifest_file="/workspace/scripts/extensions.d/active-extensions.conf"

  if [[ ! -f "$manifest_file" ]]; then
    return 0
  fi

  # Read active extensions
  while IFS= read -r line; do
    [[ "$line" =~ ^[[:space:]]*# ]] && continue
    [[ -z "${line// }" ]] && continue

    local ext_name=$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
    [[ "$ext_name" == "$EXT_NAME" ]] && continue

    # Find the extension file
    local ext_file="$SCRIPT_DIR/${ext_name}.sh"
    if [[ ! -f "$ext_file" ]]; then
      local matches=("$SCRIPT_DIR/"*"-${ext_name}.sh")
      ext_file="${matches[0]}"
    fi
    [[ ! -f "$ext_file" ]] && continue

    # Check if extension references any of the provided commands
    for cmd in "${provided_commands[@]}"; do
      if grep -q "$cmd" "$ext_file" 2>/dev/null; then
        dependent_extensions+=("$ext_name")
        break
      fi
    done
  done < "$manifest_file"

  printf '%s\n' "${dependent_extensions[@]}"
}

# ============================================================================
# REMOVE
# ============================================================================

remove() {
  print_warning "Uninstalling context management utilities..."

  # Check for dependent extensions
  local dependent_exts=()
  mapfile -t dependent_exts < <(check_dependent_extensions "context-loader" "cf-with-context")

  if [[ ${#dependent_exts[@]} -gt 0 ]]; then
    print_warning "The following active extensions depend on context utilities and may stop working:"
    for ext in "${dependent_exts[@]}"; do
      echo "  - $ext"
    done
    echo ""
  fi

  if ! prompt_confirmation "Continue with context utilities removal?"; then
    print_status "Removal cancelled"
    return 1
  fi

  # Remove scripts
  local scripts=(
    "/workspace/scripts/lib/context-loader.sh"
    "/workspace/scripts/cf-with-context.sh"
  )

  for script in "${scripts[@]}"; do
    if [[ -f "$script" ]]; then
      rm -f "$script"
      print_success "Removed: $(basename "$script")"
    fi
  done

  # Ask about context directories
  if [[ -d "/workspace/context" ]]; then
    print_warning "Context directory exists with user data"
    read -p "Remove /workspace/context directory? (y/N): " -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      rm -rf "/workspace/context"
      print_success "Context directory removed"
    else
      print_status "Context directory preserved"
    fi
  fi

  print_success "Context management utilities uninstalled"

  return 0
}

# ============================================================================
# MAIN EXECUTION
# ============================================================================

extension_main "$@"
