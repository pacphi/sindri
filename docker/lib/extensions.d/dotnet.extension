#!/bin/bash
# dotnet.sh.example - .NET SDK and development tools
# Extension API v1.0
#
# This extension installs .NET development environment with:
# - .NET SDK (9.0, 8.0 LTS)
# - ASP.NET Core Runtime
# - 19 global tools (EF Core, formatters, diagnostics)
# - NuGet CLI with Mono wrapper
# - Comprehensive aliases and templates

# Source shared extension library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$(dirname "$SCRIPT_DIR")/extensions-common.sh"

# ============================================================================
# METADATA
# ============================================================================

EXT_NAME="dotnet"
EXT_VERSION="1.0.0"
EXT_DESCRIPTION=".NET SDK with ASP.NET Core and development tools"
EXT_CATEGORY="language"

# Initialize extension environment
extension_init

# ============================================================================
# PREREQUISITES
# ============================================================================

prerequisites() {
  print_status "Checking prerequisites for ${EXT_NAME}..."

  # Check for apt-get
  if ! command_exists apt-get; then
    print_error "apt-get is required but not found"
    print_status "This extension requires a Debian/Ubuntu based system"
    return 1
  fi

  # Check for required tools
  local missing_tools=()
  for tool in wget sudo lsb_release; do
    if ! command_exists "$tool"; then
      missing_tools+=("$tool")
    fi
  done

  if [[ ${#missing_tools[@]} -gt 0 ]]; then
    print_error "Missing required tools: ${missing_tools[*]}"
    print_status "Install with: sudo apt-get install ${missing_tools[*]}"
    return 1
  fi

  # Check disk space (.NET needs ~2GB)
  local available_space
  available_space=$(df -BM / | awk 'NR==2 {print $4}' | sed 's/M//')
  if [[ $available_space -lt 2500 ]]; then
    print_warning "Low disk space: ${available_space}MB available (2.5GB recommended for .NET)"
  fi

  print_success "All prerequisites met"
  return 0
}

# ============================================================================
# INSTALL
# ============================================================================

install() {
  print_status "Installing .NET development environment..."

  # Check if .NET is already installed
  if command_exists dotnet; then
    local dotnet_version
    dotnet_version=$(dotnet --version 2>/dev/null)
    print_warning ".NET is already installed: $dotnet_version"
    print_status "Skipping installation (remove first to reinstall)"
    return 0
  fi

  # Install Microsoft package repository
  print_status "Setting up Microsoft package repository..."
  local UBUNTU_VERSION
  UBUNTU_VERSION=$(lsb_release -rs)

  if wget -q https://packages.microsoft.com/config/ubuntu/$UBUNTU_VERSION/packages-microsoft-prod.deb -O packages-microsoft-prod.deb; then
    sudo dpkg -i packages-microsoft-prod.deb
    rm packages-microsoft-prod.deb
    sudo apt-get update -qq
    print_success "Microsoft package repository configured"
  else
    print_error "Failed to configure Microsoft package repository"
    return 1
  fi

  # Install .NET SDK versions
  print_status "Installing .NET SDKs..."
  local dotnet_sdks=(
    "dotnet-sdk-9.0"    # Current LTS
    "dotnet-sdk-8.0"    # Previous version
  )

  local installed_count=0
  for sdk in "${dotnet_sdks[@]}"; do
    print_debug "Installing $sdk..."
    if sudo apt-get install -y "$sdk" 2>/dev/null; then
      print_debug "✓ $sdk installed"
      ((installed_count++))
    else
      print_warning "Failed to install $sdk or already installed"
    fi
  done

  print_status "Installed $installed_count/${#dotnet_sdks[@]} .NET SDKs"

  # Install ASP.NET Core Runtime
  print_status "Installing ASP.NET Core Runtime..."
  if sudo apt-get install -y aspnetcore-runtime-8.0 2>/dev/null; then
    print_success "ASP.NET Core Runtime installed"
  else
    print_warning "Failed to install ASP.NET Core Runtime or already installed"
  fi

  # Verify installation
  if command_exists dotnet; then
    print_success ".NET installed: $(dotnet --version)"
  else
    print_error ".NET installation failed"
    return 1
  fi

  # Check if running in CI mode
  if [[ "$CI_MODE" == "true" ]]; then
    print_status "CI mode detected - skipping .NET global tools and NuGet CLI"
    return 0
  fi

  # Set for current session (needed for tool installation)
  export DOTNET_CLI_TELEMETRY_OPTOUT=1
  export DOTNET_ROOT=/usr/share/dotnet
  export PATH=$PATH:$HOME/.dotnet/tools

  # Install .NET global tools
  print_status "Installing .NET global tools..."
  local dotnet_tools=(
    "dotnet-ef"                           # Entity Framework Core tools
    "dotnet-aspnet-codegenerator"         # ASP.NET Core scaffolding
    "dotnet-format"                       # Code formatter
    "dotnet-outdated-tool"                # Check for outdated packages
    "dotnet-script"                       # C# scripting
    "dotnet-serve"                         # Simple HTTP server
    "dotnet-watch"                         # File watcher
    "Microsoft.dotnet-interactive"         # .NET Interactive notebooks
    "Microsoft.Web.LibraryManager.Cli"     # Client-side library manager
    "dotnet-reportgenerator-globaltool"    # Code coverage report generator
    "dotnet-sonarscanner"                  # SonarQube scanner
    "dotnet-stryker"                       # Mutation testing
    "BenchmarkDotNet.Tool"                 # Benchmarking tool
    "dotnet-counters"                      # Performance monitoring
    "dotnet-trace"                         # .NET tracer
    "dotnet-dump"                          # Dump collection and analysis
    "dotnet-gcdump"                        # GC dump collection
    "Swashbuckle.AspNetCore.Cli"          # Swagger/OpenAPI tools
    "coverlet.console"                     # Code coverage
  )

  local tools_installed=0
  for tool in "${dotnet_tools[@]}"; do
    print_debug "Installing $tool..."
    if dotnet tool install --global "$tool" 2>/dev/null; then
      print_debug "✓ $tool installed"
      ((tools_installed++))
    else
      # Try updating if installation fails (might already be installed)
      if dotnet tool update --global "$tool" 2>/dev/null; then
        print_debug "✓ $tool updated"
        ((tools_installed++))
      else
        print_warning "Failed to install/update $tool"
      fi
    fi
  done

  print_status "Installed $tools_installed/${#dotnet_tools[@]} global tools"

  # Install NuGet CLI
  print_status "Installing NuGet CLI..."
  if ! command_exists nuget; then
    if sudo wget -O /usr/local/bin/nuget.exe https://dist.nuget.org/win-x86-commandline/latest/nuget.exe 2>/dev/null; then
      # Create wrapper script for nuget
      sudo tee /usr/local/bin/nuget > /dev/null << 'EOF'
#!/bin/bash
mono /usr/local/bin/nuget.exe "$@"
EOF
      sudo chmod +x /usr/local/bin/nuget

      # Install mono for NuGet CLI
      if sudo apt-get install -y mono-complete 2>/dev/null; then
        print_success "NuGet CLI installed"
      else
        print_warning "Failed to install mono for NuGet CLI"
      fi
    else
      print_warning "Failed to install NuGet CLI"
    fi
  fi

  return 0
}

# ============================================================================
# CONFIGURE
# ============================================================================

configure() {
  print_status "Configuring .NET environment..."

  # Configure PATH for SSH sessions
  if command_exists setup_tool_path 2>/dev/null; then
    setup_tool_path "dotnet" \
      'export DOTNET_CLI_TELEMETRY_OPTOUT=1' \
      'export DOTNET_ROOT=/usr/share/dotnet' \
      'export PATH=$PATH:$HOME/.dotnet/tools'
  else
    # Fallback: add to bashrc
    if ! grep -q "DOTNET_ROOT" "$HOME/.bashrc" 2>/dev/null; then
      echo "" >> "$HOME/.bashrc"
      echo "# ${EXT_NAME} - .NET configuration" >> "$HOME/.bashrc"
      echo 'export DOTNET_CLI_TELEMETRY_OPTOUT=1' >> "$HOME/.bashrc"
      echo 'export DOTNET_ROOT=/usr/share/dotnet' >> "$HOME/.bashrc"
      echo 'export PATH=$PATH:$HOME/.dotnet/tools' >> "$HOME/.bashrc"
      print_success "Added .NET to PATH"
    fi
  fi

  # Set for current session
  export DOTNET_CLI_TELEMETRY_OPTOUT=1
  export DOTNET_ROOT=/usr/share/dotnet
  export PATH=$PATH:$HOME/.dotnet/tools

  # Create SSH wrappers
  if command_exists create_tool_wrapper 2>/dev/null; then
    command_exists dotnet && create_tool_wrapper "dotnet" "$(which dotnet)"
    [[ -x /usr/local/bin/nuget ]] && create_tool_wrapper "nuget" "/usr/local/bin/nuget"
  fi

  # Create .NET aliases
  if ! grep -q "# .NET Core aliases" "$HOME/.bashrc" 2>/dev/null; then
    print_status "Creating .NET development aliases..."
    cat >> "$HOME/.bashrc" << 'EOF'

# .NET Core aliases
alias dn="dotnet"
alias dnr="dotnet run"
alias dnb="dotnet build"
alias dnc="dotnet clean"
alias dnt="dotnet test"
alias dnp="dotnet publish"
alias dnw="dotnet watch"
alias dnwr="dotnet watch run"
alias dnwt="dotnet watch test"

# Project management
alias dnnew="dotnet new"
alias dnrestore="dotnet restore"
alias dnadd="dotnet add package"
alias dnrem="dotnet remove package"
alias dnlist="dotnet list package"
alias dnout="dotnet outdated"
alias dnsln="dotnet new sln"
alias dnaddsln="dotnet sln add"
alias dnremsln="dotnet sln remove"

# Entity Framework Core
alias ef="dotnet ef"
alias efm="dotnet ef migrations"
alias efma="dotnet ef migrations add"
alias efmr="dotnet ef migrations remove"
alias efml="dotnet ef migrations list"
alias efdb="dotnet ef database"
alias efdbu="dotnet ef database update"
alias efdbd="dotnet ef database drop"

# Templates
alias dnweb="dotnet new web"
alias dnapi="dotnet new webapi"
alias dnmvc="dotnet new mvc"
alias dnrazor="dotnet new razor"
alias dnblazor="dotnet new blazor"
alias dnclass="dotnet new classlib"
alias dnconsole="dotnet new console"
alias dnxunit="dotnet new xunit"
alias dnnunit="dotnet new nunit"
alias dnmstest="dotnet new mstest"

# Tool shortcuts
alias dnf="dotnet format"
alias dns="dotnet serve"
alias dnscript="dotnet script"
alias dnef="dotnet ef"
alias dngen="dotnet aspnet-codegenerator"

# Package management
alias nuget="mono /usr/local/bin/nuget.exe"
alias paket="mono .paket/paket.exe"

# Build configurations
alias dnbd="dotnet build -c Debug"
alias dnbr="dotnet build -c Release"
alias dnpd="dotnet publish -c Debug"
alias dnpr="dotnet publish -c Release"

# Testing
alias dntv="dotnet test --verbosity normal"
alias dntc="dotnet test --collect:\"XPlat Code Coverage\""
alias dntr="dotnet test --results-directory ./TestResults"
alias dntf="dotnet test --filter"

# Performance
alias dncount="dotnet counters"
alias dntrace="dotnet trace"
alias dndump="dotnet dump"
alias dngc="dotnet gcdump"

# Docker support
alias dndk="dotnet publish -c Release -o out && docker build -t app ."
EOF
    print_success ".NET aliases created"
  else
    print_debug ".NET aliases already exist"
  fi

  # Create template files
  print_status "Creating .NET template files..."

  # Global.json for SDK version pinning
  if [[ ! -f "$HOME/.global.json.template" ]]; then
    cat > "$HOME/.global.json.template" << 'EOF'
{
  "sdk": {
    "version": "8.0.100",
    "rollForward": "latestMinor"
  }
}
EOF
    print_debug "✓ global.json.template created"
  fi

  # EditorConfig for .NET projects
  if [[ ! -f "$HOME/.editorconfig.template" ]]; then
    cat > "$HOME/.editorconfig.template" << 'EOF'
# EditorConfig is awesome: https://EditorConfig.org

# top-most EditorConfig file
root = true

# All files
[*]
charset = utf-8
insert_final_newline = true
trim_trailing_whitespace = true
indent_style = space
indent_size = 4

# Code files
[*.{cs,vb,fs,fsx,fsi}]
indent_size = 4

# C# files
[*.cs]
# New line preferences
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true

# Indentation preferences
csharp_indent_case_contents = true
csharp_indent_switch_labels = true

# Space preferences
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true

# Wrapping preferences
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = true

# Using directives
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false

# Project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# JSON files
[*.json]
indent_size = 2

# YAML files
[*.{yml,yaml}]
indent_size = 2

# XML files
[*.{xml,config,props,targets,nuspec,resx,ruleset,vsixmanifest,vsct}]
indent_size = 2

# Markdown files
[*.md]
trim_trailing_whitespace = false
EOF
    print_debug "✓ editorconfig.template created"
  fi

  # Directory.Build.props template
  if [[ ! -f "$HOME/.Directory.Build.props.template" ]]; then
    cat > "$HOME/.Directory.Build.props.template" << 'EOF'
<Project>
  <PropertyGroup>
    <LangVersion>latest</LangVersion>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <NoWarn>$(NoWarn);CS1591</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.CodeAnalysis.NetAnalyzers" Version="8.0.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>
</Project>
EOF
    print_debug "✓ Directory.Build.props.template created"
  fi

  # NuGet.config template
  if [[ ! -f "$HOME/.NuGet.config.template" ]]; then
    cat > "$HOME/.NuGet.config.template" << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <packageSources>
    <clear />
    <add key="nuget.org" value="https://api.nuget.org/v3/index.json" protocolVersion="3" />
    <!-- Add additional package sources here -->
  </packageSources>
  <packageSourceMapping>
    <packageSource key="nuget.org">
      <package pattern="*" />
    </packageSource>
  </packageSourceMapping>
</configuration>
EOF
    print_debug "✓ NuGet.config.template created"
  fi

  print_success ".NET configured"
  return 0
}

# ============================================================================
# VALIDATE
# ============================================================================

validate() {
  print_status "Validating .NET installation..."

  local all_valid=true

  # Check dotnet command
  if ! command_exists dotnet; then
    print_error "dotnet command not found"
    all_valid=false
  else
    print_success ".NET: $(dotnet --version)"
  fi

  # Check SDKs
  if command_exists dotnet; then
    local sdk_count
    sdk_count=$(dotnet --list-sdks 2>/dev/null | wc -l)
    print_status "Installed SDKs: $sdk_count"
  fi

  # Check runtimes
  if command_exists dotnet; then
    local runtime_count
    runtime_count=$(dotnet --list-runtimes 2>/dev/null | wc -l)
    print_status "Installed runtimes: $runtime_count"
  fi

  # Check global tools
  if [[ -d "$HOME/.dotnet/tools" ]]; then
    local tools_count
    tools_count=$(ls -1 "$HOME/.dotnet/tools" 2>/dev/null | wc -l)
    print_status "Global tools: $tools_count"
  fi

  # Check NuGet CLI
  if command_exists nuget; then
    print_success "NuGet CLI: installed"
  else
    print_warning "NuGet CLI not found"
  fi

  # Check template files
  local templates_found=0
  for template in .global.json.template .editorconfig.template .Directory.Build.props.template .NuGet.config.template; do
    [[ -f "$HOME/$template" ]] && ((templates_found++))
  done
  print_status "Template files: $templates_found/4"

  if [[ "$all_valid" == "true" ]]; then
    print_success "Validation passed"
    return 0
  else
    print_error "Validation failed"
    return 1
  fi
}

# ============================================================================
# STATUS
# ============================================================================

status() {
  print_status "Checking .NET status..."

  if ! command_exists dotnet; then
    print_warning ".NET not installed"
    return 1
  fi

  print_success ".NET: $(dotnet --version)"

  # Show SDKs
  if command_exists dotnet; then
    print_status "Installed SDKs:"
    dotnet --list-sdks 2>/dev/null | sed 's/^/  /'
  fi

  # Show runtimes
  print_status "Installed runtimes:"
  dotnet --list-runtimes 2>/dev/null | sed 's/^/  /'

  # Show global tools
  if [[ -d "$HOME/.dotnet/tools" ]]; then
    print_status "Global tools:"
    local tools=(dotnet-ef dotnet-format dotnet-script dotnet-serve dotnet-counters dotnet-trace)
    for tool in "${tools[@]}"; do
      [[ -f "$HOME/.dotnet/tools/$tool" ]] && echo "  ✓ $tool"
    done
  fi

  # Show NuGet CLI
  command_exists nuget && print_success "NuGet CLI: installed"

  # Show template files
  print_status "Template files:"
  for template in .global.json.template .editorconfig.template .Directory.Build.props.template .NuGet.config.template; do
    [[ -f "$HOME/$template" ]] && echo "  ✓ $template"
  done

  return 0
}

# ============================================================================
# HELPER FUNCTIONS
# ============================================================================

check_dependent_extensions() {
  local provided_commands=("$@")
  local dependent_extensions=()
  local manifest_file="$SCRIPT_DIR/active-extensions.conf"
  [[ ! -f "$manifest_file" ]] && manifest_file="/workspace/scripts/extensions.d/active-extensions.conf"
  [[ ! -f "$manifest_file" ]] && return 0

  while IFS= read -r line; do
    [[ "$line" =~ ^[[:space:]]*# ]] && continue
    [[ -z "${line// }" ]] && continue
    local ext_name=$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
    [[ "$ext_name" == "$EXT_NAME" ]] && continue
    local ext_file="$SCRIPT_DIR/${ext_name}.sh"
    if [[ ! -f "$ext_file" ]]; then
      local matches=("$SCRIPT_DIR/"*"-${ext_name}.sh")
      ext_file="${matches[0]}"
    fi
    [[ ! -f "$ext_file" ]] && continue
    for cmd in "${provided_commands[@]}"; do
      if grep -q "$cmd" "$ext_file" 2>/dev/null; then
        dependent_extensions+=("$ext_name")
        break
      fi
    done
  done < "$manifest_file"

  printf '%s\n' "${dependent_extensions[@]}"
}

# ============================================================================
# REMOVE
# ============================================================================

remove() {
  print_warning "Uninstalling .NET..."

  local dependent_exts=()
  mapfile -t dependent_exts < <(check_dependent_extensions "dotnet" "nuget" "dotnet-ef")
  if [[ ${#dependent_exts[@]} -gt 0 ]]; then
    print_warning "The following extensions depend on .NET and may stop working:"
    for ext in "${dependent_exts[@]}"; do
      echo "  - $ext"
    done
    echo ""
  fi

  if ! prompt_confirmation "Continue with .NET removal?"; then
    print_status "Removal cancelled"
    return 1
  fi

  # Remove .NET packages
  print_status "Removing .NET packages..."
  sudo apt-get remove -y dotnet-sdk-9.0 dotnet-sdk-8.0 aspnetcore-runtime-8.0 2>/dev/null
  sudo apt-get autoremove -y 2>/dev/null

  # Remove Microsoft package repository
  if [[ -f /etc/apt/sources.list.d/microsoft-prod.list ]]; then
    sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
    sudo apt-get update -qq
  fi

  # Remove global tools directory
  if [[ -d "$HOME/.dotnet/tools" ]]; then
    read -p "Remove .NET global tools directory? (y/N): " -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      rm -rf "$HOME/.dotnet"
      print_success ".NET global tools removed"
    fi
  fi

  # Remove NuGet CLI
  if [[ -f "/usr/local/bin/nuget" ]]; then
    sudo rm -f /usr/local/bin/nuget /usr/local/bin/nuget.exe
    print_success "NuGet CLI removed"
  fi

  # Remove Mono
  if command_exists mono; then
    read -p "Remove Mono runtime? (y/N): " -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      sudo apt-get remove -y mono-complete 2>/dev/null
      sudo apt-get autoremove -y 2>/dev/null
      print_success "Mono removed"
    fi
  fi

  # Remove aliases
  cleanup_bashrc "# .NET Core aliases"

  # Remove environment variables from bashrc
  cleanup_bashrc "# ${EXT_NAME}"

  # Remove template files
  read -p "Remove .NET template files? (y/N): " -r
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    rm -f "$HOME/.global.json.template" \
          "$HOME/.editorconfig.template" \
          "$HOME/.Directory.Build.props.template" \
          "$HOME/.NuGet.config.template"
    print_success "Template files removed"
  fi

  print_success ".NET uninstalled"
  print_warning "Restart shell: source ~/.bashrc"
  return 0
}

# ============================================================================
# MAIN EXECUTION
# ============================================================================

extension_main "$@"
