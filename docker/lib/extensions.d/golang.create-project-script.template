#!/bin/bash
# Create a new Go project with module initialization

project_name="$1"
if [[ -z "$project_name" ]]; then
    echo "Usage: $0 <project-name>"
    exit 1
fi

mkdir -p "/workspace/projects/active/$project_name"
cd "/workspace/projects/active/$project_name"

go mod init "github.com/user/$project_name"

mkdir -p cmd pkg internal

cat > cmd/main.go << 'MAIN'
package main

import "fmt"

func main() {
    fmt.Println("Hello, World!")
}
MAIN

cat > Makefile << 'MAKEFILE'
.PHONY: build run test clean

build:
	go build -o bin/$(shell basename $(CURDIR)) ./cmd

run:
	go run ./cmd

test:
	go test -v ./...

clean:
	rm -rf bin/

lint:
	golangci-lint run

fmt:
	go fmt ./...
	goimports -w .
MAKEFILE

cat > README.md << README
# $project_name

## Build
\`\`\`bash
make build
\`\`\`

## Run
\`\`\`bash
make run
\`\`\`

## Test
\`\`\`bash
make test
\`\`\`

## Development
\`\`\`bash
# Hot reload with air
air
\`\`\`
README

cat > .air.toml << 'AIR'
root = "."
testdata_dir = "testdata"
tmp_dir = "tmp"

[build]
  bin = "./tmp/main"
  cmd = "go build -o ./tmp/main ./cmd"
  delay = 1000
  exclude_dir = ["assets", "tmp", "vendor", "testdata"]
  exclude_file = []
  exclude_regex = ["_test.go"]
  exclude_unchanged = false
  follow_symlink = false
  full_bin = ""
  include_dir = []
  include_ext = ["go", "tpl", "tmpl", "html"]
  kill_delay = "0s"
  log = "build-errors.log"
  send_interrupt = false
  stop_on_error = true

[color]
  app = ""
  build = "yellow"
  main = "magenta"
  runner = "green"
  watcher = "cyan"
AIR

echo "Go project '$project_name' created successfully!"
echo "To run: cd /workspace/projects/active/$project_name && make run"
