#!/bin/bash
# golang.extension - Go toolchain and development tools via mise
# Extension API v1.0
#
# This extension installs Go with:
# - Go 1.24 via mise
# - Development tools (gopls, delve, golangci-lint, air) via mise go backend
# - Project template generator
# - CI mode detection for lightweight installs

# Source shared extension library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$(dirname "$SCRIPT_DIR")/extensions-common.sh"

# ============================================================================
# METADATA
# ============================================================================

EXT_NAME="golang"
EXT_VERSION="2.0.0"
EXT_DESCRIPTION="Go toolchain with development tools via mise"
EXT_CATEGORY="language"

# Initialize extension environment
extension_init

# ============================================================================
# PREREQUISITES
# ============================================================================

prerequisites() {
  print_status "Checking prerequisites for ${EXT_NAME}..."

  # Check for mise
  if ! command_exists mise; then
    print_error "mise is required but not installed"
    print_status "Install mise-config extension first: extension-manager install mise-config"
    return 1
  fi

  # Check disk space (Go needs ~500MB)
  local available_space
  available_space=$(df -BM "$HOME" 2>/dev/null | awk 'NR==2 {print $4}' | sed 's/M//')
  if [[ -n "$available_space" ]] && [[ $available_space -lt 600 ]]; then
    print_warning "Low disk space: ${available_space}MB available (600MB recommended for Go)"
  fi

  print_success "All prerequisites met"
  return 0
}

# ============================================================================
# INSTALL
# ============================================================================

install() {
  print_status "Installing Go toolchain via mise..."

  # Ensure mise config directory exists
  local mise_config_dir="$HOME/.config/mise/conf.d"
  mkdir -p "$mise_config_dir"

  # Determine which config to use (CI vs full)
  local source_config="${SCRIPT_DIR}/golang.toml"
  if [[ "$CI_MODE" == "true" ]]; then
    print_status "CI mode detected - using minimal golang-ci.toml"
    source_config="${SCRIPT_DIR}/golang-ci.toml"
  fi

  # Copy appropriate golang.toml to mise config directory
  local target_config="${mise_config_dir}/golang.toml"
  if [[ -f "$source_config" ]]; then
    print_status "Copying $(basename "$source_config") to mise config..."
    cp "$source_config" "$target_config"
    print_success "Go configuration installed"
  else
    print_error "Source config not found: $source_config"
    return 1
  fi

  # Activate mise for current session
  if command_exists mise; then
    eval "$(mise activate bash)" 2>/dev/null || true
  fi

  # Install Go and tools via mise
  print_status "Installing Go 1.24 and tools via mise..."
  if mise install 2>&1 | grep -v "^mise"; then
    print_success "Go and tools installed via mise"
  else
    print_error "Failed to install Go via mise"
    return 1
  fi

  # Verify Go is available
  if ! command_exists go; then
    print_warning "go command not immediately available (may need shell reload)"
    # Try to add mise shims to PATH
    export PATH="$HOME/.local/share/mise/shims:$PATH"
  fi

  if command_exists go; then
    print_success "Go $(go version 2>&1 | awk '{print $3}' | sed 's/go//') installed"
  else
    print_warning "Go installation completed but command not found in current session"
    print_status "Run: source ~/.bashrc to activate"
  fi

  return 0
}

# ============================================================================
# CONFIGURE
# ============================================================================

configure() {
  print_status "Configuring Go environment..."

  # mise manages PATH automatically via activation
  # No manual PATH configuration needed

  # Activate mise for current session
  if command_exists mise; then
    eval "$(mise activate bash)" 2>/dev/null || true
    export PATH="$HOME/.local/share/mise/shims:$PATH"
  fi

  # Set GOPATH for current session (mise sets this via env in golang.toml)
  export GOPATH=$HOME/go
  mkdir -p "$GOPATH"

  # Create Go project template script
  print_status "Creating Go project template..."
  cat > /workspace/scripts/create-go-project.sh << 'EOF'
#!/bin/bash
# Create a new Go project with module initialization

project_name="$1"
if [[ -z "$project_name" ]]; then
    echo "Usage: $0 <project-name>"
    exit 1
fi

mkdir -p "/workspace/projects/active/$project_name"
cd "/workspace/projects/active/$project_name"

go mod init "github.com/user/$project_name"

mkdir -p cmd pkg internal

cat > cmd/main.go << 'MAIN'
package main

import "fmt"

func main() {
    fmt.Println("Hello, World!")
}
MAIN

cat > Makefile << 'MAKEFILE'
.PHONY: build run test clean

build:
	go build -o bin/$(shell basename $(CURDIR)) ./cmd

run:
	go run ./cmd

test:
	go test -v ./...

clean:
	rm -rf bin/

lint:
	golangci-lint run

fmt:
	go fmt ./...
	goimports -w .
MAKEFILE

cat > README.md << README
# $project_name

## Build
\`\`\`bash
make build
\`\`\`

## Run
\`\`\`bash
make run
\`\`\`

## Test
\`\`\`bash
make test
\`\`\`

## Development
\`\`\`bash
# Hot reload with air
air
\`\`\`
README

cat > .air.toml << 'AIR'
root = "."
testdata_dir = "testdata"
tmp_dir = "tmp"

[build]
  bin = "./tmp/main"
  cmd = "go build -o ./tmp/main ./cmd"
  delay = 1000
  exclude_dir = ["assets", "tmp", "vendor", "testdata"]
  exclude_file = []
  exclude_regex = ["_test.go"]
  exclude_unchanged = false
  follow_symlink = false
  full_bin = ""
  include_dir = []
  include_ext = ["go", "tpl", "tmpl", "html"]
  kill_delay = "0s"
  log = "build-errors.log"
  send_interrupt = false
  stop_on_error = true

[color]
  app = ""
  build = "yellow"
  main = "magenta"
  runner = "green"
  watcher = "cyan"
AIR

echo "Go project '$project_name' created successfully!"
echo "To run: cd /workspace/projects/active/$project_name && make run"
EOF

  chmod +x /workspace/scripts/create-go-project.sh
  print_success "Project template created"

  # Add Git aliases
  if command_exists git; then
    git config --global alias.gotest '!go test ./...'
    git config --global alias.gofmt '!go fmt ./... && goimports -w .'
    print_debug "Git aliases configured"
  fi

  print_success "Go configured"
  return 0
}

# ============================================================================
# VALIDATE
# ============================================================================

validate() {
  print_status "Validating Go installation..."

  local all_valid=true

  # Activate mise for current session
  if command_exists mise; then
    eval "$(mise activate bash)" 2>/dev/null || true
    export PATH="$HOME/.local/share/mise/shims:$PATH"
  fi

  # Check mise has Go installed
  if ! mise ls go 2>/dev/null | grep -q "1.24"; then
    print_error "Go 1.24 not found in mise"
    all_valid=false
  else
    print_success "mise: Go 1.24 installed"
  fi

  # Check go command
  if ! command_exists go; then
    print_error "go command not found"
    all_valid=false
  else
    print_success "Go: $(go version)"
  fi

  # Check GOPATH
  if [[ -n "$GOPATH" ]]; then
    print_success "GOPATH: $GOPATH"
  else
    print_warning "GOPATH not set"
  fi

  # Check development tools (skip in CI mode)
  if [[ "$CI_MODE" != "true" ]]; then
    local tools=(gopls dlv goimports golangci-lint air goreleaser)
    local tools_found=0
    for tool in "${tools[@]}"; do
      if command_exists "$tool"; then
        ((tools_found++))
        print_debug "✓ $tool"
      elif mise ls "go:*${tool}*" 2>/dev/null | grep -q "$tool"; then
        ((tools_found++))
        print_debug "✓ $tool (mise-managed)"
      fi
    done
    print_status "Development tools: $tools_found/${#tools[@]}"
  else
    print_status "CI mode - skipping development tools check"
  fi

  # Check project template
  [[ -f "/workspace/scripts/create-go-project.sh" ]] && print_success "Project template: installed"

  if [[ "$all_valid" == "true" ]]; then
    print_success "Validation passed"
    return 0
  else
    print_error "Validation failed"
    return 1
  fi
}

# ============================================================================
# STATUS
# ============================================================================

status() {
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo "Extension: $EXT_NAME v$EXT_VERSION"
  echo "Description: $EXT_DESCRIPTION"
  echo "Category: $EXT_CATEGORY"
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo ""

  # Activate mise for current session
  if command_exists mise; then
    eval "$(mise activate bash)" 2>/dev/null || true
    export PATH="$HOME/.local/share/mise/shims:$PATH"
  fi

  # Check installation status
  if ! command_exists go; then
    echo "Status: ✗ NOT INSTALLED"
    return 1
  fi

  echo "Status: ✓ INSTALLED (mise-powered)"
  echo ""

  # Show mise-managed Go version
  print_status "Installed tools (via mise):"
  if command_exists go; then
    local go_version=$(go version 2>&1 | awk '{print $3}' | sed 's/go//')
    echo "  ✓ Go $go_version"
  fi

  # Show mise-managed Go tools
  if mise ls go 2>/dev/null | grep -q "1.24"; then
    echo "  ✓ Go 1.24 (mise-managed)"
  fi

  if [[ -n "$GOPATH" ]]; then
    echo "  ✓ GOPATH: $GOPATH"
  else
    echo "  ⚠ GOPATH not set"
  fi

  # Show development tools (skip in CI mode)
  if [[ "$CI_MODE" != "true" ]]; then
    echo ""
    print_status "Development tools (via mise go backend):"
    local tools=(gopls dlv goimports golangci-lint air goreleaser)
    for tool in "${tools[@]}"; do
      if command_exists "$tool"; then
        echo "  ✓ $tool"
      elif mise ls "go:*${tool}*" 2>/dev/null | grep -q "$tool"; then
        echo "  ✓ $tool (mise-managed)"
      fi
    done
  fi

  [[ -f "/workspace/scripts/create-go-project.sh" ]] && echo "" && print_status "Project template: installed"

  return 0
}

# ============================================================================
# HELPER FUNCTIONS
# ============================================================================

check_dependent_extensions() {
  local provided_commands=("$@")
  local dependent_extensions=()
  local manifest_file="$SCRIPT_DIR/active-extensions.conf"
  [[ ! -f "$manifest_file" ]] && manifest_file="/workspace/scripts/extensions.d/active-extensions.conf"
  [[ ! -f "$manifest_file" ]] && return 0

  while IFS= read -r line; do
    [[ "$line" =~ ^[[:space:]]*# ]] && continue
    [[ -z "${line// }" ]] && continue
    local ext_name=$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
    [[ "$ext_name" == "$EXT_NAME" ]] && continue
    local ext_file="$SCRIPT_DIR/${ext_name}.sh"
    if [[ ! -f "$ext_file" ]]; then
      local matches=("$SCRIPT_DIR/"*"-${ext_name}.sh")
      ext_file="${matches[0]}"
    fi
    [[ ! -f "$ext_file" ]] && continue
    for cmd in "${provided_commands[@]}"; do
      if grep -q "$cmd" "$ext_file" 2>/dev/null; then
        dependent_extensions+=("$ext_name")
        break
      fi
    done
  done < "$manifest_file"

  printf '%s\n' "${dependent_extensions[@]}"
}

# ============================================================================
# REMOVE
# ============================================================================

remove() {
  print_warning "Uninstalling Go..."

  local dependent_exts=()
  mapfile -t dependent_exts < <(check_dependent_extensions "go" "gofmt" "gopls")
  if [[ ${#dependent_exts[@]} -gt 0 ]]; then
    print_warning "The following extensions depend on Go and may stop working:"
    for ext in "${dependent_exts[@]}"; do
      echo "  - $ext"
    done
    echo ""
  fi

  if ! prompt_confirmation "Continue with Go removal?"; then
    print_status "Removal cancelled"
    return 1
  fi

  # Remove mise golang config
  local mise_config="${HOME}/.config/mise/conf.d/golang.toml"
  if [[ -f "$mise_config" ]]; then
    print_status "Removing mise Go configuration..."
    rm -f "$mise_config"
    print_success "mise Go config removed"
  fi

  # Uninstall Go and tools via mise
  if command_exists mise; then
    print_status "Uninstalling Go via mise..."
    mise uninstall go 2>/dev/null || true

    # Uninstall go tools if in non-CI mode
    if [[ "$CI_MODE" != "true" ]]; then
      local tools=(gopls dlv goimports golangci-lint air goreleaser)
      for tool in "${tools[@]}"; do
        mise uninstall "go:*${tool}*" 2>/dev/null || true
      done
    fi
    print_success "Go uninstalled via mise"
  fi

  # Remove GOPATH
  if [[ -d "$HOME/go" ]]; then
    read -p "Remove $HOME/go directory? (y/N): " -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      rm -rf "$HOME/go"
      print_success "GOPATH directory removed"
    fi
  fi

  # Cleanup
  rm -f "/workspace/scripts/create-go-project.sh"
  command_exists git && git config --global --unset-all alias.gotest 2>/dev/null
  command_exists git && git config --global --unset-all alias.gofmt 2>/dev/null

  print_success "Go uninstalled"
  print_warning "Reload shell: source ~/.bashrc"
  return 0
}

# ============================================================================
# MAIN EXECUTION
# ============================================================================

extension_main "$@"
