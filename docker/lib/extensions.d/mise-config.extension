#!/bin/bash
# mise-config.extension - Install and configure mise for unified tool management
# Extension API v1.0
# Description: Installs mise (https://mise.jdx.dev) for managing development tool versions

# Source shared extension library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$(dirname "$SCRIPT_DIR")/extensions-common.sh"

# ============================================================================
# METADATA
# ============================================================================

EXT_NAME="mise-config"
EXT_VERSION="2.0.0"
EXT_DESCRIPTION="mise unified tool version manager"
EXT_CATEGORY="core"
EXT_INSTALL_METHOD="binary"
EXT_UPGRADE_STRATEGY="automatic"

# Initialize extension environment
extension_init

# ============================================================================
# PREREQUISITES
# ============================================================================

prerequisites() {
    print_status "Checking prerequisites for mise..."

    # Check for curl
    if ! command_exists curl; then
        print_error "curl is required but not installed"
        return 1
    fi

    # Check for bash (mise requires bash 4.0+)
    if [[ -z "$BASH_VERSION" ]]; then
        print_error "Bash is required"
        return 1
    fi

    print_success "All prerequisites met"
    return 0
}

# ============================================================================
# INSTALLATION
# ============================================================================

install() {
    print_status "Installing mise..."

    # Check if already installed
    if command_exists mise; then
        local current_version
        current_version=$(mise --version 2>/dev/null | head -n1)
        print_warning "mise is already installed: $current_version"
        print_status "Proceeding with configuration..."
        return 0
    fi

    # Install mise using official installer
    print_status "Downloading and installing mise..."
    if curl https://mise.run | sh; then
        print_success "mise installed successfully"
    else
        print_error "Failed to install mise"
        return 1
    fi

    # Add mise to PATH for current session
    export PATH="$HOME/.local/bin:$PATH"

    # Verify installation
    if command_exists mise; then
        local version
        version=$(mise --version 2>/dev/null | head -n1)
        print_success "mise version: $version"
    else
        print_error "mise installation verification failed"
        return 1
    fi

    return 0
}

# ============================================================================
# CONFIGURATION
# ============================================================================

configure() {
    print_status "Configuring mise..."

    # Ensure mise binary location is in PATH
    local mise_bin="$HOME/.local/bin"
    if [[ ! -d "$mise_bin" ]]; then
        mkdir -p "$mise_bin"
    fi

    # Add mise activation to shell rc files
    local bashrc="$HOME/.bashrc"
    local bash_profile="$HOME/.bash_profile"

    # Add to .bashrc if not already present
    if [[ -f "$bashrc" ]]; then
        if ! grep -q 'mise activate bash' "$bashrc"; then
            print_status "Adding mise activation to .bashrc..."
            cat "$(dirname "${BASH_SOURCE[0]}")/mise-config.bashrc-activation.template" >> "$bashrc"
            print_success "mise activation added to .bashrc"
        else
            print_status "mise already configured in .bashrc"
        fi
    fi

    # Add to .bash_profile if it exists and doesn't source .bashrc
    if [[ -f "$bash_profile" ]] && ! grep -q 'source.*bashrc' "$bash_profile"; then
        if ! grep -q 'mise activate bash' "$bash_profile"; then
            print_status "Adding mise activation to .bash_profile..."
            cat "$(dirname "${BASH_SOURCE[0]}")/mise-config.bash-profile-activation.template" >> "$bash_profile"
            print_success "mise activation added to .bash_profile"
        fi
    fi

    # Add mise activation to SSH environment for non-interactive sessions
    # This is critical for CI/CD and remote command execution
    local profile_d_mise="/etc/profile.d/01-mise-activation.sh"
    if [[ ! -f "$profile_d_mise" ]]; then
        print_status "Adding mise activation to profile.d for SSH sessions..."
        # shellcheck disable=SC2002  # cat needed here: source readable by user, target needs sudo
        cat "$(dirname "${BASH_SOURCE[0]}")/mise-config.profile-d.template" | sudo tee "$profile_d_mise" > /dev/null
        sudo chmod +x "$profile_d_mise"
        print_success "mise activation added to $profile_d_mise"
    else
        print_status "mise already configured in profile.d"
    fi

    # Create mise config directory
    local mise_config_dir="$HOME/.config/mise"
    if [[ ! -d "$mise_config_dir" ]]; then
        mkdir -p "$mise_config_dir/conf.d"
        print_success "Created mise config directory: $mise_config_dir"
    fi

    # Create global mise config
    local global_config="$mise_config_dir/config.toml"
    if [[ ! -f "$global_config" ]]; then
        print_status "Creating global mise configuration..."
        cat "$(dirname "${BASH_SOURCE[0]}")/mise-config.global-config.template" > "$global_config"
        print_success "Created global mise config"
    else
        print_status "Global mise config already exists"
    fi

    # Activate mise for current session
    if command_exists mise; then
        eval "$(mise activate bash)"
        print_success "mise activated for current session"
    fi

    return 0
}

# ============================================================================
# VALIDATION
# ============================================================================

validate() {
    print_status "Validating mise installation..."

    # Check if mise command exists
    if ! command_exists mise; then
        print_error "mise command not found"
        return 1
    fi

    # Check mise version
    local version
    version=$(mise --version 2>/dev/null | head -n1)
    if [[ -z "$version" ]]; then
        print_error "Could not determine mise version"
        return 1
    fi
    print_success "mise version: $version"

    # Check mise config directory
    if [[ ! -d "$HOME/.config/mise" ]]; then
        print_error "mise config directory not found"
        return 1
    fi
    print_success "Config directory exists: $HOME/.config/mise"

    # Check if mise can list tools (even if empty)
    if mise ls >/dev/null 2>&1; then
        print_success "mise ls command works"
    else
        print_warning "mise ls command failed (might be empty - this is OK)"
    fi

    # Check shell activation
    if grep -q 'mise activate bash' "$HOME/.bashrc" 2>/dev/null; then
        print_success "Shell activation configured in .bashrc"
    else
        print_warning "Shell activation not found in .bashrc"
    fi

    # Check profile.d activation for SSH sessions
    if [[ -f "/etc/profile.d/01-mise-activation.sh" ]]; then
        print_success "SSH environment activation configured in profile.d"
    else
        print_warning "SSH environment activation not found in profile.d"
    fi

    return 0
}

# ============================================================================
# STATUS
# ============================================================================

status() {
    print_extension_header

    # Check installation status
    if ! command_exists mise; then
        echo "Status: ✗ NOT INSTALLED"
        return 1
    fi

    echo "Status: ✓ INSTALLED"
    echo ""

    # Show mise version
    local version
    version=$(mise --version 2>/dev/null | head -n1)
    print_status "Version:"
    echo "  • $version"
    echo ""

    # Show configuration
    print_status "Configuration:"
    echo "  • Config directory: $HOME/.config/mise"
    echo "  • Global config: $HOME/.config/mise/config.toml"
    echo "  • Per-tool configs: $HOME/.config/mise/conf.d/"
    echo ""

    # Show installed tools (if any)
    print_status "Managed Tools:"
    if command_exists mise; then
        local tools_output
        tools_output=$(mise ls 2>/dev/null)
        if [[ -n "$tools_output" ]]; then
            echo "$tools_output" | sed 's/^/  • /'
        else
            echo "  (none installed yet)"
        fi
    fi
    echo ""

    # Show activation status
    print_status "Shell Activation:"
    if grep -q 'mise activate bash' "$HOME/.bashrc" 2>/dev/null; then
        echo "  • .bashrc: ✓ configured"
    else
        echo "  • .bashrc: ✗ not configured"
    fi

    return 0
}

# ============================================================================
# REMOVAL
# ============================================================================

remove() {
    print_warning "Removing mise configuration..."

    # Remove shell activation from .bashrc
    local bashrc="$HOME/.bashrc"
    if [[ -f "$bashrc" ]]; then
        if grep -q 'mise activate bash' "$bashrc"; then
            print_status "Removing mise activation from .bashrc..."
            sed -i.bak '/# mise - unified tool version manager/,/fi$/d' "$bashrc"
            print_success "Removed mise activation from .bashrc"
        fi
    fi

    # Remove shell activation from .bash_profile
    local bash_profile="$HOME/.bash_profile"
    if [[ -f "$bash_profile" ]]; then
        if grep -q 'mise activate bash' "$bash_profile"; then
            print_status "Removing mise activation from .bash_profile..."
            sed -i.bak '/# mise - unified tool version manager/,/fi$/d' "$bash_profile"
            print_success "Removed mise activation from .bash_profile"
        fi
    fi

    # Remove profile.d activation for SSH sessions
    local profile_d_mise="/etc/profile.d/01-mise-activation.sh"
    if [[ -f "$profile_d_mise" ]]; then
        print_status "Removing mise activation from profile.d..."
        sudo rm -f "$profile_d_mise"
        print_success "Removed mise activation from profile.d"
    fi

    # Ask user if they want to remove mise binary and config
    print_warning "This will NOT remove the mise binary or installed tools."
    print_status "To completely remove mise:"
    echo "  • Remove binary: rm -rf ~/.local/bin/mise"
    echo "  • Remove config: rm -rf ~/.config/mise"
    echo "  • Remove cache: rm -rf ~/.cache/mise"
    echo "  • Remove data: rm -rf ~/.local/share/mise"

    print_success "mise configuration removed from shell"
    return 0
}

# ============================================================================
# UPGRADE - Extension API v2.0
# ============================================================================

upgrade() {
    print_status "Upgrading mise binary..."

    if ! command_exists mise; then
        print_error "mise is not installed"
        return 1
    fi

    # Get current version
    local current_version
    current_version=$(mise --version 2>/dev/null | awk '{print $2}')
    print_status "Current version: ${current_version}"

    # Upgrade mise using GitHub binary helper
    if upgrade_github_binary "jdx/mise" "mise" "$(which mise)" "-V"; then
        local new_version
        new_version=$(mise --version 2>/dev/null | awk '{print $2}')
        print_success "mise upgraded: ${current_version} → ${new_version}"
        return 0
    else
        print_error "Failed to upgrade mise"
        return 1
    fi
}

# ============================================================================
# UTILITY FUNCTIONS
# ============================================================================

# Helper to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}
