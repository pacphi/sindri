#!/bin/bash
# nodejs-devtools.sh.example - Node.js development tools
# Extension API v1.0
#
# This extension installs TypeScript, ESLint, Prettier, and other Node.js development tools.
# Requires the nodejs extension to be installed first.

# Source shared extension library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$(dirname "$SCRIPT_DIR")/extensions-common.sh"

# ============================================================================
# METADATA
# ============================================================================

EXT_NAME="nodejs-devtools"
EXT_VERSION="1.0.0"
EXT_DESCRIPTION="TypeScript, ESLint, Prettier, and Node.js development tools"
EXT_CATEGORY="utility"

# Initialize extension environment
extension_init

# ============================================================================
# PREREQUISITES
# ============================================================================

prerequisites() {
  print_status "Checking prerequisites for ${EXT_NAME}..."

  # Hard requirement: npm must be available
  if ! command_exists npm; then
    print_error "npm is required but not found"
    print_status "Install the nodejs extension first"
    return 1
  fi

  # Check npm can install global packages
  local npm_prefix=$(npm config get prefix 2>/dev/null)
  if [[ -z "$npm_prefix" ]]; then
    print_error "npm global prefix not configured"
    return 1
  fi

  print_success "All prerequisites met"
  return 0
}

# ============================================================================
# INSTALL
# ============================================================================

install() {
  print_status "Installing Node.js development tools..."

  # Load NVM if available
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

  local npm_packages=(
    "typescript"
    "ts-node"
    "nodemon"
    "prettier"
    "eslint"
    "@typescript-eslint/parser"
    "@typescript-eslint/eslint-plugin"
    "goalie"
  )

  local installed_count=0
  local failed_packages=()

  for package in "${npm_packages[@]}"; do
    print_debug "Installing $package..."
    if npm install -g "$package" 2>/dev/null; then
      ((installed_count++))
      print_success "Installed $package"
    else
      failed_packages+=("$package")
      print_warning "Failed to install $package"
    fi
  done

  print_status "Installed $installed_count/${#npm_packages[@]} packages"

  if [[ ${#failed_packages[@]} -gt 0 ]]; then
    print_warning "Failed packages: ${failed_packages[*]}"
  fi

  [[ $installed_count -gt 0 ]] && return 0 || return 1
}

# ============================================================================
# CONFIGURE
# ============================================================================

configure() {
  print_status "Configuring development tools..."

  # Load NVM if available
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

  # Create default config templates
  local templates_dir="/workspace/templates"
  mkdir -p "$templates_dir"

  # Prettier config
  if [[ ! -f "$templates_dir/.prettierrc" ]]; then
    cat > "$templates_dir/.prettierrc" << 'EOF'
{
  "semi": true,
  "singleQuote": true,
  "tabWidth": 2,
  "trailingComma": "es5",
  "printWidth": 100
}
EOF
    print_success "Created Prettier config template"
  fi

  # ESLint config
  if [[ ! -f "$templates_dir/.eslintrc.json" ]]; then
    cat > "$templates_dir/.eslintrc.json" << 'EOF'
{
  "extends": ["eslint:recommended"],
  "env": {
    "node": true,
    "es2021": true
  },
  "parserOptions": {
    "ecmaVersion": 2021,
    "sourceType": "module"
  }
}
EOF
    print_success "Created ESLint config template"
  fi

  # TypeScript config template
  if [[ ! -f "$templates_dir/tsconfig.json" ]]; then
    cat > "$templates_dir/tsconfig.json" << 'EOF'
{
  "compilerOptions": {
    "target": "ES2021",
    "module": "commonjs",
    "lib": ["ES2021"],
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist"]
}
EOF
    print_success "Created TypeScript config template"
  fi

  # Create SSH wrappers for tools
  if command_exists create_tool_wrapper 2>/dev/null; then
    for tool in tsc ts-node nodemon prettier eslint goalie; do
      if command_exists "$tool"; then
        create_tool_wrapper "$tool" "$(which $tool)"
      fi
    done
  fi

  print_success "Development tools configured"
  return 0
}

# ============================================================================
# VALIDATE
# ============================================================================

validate() {
  print_status "Validating Node.js development tools..."

  # Load NVM if available
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

  local all_valid=true

  # Check each tool
  local tools=(
    "tsc:TypeScript compiler"
    "ts-node:TypeScript execution"
    "nodemon:Auto-reload utility"
    "prettier:Code formatter"
    "eslint:Linter"
    "goalie:AI research assistant"
  )

  for tool_spec in "${tools[@]}"; do
    IFS=':' read -r cmd name <<< "$tool_spec"
    if command_exists "$cmd"; then
      local version=$($cmd --version 2>/dev/null | head -n1 || echo "installed")
      print_success "$name: $version"
    else
      print_warning "$name: Not installed"
      all_valid=false
    fi
  done

  # Test TypeScript compilation
  if command_exists tsc; then
    local test_ts=$(mktemp --suffix=.ts)
    echo "const x: number = 42; console.log(x);" > "$test_ts"
    if tsc --noEmit "$test_ts" 2>/dev/null; then
      print_success "TypeScript compilation test passed"
    else
      print_warning "TypeScript compilation test failed"
    fi
    rm -f "$test_ts"
  fi

  # Test Prettier formatting
  if command_exists prettier; then
    local test_js=$(mktemp --suffix=.js)
    echo "const x=1;const y=2;" > "$test_js"
    if prettier --write "$test_js" >/dev/null 2>&1; then
      print_success "Prettier formatting test passed"
    else
      print_warning "Prettier formatting test failed"
    fi
    rm -f "$test_js"
  fi

  if [[ "$all_valid" == "true" ]]; then
    print_success "Validation passed"
    return 0
  else
    print_warning "Some tools are missing"
    return 1
  fi
}

# ============================================================================
# STATUS
# ============================================================================

status() {
  print_status "Checking Node.js development tools status..."

  # Load NVM if available
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

  local installed_tools=()
  local missing_tools=()

  # Check each tool
  local tools=(
    "typescript:tsc"
    "ts-node:ts-node"
    "nodemon:nodemon"
    "prettier:prettier"
    "eslint:eslint"
    "goalie:goalie"
  )

  for tool_spec in "${tools[@]}"; do
    IFS=':' read -r name cmd <<< "$tool_spec"
    if command_exists "$cmd"; then
      local version=$($cmd --version 2>/dev/null | head -n1 || echo "installed")
      print_success "$name: $version"
      installed_tools+=("$name")
    else
      print_warning "$name: Not installed"
      missing_tools+=("$name")
    fi
  done

  echo ""
  print_status "Summary: ${#installed_tools[@]} installed, ${#missing_tools[@]} missing"

  # Show template locations
  if [[ -d "/workspace/templates" ]]; then
    print_status "Config templates available at: /workspace/templates"
  fi

  return 0
}

# ============================================================================
# REMOVE
# ============================================================================

remove() {
  print_warning "Uninstalling Node.js development tools..."

  # Load NVM if available
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

  local npm_packages=(
    "typescript"
    "ts-node"
    "nodemon"
    "prettier"
    "eslint"
    "@typescript-eslint/parser"
    "@typescript-eslint/eslint-plugin"
    "goalie"
  )

  # Uninstall npm packages
  if command_exists npm; then
    print_status "Uninstalling npm packages..."
    for package in "${npm_packages[@]}"; do
      npm uninstall -g "$package" 2>/dev/null && print_success "Uninstalled $package"
    done
  fi

  # Optionally remove template configs
  echo ""
  read -p "Remove config templates from /workspace/templates? (y/N): " -r
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    rm -f /workspace/templates/.prettierrc
    rm -f /workspace/templates/.eslintrc.json
    rm -f /workspace/templates/tsconfig.json
    print_success "Config templates removed"
  else
    print_status "Config templates preserved"
  fi

  # Remove SSH wrappers
  if command_exists create_tool_wrapper 2>/dev/null; then
    for tool in tsc ts-node nodemon prettier eslint goalie; do
      # Wrapper removal would be handled by ssh-environment extension
      print_debug "Note: SSH wrappers for $tool should be cleaned up"
    done
  fi

  print_success "Node.js development tools uninstalled"
  return 0
}

# ============================================================================
# MAIN EXECUTION
# ============================================================================

extension_main "$@"
