#!/bin/bash
# php.sh.example - PHP and Symfony development environment
# Extension API v1.0
#
# This extension installs PHP with:
# - PHP 8.3 with essential extensions
# - Composer package manager
# - Symfony CLI
# - Development tools (phpstan, psalm, phpunit, php-cs-fixer)
# - Framework aliases (Symfony, Laravel)

# Source shared extension library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$(dirname "$SCRIPT_DIR")/extensions-common.sh"

# ============================================================================
# METADATA
# ============================================================================

EXT_NAME="php"
EXT_VERSION="1.0.0"
EXT_DESCRIPTION="PHP 8.3 with Composer, Symfony CLI, and dev tools"
EXT_CATEGORY="language"

# Initialize extension environment
extension_init

# ============================================================================
# PREREQUISITES
# ============================================================================

prerequisites() {
  print_status "Checking prerequisites for ${EXT_NAME}..."

  # Check for apt-get
  if ! command_exists apt-get; then
    print_error "apt-get is required but not found"
    print_status "This extension requires a Debian/Ubuntu based system"
    return 1
  fi

  # Check for required tools
  local missing_tools=()
  for tool in wget sudo; do
    if ! command_exists "$tool"; then
      missing_tools+=("$tool")
    fi
  done

  if [[ ${#missing_tools[@]} -gt 0 ]]; then
    print_error "Missing required tools: ${missing_tools[*]}"
    print_status "Install with: sudo apt-get install ${missing_tools[*]}"
    return 1
  fi

  # Check disk space (PHP needs ~800MB)
  local available_space
  available_space=$(df -BM / | awk 'NR==2 {print $4}' | sed 's/M//')
  if [[ $available_space -lt 1000 ]]; then
    print_warning "Low disk space: ${available_space}MB available (1GB recommended for PHP)"
  fi

  print_success "All prerequisites met"
  return 0
}

# ============================================================================
# INSTALL
# ============================================================================

install() {
  print_status "Installing PHP and Symfony development environment..."

  # Add PHP repository if not already added
  if ! grep -q "ondrej/php" /etc/apt/sources.list.d/*.list 2>/dev/null; then
    print_status "Adding PHP repository..."
    sudo add-apt-repository -y ppa:ondrej/php 2>/dev/null
  fi

  sudo apt-get update -qq

  # Install PHP and essential extensions
  print_status "Installing PHP 8.3 and extensions..."
  local php_packages=(
    php8.3 php8.3-cli php8.3-common php8.3-curl php8.3-mbstring
    php8.3-mysql php8.3-pgsql php8.3-sqlite3 php8.3-xml php8.3-zip
    php8.3-bcmath php8.3-gd php8.3-intl php8.3-opcache php8.3-readline
    php8.3-soap php8.3-xdebug php8.3-redis php8.3-amqp
    php8.3-mongodb php8.3-imagick
  )

  local installed_count=0
  local failed_packages=()
  for package in "${php_packages[@]}"; do
    print_debug "Installing $package..."
    if sudo apt-get install -y "$package" 2>/dev/null; then
      ((installed_count++))
    else
      failed_packages+=("$package")
    fi
  done

  print_status "Installed $installed_count/${#php_packages[@]} PHP packages"

  # Check if core PHP package failed (php8.3 and php8.3-cli are critical)
  if [[ " ${failed_packages[*]} " =~ \ php8.3\  ]] || [[ " ${failed_packages[*]} " =~ \ php8.3-cli\  ]]; then
    print_error "Failed to install core PHP packages: ${failed_packages[*]}"
    return 1
  fi

  # Warn about failed optional extensions
  if [[ ${#failed_packages[@]} -gt 0 ]]; then
    print_warning "Some optional PHP extensions failed to install: ${failed_packages[*]}"
  fi

  # Install Composer
  if command_exists composer; then
    # Use a more reliable version check with shorter timeout and proper error handling
    local composer_version
    if composer_version=$(timeout 5 composer --version 2>&1 | head -n1); then
      print_warning "Composer already installed: ${composer_version}"
    else
      print_warning "Composer already installed (version check failed or timed out)"
    fi
  else
    print_status "Installing Composer..."

    # Download signature with timeout
    local EXPECTED_CHECKSUM
    EXPECTED_CHECKSUM=$(timeout 30 php -r 'copy("https://composer.github.io/installer.sig", "php://stdout");' 2>/dev/null)

    if [[ -z "$EXPECTED_CHECKSUM" ]]; then
      print_error "Failed to fetch Composer installer signature (timeout or network error)"
      return 1
    fi

    # Download installer with timeout using curl (more reliable than php copy)
    if ! curl --max-time 60 -fsSL https://getcomposer.org/installer -o composer-setup.php; then
      print_error "Failed to download Composer installer"
      return 1
    fi

    local ACTUAL_CHECKSUM="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"

    if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]; then
      print_error "Composer installer checksum verification failed"
      rm -f composer-setup.php
      return 1
    else
      if sudo php composer-setup.php --quiet --install-dir=/usr/local/bin --filename=composer; then
        rm -f composer-setup.php
        print_success "Composer installed: $(composer --version 2>&1 | head -n1)"
      else
        rm -f composer-setup.php
        print_error "Failed to install Composer"
        return 1
      fi
    fi
  fi

  # Install Symfony CLI
  if command_exists symfony; then
    local symfony_ver
    if symfony_ver=$(timeout 3 symfony version 2>&1 | head -n1); then
      print_warning "Symfony CLI already installed: ${symfony_ver}"
    else
      print_warning "Symfony CLI already installed (version check failed or timed out)"
    fi
  else
    print_status "Installing Symfony CLI..."
    # Download and install with timeout (120s should be enough for download + install)
    if timeout 120 bash -c 'wget https://get.symfony.com/cli/installer -O - | bash' 2>/dev/null; then
      sudo mv $HOME/.symfony*/bin/symfony /usr/local/bin/symfony 2>/dev/null
      local symfony_install_ver
      if symfony_install_ver=$(timeout 3 symfony version 2>&1 | head -n1); then
        print_success "Symfony CLI installed: ${symfony_install_ver}"
      else
        print_success "Symfony CLI installed"
      fi
    else
      print_warning "Failed to install Symfony CLI (download timeout or installation failed)"
    fi
  fi

  # Install global PHP development tools via Composer
  print_status "Installing PHP development tools..."
  mkdir -p ~/.composer

  local php_tools=(
    "friendsofphp/php-cs-fixer"
    "phpstan/phpstan"
    "vimeo/psalm"
    "phpunit/phpunit"
    "squizlabs/php_codesniffer"
    "phpmd/phpmd"
    "sebastian/phpcpd"
    "psy/psysh"
  )

  local installed_tools=0
  local skipped_tools=0
  for tool in "${php_tools[@]}"; do
    # Extract binary name from package name (e.g., "friendsofphp/php-cs-fixer" -> "php-cs-fixer")
    local tool_binary
    tool_binary=$(echo "$tool" | sed 's/.*\///')

    # Check if package is already in composer global manifest
    local already_required=false
    for composer_dir in "$HOME/.composer" "$HOME/.config/composer"; do
      if [[ -f "$composer_dir/composer.json" ]]; then
        # Check if package is in the composer.json require section (with timeout)
        if timeout 2 grep -q "\"$tool\"" "$composer_dir/composer.json" 2>/dev/null; then
          already_required=true
          break
        fi
      fi
    done

    # Check if tool is already installed (binary exists or in manifest)
    if $already_required || \
       command_exists "$tool_binary" || \
       [[ -f "$HOME/.composer/vendor/bin/$tool_binary" ]] || \
       [[ -f "$HOME/.config/composer/vendor/bin/$tool_binary" ]]; then
      print_debug "✓ $tool already installed, skipping"
      ((skipped_tools++))
    else
      print_debug "Installing $tool..."
      # Add timeout to composer global require to prevent hanging
      if timeout 300 composer global require "$tool" 2>/dev/null; then
        print_debug "✓ $tool installed"
        ((installed_tools++))
      else
        print_debug "⚠ $tool installation failed or timed out"
      fi
    fi
  done

  if [[ $installed_tools -gt 0 ]]; then
    print_status "Installed $installed_tools new PHP development tools"
  fi
  if [[ $skipped_tools -gt 0 ]]; then
    print_debug "Skipped $skipped_tools already installed tools"
  fi

  return 0
}

# ============================================================================
# CONFIGURE
# ============================================================================

configure() {
  print_status "Configuring PHP environment..."

  # Add Composer global bin to PATH
  if ! grep -q ".composer/vendor/bin" "$HOME/.bashrc" 2>/dev/null; then
    echo '' >> "$HOME/.bashrc"
    echo '# Composer global bin' >> "$HOME/.bashrc"
    echo 'export PATH="$HOME/.composer/vendor/bin:$PATH"' >> "$HOME/.bashrc"
    echo 'export PATH="$HOME/.config/composer/vendor/bin:$PATH"' >> "$HOME/.bashrc"
    print_success "Added Composer bin to PATH"
  fi

  # Configure PHP for development
  print_status "Configuring PHP for development..."
  cat > /tmp/development.ini << 'EOF'
; Development settings
display_errors = On
display_startup_errors = On
error_reporting = E_ALL
log_errors = On
max_execution_time = 300
memory_limit = 512M
post_max_size = 100M
upload_max_filesize = 100M

; Xdebug settings
xdebug.mode = develop,debug,coverage
xdebug.start_with_request = yes
xdebug.client_host = localhost
xdebug.client_port = 9003
xdebug.idekey = VSCODE

; OPcache settings for development
opcache.enable = 1
opcache.enable_cli = 1
opcache.validate_timestamps = 1
opcache.revalidate_freq = 0
EOF

  sudo mv /tmp/development.ini /etc/php/8.3/mods-available/development.ini
  sudo phpenmod development 2>/dev/null

  # Create PHP/Symfony/Laravel aliases
  if ! grep -q "# PHP aliases" "$HOME/.bashrc" 2>/dev/null; then
    print_status "Creating PHP and framework aliases..."
    cat >> "$HOME/.bashrc" << 'EOF'

# PHP aliases
alias php="php -d memory_limit=-1"
alias phpunit="vendor/bin/phpunit"
alias phpstan="vendor/bin/phpstan"
alias psalm="vendor/bin/psalm"
alias phpcbf="vendor/bin/phpcbf"
alias phpcs="vendor/bin/phpcs"
alias php-cs-fixer="vendor/bin/php-cs-fixer"

# Composer aliases
alias c="composer"
alias ci="composer install"
alias cu="composer update"
alias cr="composer require"
alias crd="composer require --dev"
alias cda="composer dump-autoload"
alias co="composer outdated"
alias cg="composer global"

# Symfony aliases
alias sf="php bin/console"
alias sfc="php bin/console cache:clear"
alias sfcc="php bin/console cache:clear && php bin/console cache:warmup"
alias sfmm="php bin/console make:migration"
alias sfdm="php bin/console doctrine:migrations:migrate"
alias sfdd="php bin/console doctrine:database:drop --force"
alias sfdc="php bin/console doctrine:database:create"
alias sfds="php bin/console doctrine:schema:update --force"
alias sfs="symfony server:start"
alias sfsd="symfony server:start -d"
alias sfss="symfony server:stop"
alias sfsl="symfony server:log"

# Laravel aliases
alias art="php artisan"
alias arts="php artisan serve"
alias artm="php artisan migrate"
alias artmr="php artisan migrate:rollback"
alias artmf="php artisan migrate:fresh"
alias artms="php artisan migrate:fresh --seed"
alias artdb="php artisan db:seed"
alias arttc="php artisan tinker"
alias artcc="php artisan cache:clear"
alias artoc="php artisan optimize:clear"

# Testing aliases
alias t="phpunit"
alias tf="phpunit --filter"
alias tc="phpunit --coverage-html coverage"
alias stan="phpstan analyse"
alias psalm="psalm --show-info=true"
EOF
    print_success "PHP aliases created"
  fi

  # Create PHP CS Fixer configuration
  if [[ ! -f "$HOME/.php-cs-fixer.dist.php" ]]; then
    cat > "$HOME/.php-cs-fixer.dist.php" << 'EOF'
<?php

$finder = PhpCsFixer\Finder::create()
    ->in(__DIR__)
    ->exclude('var')
    ->exclude('vendor')
    ->exclude('node_modules')
;

$config = new PhpCsFixer\Config();
return $config->setRules([
        '@Symfony' => true,
        '@PSR12' => true,
        'array_syntax' => ['syntax' => 'short'],
        'ordered_imports' => true,
        'no_unused_imports' => true,
        'linebreak_after_opening_tag' => true,
        'phpdoc_order' => true,
        'phpdoc_summary' => false,
    ])
    ->setFinder($finder)
;
EOF
    print_success "PHP CS Fixer config created"
  fi

  # Create SSH wrappers
  if command_exists create_tool_wrapper 2>/dev/null; then
    command_exists php && create_tool_wrapper "php" "$(which php)"
    command_exists composer && create_tool_wrapper "composer" "$(which composer)"
    command_exists symfony && create_tool_wrapper "symfony" "$(which symfony)"
  fi

  print_success "PHP configured"
  return 0
}

# ============================================================================
# VALIDATE
# ============================================================================

validate() {
  print_status "Validating PHP installation..."

  local all_valid=true

  # Check PHP
  if ! command_exists php; then
    print_error "php not found"
    all_valid=false
  else
    print_success "PHP: $(php -v | head -n1)"
  fi

  # Check Composer
  if ! command_exists composer; then
    print_error "composer not found"
    all_valid=false
  else
    local composer_ver
    composer_ver=$(timeout 3 composer --version 2>&1 | head -n1 || echo "version check timed out")
    print_success "Composer: $composer_ver"
  fi

  # Check Symfony CLI
  if command_exists symfony; then
    local symfony_ver
    symfony_ver=$(timeout 3 symfony version 2>&1 | head -n1 || echo "version check timed out")
    print_success "Symfony CLI: $symfony_ver"
  else
    print_warning "Symfony CLI not found"
  fi

  # Check extensions
  local extensions=(curl mbstring mysql pgsql xml zip opcache xdebug)
  local exts_found=0
  for ext in "${extensions[@]}"; do
    php -m 2>/dev/null | grep -qi "$ext" && ((exts_found++))
  done
  print_status "PHP extensions: $exts_found/${#extensions[@]}"

  # Check dev tools
  local tools=(php-cs-fixer phpstan psalm phpunit)
  local tools_found=0
  for tool in "${tools[@]}"; do
    command_exists "$tool" && ((tools_found++))
  done
  print_status "Development tools: $tools_found/${#tools[@]}"

  if [[ "$all_valid" == "true" ]]; then
    print_success "Validation passed"
    return 0
  else
    print_error "Validation failed"
    return 1
  fi
}

# ============================================================================
# STATUS
# ============================================================================

status() {
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo "Extension: $EXT_NAME v$EXT_VERSION"
  echo "Description: $EXT_DESCRIPTION"
  echo "Category: $EXT_CATEGORY"
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo ""

  # Check installation status
  if ! command_exists php; then
    echo "Status: ✗ NOT INSTALLED"
    return 1
  fi

  echo "Status: ✓ INSTALLED"
  echo ""

  # Show installed tools with versions
  print_status "Installed tools:"
  echo "  ✓ PHP $(php -v | head -n1 | awk '{print $2}')"

  if command_exists composer; then
    local composer_ver
    composer_ver=$(timeout 3 composer --version 2>&1 | head -n1 | awk '{print $3}' || echo "version check timed out")
    echo "  ✓ Composer $composer_ver"
  fi

  if command_exists symfony; then
    local symfony_ver
    symfony_ver=$(timeout 3 symfony version 2>&1 | head -n1 | awk '{print $3}' || echo "version check timed out")
    echo "  ✓ Symfony CLI $symfony_ver"
  fi

  echo ""
  print_status "Installed extensions:"
  for ext in curl mbstring mysql pgsql xml zip opcache xdebug redis mongodb; do
    php -m 2>/dev/null | grep -qi "$ext" && echo "  ✓ $ext"
  done

  echo ""
  print_status "Installed development tools:"
  for tool in php-cs-fixer phpstan psalm phpunit phpcs phpcbf psysh; do
    command_exists "$tool" && echo "  ✓ $tool"
  done

  return 0
}

# ============================================================================
# HELPER FUNCTIONS
# ============================================================================

check_dependent_extensions() {
  local provided_commands=("$@")
  local dependent_extensions=()
  local manifest_file="$SCRIPT_DIR/active-extensions.conf"
  [[ ! -f "$manifest_file" ]] && manifest_file="/workspace/scripts/extensions.d/active-extensions.conf"
  [[ ! -f "$manifest_file" ]] && return 0

  while IFS= read -r line; do
    [[ "$line" =~ ^[[:space:]]*# ]] && continue
    [[ -z "${line// }" ]] && continue
    local ext_name=$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
    [[ "$ext_name" == "$EXT_NAME" ]] && continue
    local ext_file="$SCRIPT_DIR/${ext_name}.sh"
    if [[ ! -f "$ext_file" ]]; then
      local matches=("$SCRIPT_DIR/"*"-${ext_name}.sh")
      ext_file="${matches[0]}"
    fi
    [[ ! -f "$ext_file" ]] && continue
    for cmd in "${provided_commands[@]}"; do
      if grep -q "$cmd" "$ext_file" 2>/dev/null; then
        dependent_extensions+=("$ext_name")
        break
      fi
    done
  done < "$manifest_file"

  printf '%s\n' "${dependent_extensions[@]}"
}

# ============================================================================
# REMOVE
# ============================================================================

remove() {
  print_warning "Uninstalling PHP..."

  local dependent_exts=()
  mapfile -t dependent_exts < <(check_dependent_extensions "php" "composer" "symfony")
  if [[ ${#dependent_exts[@]} -gt 0 ]]; then
    print_warning "The following extensions depend on PHP and may stop working:"
    for ext in "${dependent_exts[@]}"; do
      echo "  - $ext"
    done
    echo ""
  fi

  if ! prompt_confirmation "Continue with PHP removal?"; then
    print_status "Removal cancelled"
    return 1
  fi

  # Remove PHP packages
  print_status "Removing PHP packages..."
  sudo apt-get remove -y php8.3* 2>/dev/null
  sudo apt-get autoremove -y 2>/dev/null

  # Remove Composer
  [[ -f "/usr/local/bin/composer" ]] && sudo rm -f /usr/local/bin/composer

  # Remove Symfony CLI
  [[ -f "/usr/local/bin/symfony" ]] && sudo rm -f /usr/local/bin/symfony

  # Remove Composer global directory
  read -p "Remove Composer global directory (~/.composer)? (y/N): " -r
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    rm -rf "$HOME/.composer"
    print_success "Composer global directory removed"
  fi

  # Remove aliases
  cleanup_bashrc "# Composer global bin"
  cleanup_bashrc "# PHP aliases"

  # Remove PHP repository
  sudo add-apt-repository --remove -y ppa:ondrej/php 2>/dev/null

  # Remove configs
  rm -f "$HOME/.php-cs-fixer.dist.php"

  print_success "PHP uninstalled"
  print_warning "Restart shell: source ~/.bashrc"
  return 0
}

# ============================================================================
# MAIN EXECUTION
# ============================================================================

extension_main "$@"
