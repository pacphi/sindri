#!/bin/bash
# python.extension - Python development environment via mise
# Extension API v1.0
#
# This extension installs Python 3.13 with development tools using mise.
# mise manages Python and pipx-based CLI tools declaratively via TOML config.

# Source shared extension library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$(dirname "$SCRIPT_DIR")/extensions-common.sh"

# ============================================================================
# METADATA
# ============================================================================

EXT_NAME="python"
EXT_VERSION="2.0.0"
EXT_DESCRIPTION="Python 3.13 development environment via mise"
EXT_CATEGORY="language"

# Initialize extension environment
extension_init

# ============================================================================
# PREREQUISITES
# ============================================================================

prerequisites() {
  print_status "Checking prerequisites for ${EXT_NAME}..."

  # Check for mise
  if ! command_exists mise; then
    print_error "mise is required but not installed"
    print_status "Install mise-config extension first: extension-manager install mise-config"
    return 1
  fi

  # Check disk space (Python + pipx tools need ~1GB)
  local available_space
  available_space=$(df -BM / | awk 'NR==2 {print $4}' | sed 's/M//')
  if [[ $available_space -lt 1200 ]]; then
    print_warning "Low disk space: ${available_space}MB available (1200MB recommended)"
  fi

  print_success "All prerequisites met"
  return 0
}

# ============================================================================
# INSTALL
# ============================================================================

install() {
  print_status "Installing Python development environment via mise..."

  # Ensure mise config directory exists
  local mise_config_dir="$HOME/.config/mise/conf.d"
  if [[ ! -d "$mise_config_dir" ]]; then
    mkdir -p "$mise_config_dir"
    print_debug "Created mise config directory: $mise_config_dir"
  fi

  # Determine which TOML file to use based on CI_MODE
  local source_toml
  local ci_mode="${CI_MODE:-false}"

  if [[ "$ci_mode" == "true" ]]; then
    source_toml="$SCRIPT_DIR/python-ci.toml"
    print_status "CI mode detected - using minimal Python configuration"
  else
    source_toml="$SCRIPT_DIR/python.toml"
    print_status "Using full Python development configuration"
  fi

  # Verify source TOML exists
  if [[ ! -f "$source_toml" ]]; then
    print_error "Python configuration not found: $source_toml"
    return 1
  fi

  # Copy TOML to mise config directory
  local dest_toml="$mise_config_dir/python.toml"
  if cp "$source_toml" "$dest_toml"; then
    print_success "Copied Python configuration to $dest_toml"
  else
    print_error "Failed to copy Python configuration"
    return 1
  fi

  # Activate mise for current session (needed for mise install to work)
  if command_exists mise; then
    eval "$(mise activate bash)" 2>/dev/null || true
  fi

  # Install Python and pipx tools via mise
  print_status "Installing Python 3.13 and pipx tools (this may take several minutes)..."
  if mise install 2>&1 | grep -v "^\s*$"; then
    print_success "Python and tools installed via mise"
  else
    print_error "Failed to install Python via mise"
    return 1
  fi

  # Verify core tools are available
  if ! command_exists python3; then
    print_error "python3 not found after mise install"
    return 1
  fi

  if ! command_exists pip3; then
    print_error "pip3 not found after mise install"
    return 1
  fi

  print_success "Python $(python3 --version 2>&1 | awk '{print $2}') installed via mise"
  return 0
}

# ============================================================================
# CONFIGURE
# ============================================================================

configure() {
  print_status "Configuring Python environment..."

  # Ensure mise activation in .bashrc (should already be there from mise-config extension)
  if ! grep -q 'mise activate bash' "$HOME/.bashrc" 2>/dev/null; then
    print_warning "mise activation not found in .bashrc"
    print_status "Adding mise activation..."
    cat >> "$HOME/.bashrc" << 'EOF'

# mise - unified tool version manager
if command -v mise >/dev/null 2>&1; then
    eval "$(mise activate bash)"
fi
EOF
    print_success "Added mise activation to .bashrc"
  fi

  # Create project template script
  print_status "Creating Python project template..."
  cat > /workspace/scripts/create-python-project.sh << 'EOF'
#!/bin/bash
# Create a new Python project with virtual environment

project_name="$1"
if [[ -z "$project_name" ]]; then
    echo "Usage: $0 <project-name>"
    exit 1
fi

mkdir -p "/workspace/projects/active/$project_name"
cd "/workspace/projects/active/$project_name"

python3 -m venv venv
source venv/bin/activate

mkdir -p src tests docs
touch src/__init__.py tests/__init__.py

cat > requirements.txt << 'REQ'
# Production dependencies
REQ

cat > requirements-dev.txt << 'REQ'
# Development dependencies
pytest>=7.0.0
black>=22.0.0
flake8>=4.0.0
mypy>=0.910
ipython>=8.0.0
REQ

cat > setup.py << SETUP
from setuptools import setup, find_packages

setup(
    name="$project_name",
    version="0.1.0",
    packages=find_packages(where="src"),
    package_dir={"": "src"},
    python_requires=">=3.8",
)
SETUP

cat > README.md << README
# $project_name

## Setup
\`\`\`bash
source venv/bin/activate
pip install -r requirements.txt
pip install -r requirements-dev.txt
\`\`\`

## Testing
\`\`\`bash
pytest tests/
\`\`\`

## Formatting
\`\`\`bash
black src/ tests/
flake8 src/ tests/
mypy src/
\`\`\`
README

pip install -r requirements-dev.txt

echo "Python project '$project_name' created!"
echo "To activate: source /workspace/projects/active/$project_name/venv/bin/activate"
EOF

  chmod +x /workspace/scripts/create-python-project.sh
  print_success "Project template created"

  # Add git aliases
  if command_exists git; then
    git config --global alias.pytest '!python -m pytest' 2>/dev/null || true
    git config --global alias.black '!black .' 2>/dev/null || true
    git config --global alias.flake '!flake8 .' 2>/dev/null || true
    print_debug "Git aliases configured"
  fi

  # Create SSH wrappers
  if command_exists python3; then
    if command_exists create_tool_wrapper 2>/dev/null; then
      create_tool_wrapper "python3" "$(which python3)"
      create_tool_wrapper "pip3" "$(which pip3)"
    fi
  fi

  print_success "Python configured"
  return 0
}

# ============================================================================
# VALIDATE
# ============================================================================

validate() {
  print_status "Validating Python installation..."

  local all_valid=true

  # Activate mise for validation
  if command_exists mise; then
    eval "$(mise activate bash)" 2>/dev/null || true
  fi

  # Check mise shows Python
  if ! mise ls python 2>/dev/null | grep -q "python"; then
    print_error "Python not managed by mise"
    all_valid=false
  else
    print_success "mise manages Python: $(mise ls python 2>/dev/null | head -n1)"
  fi

  # Check Python3
  if ! command_exists python3; then
    print_error "python3 not found"
    all_valid=false
  else
    print_success "Python: $(python3 --version 2>&1)"
  fi

  # Check pip3
  if ! command_exists pip3; then
    print_error "pip3 not found"
    all_valid=false
  else
    print_success "pip: $(pip3 --version 2>&1 | awk '{print $2}')"
  fi

  # Check uv (always installed via pipx in both configs)
  if ! command_exists uv; then
    print_error "uv not found"
    all_valid=false
  else
    print_success "uv: $(uv --version 2>&1)"
  fi

  # Check pipx tools (only in full config, not CI)
  local ci_mode="${CI_MODE:-false}"
  if [[ "$ci_mode" != "true" ]]; then
    local pipx_tools_output
    pipx_tools_output=$(mise ls 'pipx:*' 2>/dev/null)
    if [[ -z "$pipx_tools_output" ]]; then
      print_warning "No pipx tools found via mise"
    else
      local tool_count
      tool_count=$(echo "$pipx_tools_output" | wc -l)
      print_success "pipx tools managed by mise: $tool_count tools"

      # Verify some key tools are available
      for tool in virtualenv poetry flake8 black; do
        if command_exists "$tool"; then
          print_debug "✓ $tool available"
        else
          print_warning "$tool not available as command"
        fi
      done
    fi
  fi

  if [[ "$all_valid" == "true" ]]; then
    print_success "Validation passed"
    return 0
  else
    print_error "Validation failed"
    return 1
  fi
}

# ============================================================================
# STATUS
# ============================================================================

status() {
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo "Extension: $EXT_NAME v$EXT_VERSION (mise-powered)"
  echo "Description: $EXT_DESCRIPTION"
  echo "Category: $EXT_CATEGORY"
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo ""

  # Activate mise for status
  if command_exists mise; then
    eval "$(mise activate bash)" 2>/dev/null || true
  fi

  # Check installation status
  if ! command_exists python3; then
    echo "Status: ✗ NOT INSTALLED"
    return 1
  fi

  echo "Status: ✓ INSTALLED"
  echo ""

  # Show version manager
  print_status "Version Manager:"
  echo "  • mise (managing Python + pipx tools)"
  echo ""

  # Show mise-managed Python
  print_status "mise-Managed Python:"
  local python_info
  python_info=$(mise ls python 2>/dev/null)
  if [[ -n "$python_info" ]]; then
    echo "$python_info" | sed 's/^/  • /'
  else
    echo "  (none)"
  fi
  echo ""

  # Show mise-managed pipx tools
  print_status "mise-Managed pipx Tools:"
  local pipx_info
  pipx_info=$(mise ls 'pipx:*' 2>/dev/null)
  if [[ -n "$pipx_info" ]]; then
    echo "$pipx_info" | sed 's/^/  • /'
  else
    echo "  (none - CI mode or not installed)"
  fi
  echo ""

  # Show available commands
  print_status "Available Commands:"
  command_exists python3 && echo "  ✓ python3 $(python3 --version 2>&1 | awk '{print $2}')"
  command_exists pip3 && echo "  ✓ pip $(pip3 --version 2>&1 | awk '{print $2}')"
  command_exists uv && echo "  ✓ uv $(uv --version 2>&1 | awk '{print $2}')"
  command_exists virtualenv && echo "  ✓ virtualenv"
  command_exists poetry && echo "  ✓ poetry"
  command_exists flake8 && echo "  ✓ flake8"
  command_exists mypy && echo "  ✓ mypy"
  command_exists black && echo "  ✓ black"
  command_exists jupyter && echo "  ✓ jupyterlab"

  [[ -f "/workspace/scripts/create-python-project.sh" ]] && echo "" && print_status "Project template: installed"

  return 0
}

# ============================================================================
# REMOVE
# ============================================================================

remove() {
  print_warning "Uninstalling Python development environment..."

  # Show dependent extensions warning
  show_dependent_extensions_warning "python3" "pip3" "pipx" "uv"

  # Confirm removal
  if ! prompt_confirmation "Continue with Python removal?"; then
    print_status "Removal cancelled"
    return 1
  fi

  # Remove mise configuration
  local mise_config="$HOME/.config/mise/conf.d/python.toml"
  if [[ -f "$mise_config" ]]; then
    print_status "Removing mise Python configuration..."
    rm -f "$mise_config"
    print_success "Removed $mise_config"
  fi

  # Note about mise prune
  print_status "Note: Python and pipx tools are still installed by mise"
  print_status "Run 'mise prune' to remove unused tools, or 'mise uninstall python@3.13' to remove Python"

  # Cleanup project template
  rm -f "/workspace/scripts/create-python-project.sh"

  # Remove git aliases
  if command_exists git; then
    git config --global --unset-all alias.pytest 2>/dev/null || true
    git config --global --unset-all alias.black 2>/dev/null || true
    git config --global --unset-all alias.flake 2>/dev/null || true
  fi

  print_success "Python extension configuration removed"
  print_warning "Restart shell: source ~/.bashrc"
  return 0
}

# ============================================================================
# MAIN EXECUTION
# ============================================================================

extension_main "$@"
