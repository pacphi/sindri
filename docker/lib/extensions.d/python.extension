#!/bin/bash
# python.sh.example - Python development environment
# Extension API v1.0
#
# This extension installs Python 3 with comprehensive development tools:
# - System Python packages (requests, numpy, pandas, pytest, black)
# - pipx for global CLI tools
# - Development tools (virtualenv, pipenv, poetry, flake8, mypy)
# - Jupyter Lab with data science packages

# Source shared extension library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$(dirname "$SCRIPT_DIR")/extensions-common.sh"

# ============================================================================
# METADATA
# ============================================================================

EXT_NAME="python"
EXT_VERSION="1.0.0"
EXT_DESCRIPTION="Python 3 development environment with pipx and Jupyter"
EXT_CATEGORY="language"

# Initialize extension environment
extension_init

# PREREQUISITES
# ============================================================================

prerequisites() {
  print_status "Checking prerequisites for ${EXT_NAME}..."

  # Check for apt-get (Debian/Ubuntu based system)
  if ! command_exists apt-get; then
    print_error "apt-get is required but not found"
    print_status "This extension requires a Debian/Ubuntu based system"
    return 1
  fi

  # Check for sudo
  if ! command_exists sudo; then
    print_error "sudo is required but not installed"
    return 1
  fi

  # Check disk space (Python packages need ~500MB)
  local available_space
  available_space=$(df -BM / | awk 'NR==2 {print $4}' | sed 's/M//')
  if [[ $available_space -lt 800 ]]; then
    print_warning "Low disk space: ${available_space}MB available (800MB recommended)"
  fi

  print_success "All prerequisites met"
  return 0
}

# ============================================================================
# INSTALL
# ============================================================================

install() {
  print_status "Installing Python development environment..."

  # Check if Python3 is already sufficient
  if command_exists python3 && command_exists pip3; then
    local current_version
    current_version=$(python3 --version 2>&1 | head -n1)
    print_status "Python already installed: $current_version"
  else
    print_error "Python3 not found in system packages"
    print_status "Python should be pre-installed on most systems"
    return 1
  fi

  # Install system dependencies
  print_status "Installing system dependencies..."
  sudo apt-get update -qq

  local system_packages=(
    python3-full
    python3-dev
    python3-pip
    python3-venv
    python3-requests
    python3-numpy
    python3-pandas
    python3-pytest
    black
    pipx
    build-essential
    libffi-dev
    libssl-dev
    libbz2-dev
    libreadline-dev
    libsqlite3-dev
    libncurses5-dev
    libncursesw5-dev
    xz-utils
    tk-dev
    libxml2-dev
    libxmlsec1-dev
    liblzma-dev
  )

  if sudo apt-get install -y "${system_packages[@]}"; then
    print_success "System packages installed"
  else
    print_warning "Failed to install some system dependencies"
  fi

  # Install CLI tools with pipx
  local pipx_packages=(
    virtualenv
    pipenv
    poetry
    flake8
    autopep8
    mypy
  )

  print_status "Installing Python CLI tools with pipx..."
  local installed_pipx=0
  local max_install_time=300  # 5 minute timeout per package

  for package in "${pipx_packages[@]}"; do
    print_debug "Installing $package with pipx (max ${max_install_time}s timeout)..."

    # Use timeout to prevent hanging, show stderr for debugging
    if timeout "${max_install_time}" pipx install "$package" 2>&1 | grep -v "^\s*$"; then
      print_debug "âœ“ $package installed"
      ((installed_pipx++))
    else
      local exit_code=$?
      if [[ $exit_code -eq 124 ]]; then
        print_warning "Timeout installing $package (exceeded ${max_install_time}s)"
      else
        print_warning "Failed to install $package (exit code: $exit_code)"
      fi
    fi
  done

  print_status "Installed $installed_pipx/${#pipx_packages[@]} pipx tools"

  # Install Jupyter Lab
  print_status "Installing Jupyter Lab (max 10min timeout)..."
  if timeout 600 pipx install jupyterlab --include-deps; then
    print_success "Jupyter Lab installed"

    # Inject data science packages
    local jupyter_packages=(pandas numpy matplotlib requests)
    for pkg in "${jupyter_packages[@]}"; do
      print_debug "Injecting $pkg (max 3min timeout)..."
      timeout 180 pipx inject jupyterlab "$pkg" 2>&1 | grep -v "^\s*$" || true
    done
  else
    local exit_code=$?
    if [[ $exit_code -eq 124 ]]; then
      print_warning "Timeout installing Jupyter Lab (exceeded 600s)"
    else
      print_warning "Failed to install Jupyter Lab (exit code: $exit_code)"
    fi
  fi

  # Install uv (fast Python package manager)
  print_status "Installing uv (max 3min timeout)..."
  if command_exists uv; then
    print_warning "uv already installed: $(uv --version)"
  else
    if timeout 180 bash -c "curl --max-time 60 -LsSf https://astral.sh/uv/install.sh | sh"; then
      export PATH="$HOME/.local/bin:$PATH"
      print_success "uv installed: $(uv --version 2>&1 || echo 'installed')"
    else
      local exit_code=$?
      if [[ $exit_code -eq 124 ]]; then
        print_warning "Timeout installing uv (exceeded 180s)"
      else
        print_warning "Failed to install uv (exit code: $exit_code)"
      fi
    fi
  fi

  return 0
}

# ============================================================================
# CONFIGURE
# ============================================================================

configure() {
  print_status "Configuring Python environment..."

  # Setup pipx PATH
  if command_exists pipx; then
    pipx ensurepath
    export PATH="$HOME/.local/bin:$PATH"

    if ! grep -q "$HOME/.local/bin" "$HOME/.bashrc" 2>/dev/null; then
      echo "" >> "$HOME/.bashrc"
      echo "# ${EXT_NAME} - pipx tools" >> "$HOME/.bashrc"
      echo "export PATH=\"\$HOME/.local/bin:\$PATH\"" >> "$HOME/.bashrc"
      print_success "Added pipx path to .bashrc"
    fi
  fi

  # Create project template script
  print_status "Creating Python project template..."
  cat > /workspace/scripts/create-python-project.sh << 'EOF'
#!/bin/bash
# Create a new Python project with virtual environment

project_name="$1"
if [[ -z "$project_name" ]]; then
    echo "Usage: $0 <project-name>"
    exit 1
fi

mkdir -p "/workspace/projects/active/$project_name"
cd "/workspace/projects/active/$project_name"

python3 -m venv venv
source venv/bin/activate

mkdir -p src tests docs
touch src/__init__.py tests/__init__.py

cat > requirements.txt << 'REQ'
# Production dependencies
REQ

cat > requirements-dev.txt << 'REQ'
# Development dependencies
pytest>=7.0.0
black>=22.0.0
flake8>=4.0.0
mypy>=0.910
ipython>=8.0.0
REQ

cat > setup.py << SETUP
from setuptools import setup, find_packages

setup(
    name="$project_name",
    version="0.1.0",
    packages=find_packages(where="src"),
    package_dir={"": "src"},
    python_requires=">=3.8",
)
SETUP

cat > README.md << README
# $project_name

## Setup
\`\`\`bash
source venv/bin/activate
pip install -r requirements.txt
pip install -r requirements-dev.txt
\`\`\`

## Testing
\`\`\`bash
pytest tests/
\`\`\`

## Formatting
\`\`\`bash
black src/ tests/
flake8 src/ tests/
mypy src/
\`\`\`
README

pip install -r requirements-dev.txt

echo "Python project '$project_name' created!"
echo "To activate: source /workspace/projects/active/$project_name/venv/bin/activate"
EOF

  chmod +x /workspace/scripts/create-python-project.sh
  print_success "Project template created"

  # Add git aliases
  if command_exists git; then
    git config --global alias.pytest '!python -m pytest'
    git config --global alias.black '!black .'
    git config --global alias.flake '!flake8 .'
    print_debug "Git aliases configured"
  fi

  # Create SSH wrappers
  if command_exists python3; then
    if command_exists create_tool_wrapper 2>/dev/null; then
      create_tool_wrapper "python3" "$(which python3)"
      create_tool_wrapper "pip3" "$(which pip3)"
    fi
  fi

  print_success "Python configured"
  return 0
}

# ============================================================================
# VALIDATE
# ============================================================================

validate() {
  print_status "Validating Python installation..."

  local all_valid=true

  # Check Python3
  if ! command_exists python3; then
    print_error "python3 not found"
    all_valid=false
  else
    print_success "Python: $(python3 --version 2>&1)"
  fi

  # Check pip3
  if ! command_exists pip3; then
    print_error "pip3 not found"
    all_valid=false
  else
    print_success "pip: $(pip3 --version 2>&1 | awk '{print $2}')"
  fi

  # Check system packages
  local packages=(requests numpy pandas pytest)
  local available=0
  for pkg in "${packages[@]}"; do
    python3 -c "import $pkg" 2>/dev/null && ((available++))
  done
  print_status "System packages: $available/${#packages[@]}"

  # Check pipx tools
  if command_exists pipx; then
    local tools=(virtualenv poetry flake8)
    local tools_available=0
    for tool in "${tools[@]}"; do
      (command_exists "$tool" || pipx list 2>/dev/null | grep -q "$tool") && ((tools_available++))
    done
    print_status "pipx tools: $tools_available/${#tools[@]}"
  fi

  # Check uv
  if command_exists uv; then
    print_success "uv: $(uv --version 2>&1)"
  else
    print_warning "uv not installed"
  fi

  if [[ "$all_valid" == "true" ]]; then
    print_success "Validation passed"
    return 0
  else
    print_error "Validation failed"
    return 1
  fi
}

# ============================================================================
# STATUS
# ============================================================================

status() {
  print_status "Checking Python status..."

  if ! command_exists python3; then
    print_warning "Python not installed"
    return 1
  fi

  print_success "Python: $(python3 --version 2>&1)"
  command_exists pip3 && print_success "pip: $(pip3 --version 2>&1 | awk '{print $2}')"
  command_exists pipx && print_success "pipx: installed"
  command_exists uv && print_success "uv: $(uv --version 2>&1)"

  print_status "System packages:"
  for pkg in requests numpy pandas pytest black; do
    python3 -c "import $pkg" 2>/dev/null && echo "  âœ“ $pkg"
  done

  if command_exists pipx; then
    print_status "pipx tools:"
    pipx list 2>/dev/null | grep "package" | awk '{print "  - " $2}' || echo "  (none)"
  fi

  [[ -f "/workspace/scripts/create-python-project.sh" ]] && print_success "Project template: installed"

  return 0
}

# ============================================================================
# REMOVE
# ============================================================================

remove() {
  print_warning "Uninstalling Python development environment..."

  local dependent_exts=()
  mapfile -t dependent_exts < <(check_dependent_extensions "python3" "pip3" "pipx" "jupyter")
  if [[ ${#dependent_exts[@]} -gt 0 ]]; then
    print_warning "The following extensions depend on Python and may stop working:"
    for ext in "${dependent_exts[@]}"; do
      echo "  - $ext"
    done
    echo ""
  fi

  print_warning "This removes packages but NOT the Python interpreter"
  if ! prompt_confirmation "Continue?"; then
    print_status "Removal cancelled"
    return 1
  fi

  # Remove pipx packages
  if command_exists pipx; then
    print_status "Removing pipx packages..."
    for pkg in virtualenv pipenv poetry flake8 autopep8 mypy jupyterlab; do
      pipx list 2>/dev/null | grep -q "$pkg" && pipx uninstall "$pkg" 2>/dev/null
    done
  fi

  # Remove uv
  if command_exists uv; then
    print_status "Removing uv..."
    rm -f "$HOME/.local/bin/uv" "$HOME/.local/bin/uvx"
    rm -rf "$HOME/.local/share/uv"
  fi

  # Remove system packages
  read -p "Remove pipx and system packages? (y/N): " -r
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    sudo apt-get remove -y python3-requests python3-numpy python3-pandas python3-pytest black pipx 2>/dev/null
    sudo apt-get autoremove -y 2>/dev/null
  fi

  # Cleanup
  rm -f "/workspace/scripts/create-python-project.sh"
  cleanup_bashrc "# ${EXT_NAME}"
  command_exists git && git config --global --unset-all alias.pytest 2>/dev/null
  command_exists git && git config --global --unset-all alias.black 2>/dev/null
  command_exists git && git config --global --unset-all alias.flake 2>/dev/null

  print_success "Python packages uninstalled"
  print_warning "Restart shell: source ~/.bashrc"
  return 0
}

# ============================================================================
# MAIN EXECUTION
# ============================================================================

extension_main "$@"
