#!/bin/bash
# ruby.sh.example - Ruby, Rails, and Sinatra development environment
# Extension API v1.0
#
# This extension installs Ruby with:
# - rbenv for version management
# - Multiple Ruby versions (3.4.5, 3.3.9)
# - Bundler, Rails, and Sinatra
# - Development gems (rubocop, rspec, pry, etc.)
# - Node.js and Yarn for Rails asset pipeline
# - CI mode detection for lightweight installs

# Source shared extension library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$(dirname "$SCRIPT_DIR")/extensions-common.sh"

# ============================================================================
# METADATA
# ============================================================================

EXT_NAME="ruby"
EXT_VERSION="1.0.0"
EXT_DESCRIPTION="Ruby with rbenv, Rails, and Sinatra"
EXT_CATEGORY="language"

# Initialize extension environment
extension_init

# ============================================================================
# PREREQUISITES
# ============================================================================

prerequisites() {
  print_status "Checking prerequisites for ${EXT_NAME}..."

  # Check for required tools
  local missing_tools=()
  for tool in git sudo apt-get; do
    if ! command_exists "$tool"; then
      missing_tools+=("$tool")
    fi
  done

  if [[ ${#missing_tools[@]} -gt 0 ]]; then
    print_error "Missing required tools: ${missing_tools[*]}"
    return 1
  fi

  # Check disk space (Ruby needs ~2GB with all gems)
  local available_space
  available_space=$(df -BM "$HOME" | awk 'NR==2 {print $4}' | sed 's/M//')
  if [[ $available_space -lt 2500 ]]; then
    print_warning "Low disk space: ${available_space}MB available (2.5GB recommended for Ruby)"
  fi

  print_success "All prerequisites met"
  return 0
}

# ============================================================================
# INSTALL
# ============================================================================

install() {
  print_status "Installing Ruby development environment..."

  # Install build dependencies
  print_status "Installing Ruby build dependencies..."
  sudo apt-get update -qq

  local ruby_deps=(
    build-essential libssl-dev libreadline-dev zlib1g-dev
    libsqlite3-dev libxml2-dev libxslt1-dev libcurl4-openssl-dev
    software-properties-common libffi-dev libyaml-dev libgdbm-dev
    libncurses5-dev automake libtool bison libgmp-dev
  )

  for dep in "${ruby_deps[@]}"; do
    sudo apt-get install -y "$dep" 2>/dev/null
  done

  # Install rbenv for Ruby version management
  if [[ -d "$HOME/.rbenv" ]]; then
    print_warning "rbenv is already installed"
  else
    print_status "Installing rbenv..."
    if git clone https://github.com/rbenv/rbenv.git ~/.rbenv 2>/dev/null; then
      print_success "rbenv installed successfully"

      # Install ruby-build plugin
      print_status "Installing ruby-build plugin..."
      git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build 2>/dev/null

      # Install rbenv-vars plugin
      git clone https://github.com/rbenv/rbenv-vars.git ~/.rbenv/plugins/rbenv-vars 2>/dev/null || true
    else
      print_error "Failed to install rbenv"
      return 1
    fi
  fi

  # Set up environment
  export PATH="$HOME/.rbenv/bin:$PATH"
  eval "$(rbenv init - bash)"

  # Install Ruby versions
  print_status "Installing Ruby versions..."

  local ruby_versions
  if is_ci_mode; then
    print_status "CI mode detected - installing single Ruby version only"
    ruby_versions=("3.4.5")
  else
    ruby_versions=("3.4.5" "3.3.9")
  fi

  # Optimize Ruby compilation with parallel jobs
  local cpu_count
  cpu_count=$(nproc 2>/dev/null || echo "2")
  export MAKE_OPTS="-j$cpu_count"
  export RUBY_BUILD_CACHE_PATH="$HOME/.rbenv/cache"
  mkdir -p "$RUBY_BUILD_CACHE_PATH"

  for version in "${ruby_versions[@]}"; do
    print_debug "Installing Ruby $version (using $cpu_count parallel jobs)..."
    if rbenv install "$version" 2>/dev/null; then
      print_debug "✓ Ruby $version installed"
    else
      print_debug "Ruby $version already installed or failed"
    fi
  done

  # Set default Ruby version
  rbenv global 3.4.5
  rbenv rehash

  # Verify Ruby is available
  export PATH="$HOME/.rbenv/shims:$PATH"
  if ! command_exists ruby; then
    print_error "Ruby installation verification failed"
    return 1
  fi

  print_success "Ruby $(ruby -v) set as default"

  # Install Bundler
  print_status "Installing Bundler..."
  gem install bundler 2>/dev/null && rbenv rehash
  print_success "Bundler installed: $(bundler -v 2>&1 | head -n1)"

  # Check if running in CI mode - skip Rails, gems, and additional setup
  if is_ci_mode; then
    print_status "CI mode detected - skipping Rails, Sinatra, and development gems"
    return 0
  fi

  # Install Rails
  print_status "Installing Ruby on Rails..."
  if gem install rails 2>/dev/null; then
    rbenv rehash
    print_success "Rails installed: $(rails -v 2>&1 | head -n1)"
  else
    print_warning "Failed to install Rails"
  fi

  # Install Sinatra
  print_status "Installing Sinatra..."
  gem install sinatra sinatra-contrib 2>/dev/null && rbenv rehash

  # Install Ruby development gems
  print_status "Installing Ruby development gems..."
  local ruby_gems=(
    pry pry-byebug rubocop rubocop-rails rubocop-performance
    reek brakeman bundler-audit solargraph rufo ruby-debug-ide debase
    rspec minitest factory_bot faker database_cleaner simplecov yard
    foreman whenever sidekiq puma unicorn
  )

  for gem in "${ruby_gems[@]}"; do
    print_debug "Installing $gem..."
    gem install "$gem" 2>/dev/null && print_debug "✓ $gem installed"
  done

  rbenv rehash

  # Install Node.js and Yarn for Rails asset pipeline
  if ! command_exists node; then
    print_status "Installing Node.js for Rails asset pipeline..."
    curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash - 2>/dev/null
    sudo apt-get install -y nodejs 2>/dev/null
    print_success "Node.js installed: $(node -v)"
  fi

  if ! command_exists yarn; then
    print_status "Installing Yarn..."
    npm install -g yarn 2>/dev/null
  fi

  # Install PostgreSQL client for Rails database
  print_status "Installing PostgreSQL client..."
  sudo apt-get install -y postgresql-client libpq-dev 2>/dev/null

  return 0
}

# ============================================================================
# CONFIGURE
# ============================================================================

configure() {
  print_status "Configuring Ruby environment..."

  # Configure PATH for SSH sessions
  if command_exists setup_tool_path 2>/dev/null; then
    setup_tool_path "rbenv" \
      'export PATH="$HOME/.rbenv/bin:$PATH"' \
      'eval "$(rbenv init - bash)"'
  else
    # Fallback: add to bashrc
    if ! grep -q "rbenv" "$HOME/.bashrc" 2>/dev/null; then
      echo "" >> "$HOME/.bashrc"
      echo "# ${EXT_NAME} - rbenv" >> "$HOME/.bashrc"
      echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> "$HOME/.bashrc"
      echo 'eval "$(rbenv init - bash)"' >> "$HOME/.bashrc"
      print_success "Added rbenv to PATH"
    fi
  fi

  # Create SSH wrappers - use dynamic wrappers since rbenv manages versions
  if command_exists create_tool_wrapper 2>/dev/null; then
    create_tool_wrapper "ruby" "" "dynamic"
    create_tool_wrapper "gem" "" "dynamic"
    create_tool_wrapper "bundle" "" "dynamic"
    create_tool_wrapper "bundler" "" "dynamic"
    create_tool_wrapper "rails" "" "dynamic"
    create_tool_wrapper "rake" "" "dynamic"
    create_tool_wrapper "irb" "" "dynamic"
  fi

  # Create Ruby/Rails aliases
  if ! grep -q "# Ruby aliases" "$HOME/.bashrc" 2>/dev/null; then
    print_status "Creating Ruby and Rails aliases..."
    cat "$(dirname "${BASH_SOURCE[0]}")/ruby.bashrc-aliases.template" >> "$HOME/.bashrc"
    print_success "Ruby aliases created"
  fi

  # Create Rubocop configuration
  if [[ ! -f "$HOME/.rubocop.yml" ]]; then
    cat "$(dirname "${BASH_SOURCE[0]}")/ruby.rubocop-config.template" > "$HOME/.rubocop.yml"
    print_success "Rubocop config created"
  fi

  # Create Gemfile template
  if [[ ! -f "$HOME/.gemfile_template" ]]; then
    cat "$(dirname "${BASH_SOURCE[0]}")/ruby.gemfile-template.template" > "$HOME/.gemfile_template"
    print_success "Gemfile template created"
  fi

  print_success "Ruby configured"
  return 0
}

# ============================================================================
# VALIDATE
# ============================================================================

validate() {
  print_status "Validating Ruby installation..."

  local all_valid=true

  # Check rbenv
  if [[ -d "$HOME/.rbenv" ]]; then
    print_success "rbenv: installed"
    export PATH="$HOME/.rbenv/bin:$PATH"
    eval "$(rbenv init - bash)"
  else
    print_error "rbenv not found"
    all_valid=false
  fi

  # Check Ruby
  if ! command_exists ruby; then
    print_error "ruby not found"
    all_valid=false
  else
    print_success "Ruby: $(ruby -v)"
  fi

  # Check Bundler
  if ! command_exists bundle; then
    print_error "bundler not found"
    all_valid=false
  else
    print_success "Bundler: $(bundler -v 2>&1 | head -n1)"
  fi

  # Check Rails
  if command_exists rails; then
    print_success "Rails: $(rails -v 2>&1 | head -n1)"
  else
    print_warning "Rails not found"
  fi

  # Check gems
  local gems=(rubocop rspec pry)
  local gems_found=0
  for gem in "${gems[@]}"; do
    command_exists "$gem" && ((gems_found++))
  done
  print_status "Development gems: $gems_found/${#gems[@]}"

  if [[ "$all_valid" == "true" ]]; then
    print_success "Validation passed"
    return 0
  else
    print_error "Validation failed"
    return 1
  fi
}

# ============================================================================
# STATUS
# ============================================================================

status() {
  print_extension_header

  # Check installation status
  if [[ ! -d "$HOME/.rbenv" ]] || ! command_exists ruby; then
    echo "Status: ✗ NOT INSTALLED"
    return 1
  fi

  echo "Status: ✓ INSTALLED"
  echo ""

  export PATH="$HOME/.rbenv/bin:$PATH"
  eval "$(rbenv init - bash)"

  # Show installed tools with versions
  print_status "Installed tools:"
  echo "  ✓ rbenv"

  if command_exists ruby; then
    echo "  ✓ Ruby $(ruby -v | awk '{print $2}')"
  fi

  command_exists bundle && echo "  ✓ Bundler $(bundler -v 2>&1 | head -n1 | awk '{print $3}')"
  command_exists rails && echo "  ✓ Rails $(rails -v 2>&1 | head -n1 | awk '{print $2}')"

  echo ""
  print_status "Installed development gems:"
  for gem in rubocop rspec pry pry-byebug solargraph yard foreman sidekiq puma; do
    command_exists "$gem" && echo "  ✓ $gem"
  done

  return 0
}

# ============================================================================
# REMOVE
# ============================================================================

remove() {
  print_warning "Uninstalling Ruby..."

  local dependent_exts=()
  mapfile -t dependent_exts < <(check_dependent_extensions "ruby" "gem" "bundle" "rails")
  if [[ ${#dependent_exts[@]} -gt 0 ]]; then
    print_warning "The following extensions depend on Ruby and may stop working:"
    for ext in "${dependent_exts[@]}"; do
      echo "  - $ext"
    done
    echo ""
  fi

  if ! prompt_confirmation "Continue with Ruby removal?"; then
    print_status "Removal cancelled"
    return 1
  fi

  # Remove rbenv
  if [[ -d "$HOME/.rbenv" ]]; then
    print_status "Removing rbenv and all Ruby versions..."
    rm -rf "$HOME/.rbenv"
    print_success "rbenv removed"
  fi

  # Remove aliases
  cleanup_bashrc "# Ruby aliases"

  # Remove rbenv from bashrc
  cleanup_bashrc "# ${EXT_NAME}"

  # Remove configs
  rm -f "$HOME/.rubocop.yml"
  rm -f "$HOME/.gemfile_template"

  print_success "Ruby uninstalled"
  print_warning "Restart shell: source ~/.bashrc"
  return 0
}

# ============================================================================
# MAIN EXECUTION
# ============================================================================

extension_main "$@"
