#!/bin/bash
# rust.extension - Rust toolchain and development tools via mise
# Extension API v1.0
#
# This extension installs Rust via mise with:
# - Complete Rust toolchain (rustc, cargo)
# - Essential cargo tools (ripgrep, fd-find, exa, bat, tokei)
# - CI mode detection for lightweight installs
# - mise-powered version management

# Source shared extension library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$(dirname "$SCRIPT_DIR")/extensions-common.sh"

# ============================================================================
# METADATA
# ============================================================================

EXT_NAME="rust"
EXT_VERSION="2.0.0"
EXT_DESCRIPTION="Rust toolchain and cargo tools via mise"
EXT_CATEGORY="language"

# Initialize extension environment
extension_init

# ============================================================================
# PREREQUISITES
# ============================================================================

prerequisites() {
  print_status "Checking prerequisites for ${EXT_NAME}..."

  # Check for mise
  if ! command_exists mise; then
    print_error "mise is required but not installed"
    print_status "Install mise first: extension-manager install mise-config"
    return 1
  fi

  # Check disk space (Rust needs ~1-2GB)
  local available_space
  available_space=$(df -BM "$HOME" | awk 'NR==2 {print $4}' | sed 's/M//')
  if [[ $available_space -lt 2000 ]]; then
    print_warning "Low disk space: ${available_space}MB available (2GB recommended for Rust)"
  fi

  print_success "All prerequisites met"
  return 0
}

# ============================================================================
# INSTALL
# ============================================================================

install() {
  print_status "Installing Rust toolchain via mise..."

  # Check if already installed
  if command_exists rustc && command_exists cargo; then
    local rust_version
    rust_version=$(rustc --version 2>/dev/null)
    print_warning "Rust is already installed: $rust_version"

    # Check if managed by mise
    if mise ls rust &>/dev/null; then
      print_status "Rust is managed by mise"
      return 0
    else
      print_warning "Rust not managed by mise - consider removing existing installation"
      return 1
    fi
  fi

  # Determine which TOML config to use based on CI_MODE
  local toml_source
  if [[ "$CI_MODE" == "true" ]]; then
    toml_source="${SCRIPT_DIR}/rust-ci.toml"
    print_status "CI mode detected - using minimal Rust configuration"
  else
    toml_source="${SCRIPT_DIR}/rust.toml"
    print_status "Using full Rust configuration with cargo tools"
  fi

  # Ensure mise config directory exists
  mkdir -p "$HOME/.config/mise/conf.d"

  # Copy TOML config to mise conf.d
  local toml_dest="$HOME/.config/mise/conf.d/rust.toml"
  if [[ -f "$toml_source" ]]; then
    cp "$toml_source" "$toml_dest"
    print_success "Copied Rust configuration to $toml_dest"
  else
    print_error "TOML configuration not found: $toml_source"
    return 1
  fi

  # Install Rust via mise
  print_status "Installing Rust via mise (this may take 5-10 minutes)..."
  if [[ "$CI_MODE" == "true" ]]; then
    print_status "Installing Rust stable only..."
  else
    print_status "Installing Rust stable + cargo tools (ripgrep, fd-find, exa, bat, tokei)..."
    print_warning "Cargo tools may take 10-15 minutes to compile from source"
  fi

  if mise install; then
    # Activate mise for current session
    eval "$(mise activate bash)"

    # Verify installation
    if command_exists rustc && command_exists cargo; then
      print_success "Rust installed: $(rustc --version)"
      print_success "Cargo installed: $(cargo --version)"
    else
      print_error "Rust installation failed - commands not found after mise install"
      return 1
    fi
  else
    print_error "Failed to install Rust via mise"
    return 1
  fi

  # Show installed cargo tools in non-CI mode
  if [[ "$CI_MODE" != "true" ]]; then
    print_status "Checking cargo tools..."
    local tools=(rg fd exa bat tokei)
    local installed_count=0
    for tool in "${tools[@]}"; do
      if command_exists "$tool"; then
        print_debug "✓ $tool installed"
        ((installed_count++))
      else
        print_warning "✗ $tool not yet available (may still be installing)"
      fi
    done
    print_status "Cargo tools available: $installed_count/${#tools[@]}"

    if [[ $installed_count -lt ${#tools[@]} ]]; then
      print_status "Some tools may still be installing in the background"
      print_status "Run 'mise ls cargo:*' to check installation progress"
    fi
  fi

  return 0
}

# ============================================================================
# CONFIGURE
# ============================================================================

configure() {
  print_status "Configuring Rust environment..."

  # mise handles PATH configuration via its activation
  # No need to modify .bashrc as mise is already activated

  # Activate mise for current session
  if command_exists mise; then
    eval "$(mise activate bash)"
    print_success "mise activated for current session"
  fi

  # Verify Rust is available
  if command_exists rustc && command_exists cargo; then
    print_success "Rust commands available in PATH"
  else
    print_warning "Rust commands not yet in PATH (restart shell or run: source ~/.bashrc)"
  fi

  # Create Rust project template script
  print_status "Creating Rust project template..."
  cat > /workspace/scripts/create-rust-project.sh << 'EOF'
#!/bin/bash
# Create a new Rust project with Cargo

project_name="$1"
project_type="${2:-binary}"

if [[ -z "$project_name" ]]; then
    echo "Usage: $0 <project-name> [binary|library]"
    exit 1
fi

cd /workspace/projects/active

if [[ "$project_type" == "library" ]]; then
    cargo new --lib "$project_name"
else
    cargo new "$project_name"
fi

cd "$project_name"

cat >> Cargo.toml << 'DEPS'

[dependencies]
serde = { version = "1.0", features = ["derive"] }
tokio = { version = "1", features = ["full"] }
anyhow = "1.0"
thiserror = "1.0"

[dev-dependencies]
criterion = "0.5"
pretty_assertions = "1.4"
DEPS

cat > Makefile << 'MAKEFILE'
.PHONY: build run test clean watch doc

build:
	cargo build --release

run:
	cargo run

test:
	cargo test

clean:
	cargo clean

watch:
	cargo watch -x check -x test -x run

doc:
	cargo doc --open

bench:
	cargo bench

audit:
	cargo audit

fmt:
	cargo fmt

clippy:
	cargo clippy -- -D warnings
MAKEFILE

cat > README.md << README
# $project_name

## Build
\`\`\`bash
cargo build --release
\`\`\`

## Run
\`\`\`bash
cargo run
\`\`\`

## Test
\`\`\`bash
cargo test
\`\`\`

## Development
\`\`\`bash
# Watch for changes
cargo watch -x check -x test -x run

# Format code
cargo fmt

# Lint code
cargo clippy
\`\`\`
README

mkdir -p .github/workflows
cat > .github/workflows/rust.yml << 'WORKFLOW'
name: Rust

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose
    - name: Check formatting
      run: cargo fmt -- --check
    - name: Run clippy
      run: cargo clippy -- -D warnings
WORKFLOW

echo "Rust project '$project_name' created!"
echo "To run: cd /workspace/projects/active/$project_name && cargo run"
EOF

  chmod +x /workspace/scripts/create-rust-project.sh
  print_success "Project template created"

  # Add Git aliases
  if command_exists git; then
    git config --global alias.cargotest '!cargo test'
    git config --global alias.cargofmt '!cargo fmt'
    git config --global alias.cargoclippy '!cargo clippy -- -D warnings'
    print_debug "Git aliases configured"
  fi

  print_success "Rust configured"
  return 0
}

# ============================================================================
# VALIDATE
# ============================================================================

validate() {
  print_status "Validating Rust installation..."

  local all_valid=true

  # Activate mise for validation
  if command_exists mise; then
    eval "$(mise activate bash)"
  fi

  # Check if Rust is managed by mise
  if ! mise ls rust &>/dev/null; then
    print_error "Rust not managed by mise"
    all_valid=false
  else
    local rust_version
    rust_version=$(mise ls rust 2>/dev/null | grep -v "^Tool" | head -n1 | awk '{print $2}')
    if [[ -n "$rust_version" ]]; then
      print_success "mise manages Rust: $rust_version"
    else
      print_error "Could not determine mise-managed Rust version"
      all_valid=false
    fi
  fi

  # Check rustc
  if ! command_exists rustc; then
    print_error "rustc not found"
    all_valid=false
  else
    print_success "rustc: $(rustc --version)"
  fi

  # Check cargo
  if ! command_exists cargo; then
    print_error "cargo not found"
    all_valid=false
  else
    print_success "cargo: $(cargo --version)"
  fi

  # Check cargo tools (only in non-CI mode)
  if [[ "$CI_MODE" != "true" ]]; then
    local tools=(rg fd exa bat tokei)
    local tools_found=0
    for tool in "${tools[@]}"; do
      if command_exists "$tool"; then
        ((tools_found++))
      fi
    done

    if [[ $tools_found -eq ${#tools[@]} ]]; then
      print_success "Cargo tools: $tools_found/${#tools[@]} installed"
    else
      print_warning "Cargo tools: $tools_found/${#tools[@]} installed (some may still be installing)"
    fi
  else
    print_status "CI mode: skipping cargo tools validation"
  fi

  # Check project template
  [[ -f "/workspace/scripts/create-rust-project.sh" ]] && print_success "Project template: installed"

  # Verify Rust can compile
  print_status "Testing Rust compilation..."
  local test_output
  if test_output=$(echo 'fn main() { println!("test"); }' | rustc - -o /tmp/rust-test 2>&1); then
    if [[ -f /tmp/rust-test ]]; then
      local run_output=$(/tmp/rust-test 2>&1)
      rm -f /tmp/rust-test
      if [[ "$run_output" == "test" ]]; then
        print_success "Rust can compile and run programs"
      else
        print_error "Rust compilation test produced unexpected output"
        all_valid=false
      fi
    else
      print_error "Rust compilation test failed to produce binary"
      all_valid=false
    fi
  else
    print_error "Rust compilation test failed"
    all_valid=false
  fi

  if [[ "$all_valid" == "true" ]]; then
    print_success "Validation passed"
    return 0
  else
    print_error "Validation failed"
    return 1
  fi
}

# ============================================================================
# STATUS
# ============================================================================

status() {
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo "Extension: $EXT_NAME v$EXT_VERSION"
  echo "Description: $EXT_DESCRIPTION"
  echo "Category: $EXT_CATEGORY"
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo ""

  # Check installation status
  if ! command_exists rustc; then
    echo "Status: ✗ NOT INSTALLED"
    return 1
  fi

  echo "Status: ✓ INSTALLED (mise-powered)"
  echo ""

  # Show mise-managed Rust version
  print_status "Installed tools:"

  # Activate mise to ensure we can query it
  if command_exists mise; then
    eval "$(mise activate bash)" 2>/dev/null || true

    # Show Rust version from mise
    local rust_info
    rust_info=$(mise ls rust 2>/dev/null | grep -v "^Tool" | head -n1)
    if [[ -n "$rust_info" ]]; then
      echo "  ✓ Rust (mise): $rust_info"
    fi
  fi

  # Show actual command versions
  command_exists rustc && echo "  ✓ rustc $(rustc --version | awk '{print $2}')"
  command_exists cargo && echo "  ✓ cargo $(cargo --version | awk '{print $2}')"

  # Show cargo tools (if not CI mode)
  if [[ "$CI_MODE" != "true" ]]; then
    echo ""
    print_status "Cargo tools (mise-managed):"

    local tools=(rg fd exa bat tokei)
    local found_any=false
    for tool in "${tools[@]}"; do
      if command_exists "$tool"; then
        # Get version if possible
        local version=""
        case "$tool" in
          rg) version=$(rg --version 2>/dev/null | head -n1 | awk '{print $2}') ;;
          fd) version=$(fd --version 2>/dev/null | awk '{print $2}') ;;
          bat) version=$(bat --version 2>/dev/null | awk '{print $2}') ;;
          tokei) version=$(tokei --version 2>/dev/null | awk '{print $2}') ;;
          exa) version=$(exa --version 2>/dev/null | head -n1 | awk '{print $2}') ;;
        esac

        if [[ -n "$version" ]]; then
          echo "  ✓ $tool v$version"
        else
          echo "  ✓ $tool"
        fi
        found_any=true
      fi
    done

    if [[ "$found_any" != "true" ]]; then
      echo "  (no cargo tools installed yet - may still be compiling)"
      echo "  Run 'mise ls cargo:*' to check installation progress"
    fi
  else
    echo ""
    print_status "CI mode: cargo tools not installed"
  fi

  # Show configuration file
  if [[ -f "$HOME/.config/mise/conf.d/rust.toml" ]]; then
    echo ""
    print_status "Configuration: ~/.config/mise/conf.d/rust.toml"
  fi

  # Show project template
  [[ -f "/workspace/scripts/create-rust-project.sh" ]] && echo "" && print_status "Project template: installed"

  return 0
}

# ============================================================================
# HELPER FUNCTIONS
# ============================================================================

check_dependent_extensions() {
  local provided_commands=("$@")
  local dependent_extensions=()
  local manifest_file="$SCRIPT_DIR/active-extensions.conf"
  [[ ! -f "$manifest_file" ]] && manifest_file="/workspace/scripts/extensions.d/active-extensions.conf"
  [[ ! -f "$manifest_file" ]] && return 0

  while IFS= read -r line; do
    [[ "$line" =~ ^[[:space:]]*# ]] && continue
    [[ -z "${line// }" ]] && continue
    local ext_name=$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
    [[ "$ext_name" == "$EXT_NAME" ]] && continue
    local ext_file="$SCRIPT_DIR/${ext_name}.sh"
    if [[ ! -f "$ext_file" ]]; then
      local matches=("$SCRIPT_DIR/"*"-${ext_name}.sh")
      ext_file="${matches[0]}"
    fi
    [[ ! -f "$ext_file" ]] && continue
    for cmd in "${provided_commands[@]}"; do
      if grep -q "$cmd" "$ext_file" 2>/dev/null; then
        dependent_extensions+=("$ext_name")
        break
      fi
    done
  done < "$manifest_file"

  printf '%s\n' "${dependent_extensions[@]}"
}

# ============================================================================
# REMOVE
# ============================================================================

remove() {
  print_warning "Uninstalling Rust..."

  local dependent_exts=()
  mapfile -t dependent_exts < <(check_dependent_extensions "rustc" "cargo")
  if [[ ${#dependent_exts[@]} -gt 0 ]]; then
    print_warning "The following extensions depend on Rust and may stop working:"
    for ext in "${dependent_exts[@]}"; do
      echo "  - $ext"
    done
    echo ""
  fi

  if ! prompt_confirmation "Continue with Rust removal?"; then
    print_status "Removal cancelled"
    return 1
  fi

  # Remove mise configuration
  local rust_toml="$HOME/.config/mise/conf.d/rust.toml"
  if [[ -f "$rust_toml" ]]; then
    print_status "Removing mise configuration..."
    rm -f "$rust_toml"
    print_success "Removed $rust_toml"
  fi

  # Uninstall Rust via mise
  if command_exists mise; then
    print_status "Uninstalling Rust via mise..."
    if mise uninstall rust 2>/dev/null; then
      print_success "Rust uninstalled via mise"
    else
      print_warning "Could not uninstall Rust via mise (may not be installed)"
    fi

    # Uninstall cargo tools if present
    if [[ "$CI_MODE" != "true" ]]; then
      print_status "Uninstalling cargo tools..."
      local tools=(ripgrep fd-find exa bat tokei)
      for tool in "${tools[@]}"; do
        mise uninstall "cargo:$tool" 2>/dev/null && print_debug "✓ Uninstalled cargo:$tool"
      done
    fi
  fi

  # Cleanup
  rm -f "/workspace/scripts/create-rust-project.sh"
  cleanup_bashrc "# ${EXT_NAME}"
  command_exists git && git config --global --unset-all alias.cargotest 2>/dev/null
  command_exists git && git config --global --unset-all alias.cargofmt 2>/dev/null
  command_exists git && git config --global --unset-all alias.cargoclippy 2>/dev/null

  print_success "Rust uninstalled"
  print_warning "Restart shell: source ~/.bashrc"
  return 0
}

# ============================================================================
# MAIN EXECUTION
# ============================================================================

extension_main "$@"
