#!/bin/bash
# rust.sh.example - Rust toolchain and development tools
# Extension API v1.0
#
# This extension installs Rust via rustup with:
# - Complete Rust toolchain (rustc, cargo, rustup)
# - Essential tools (cargo-watch, cargo-edit)
# - Optional tools (ripgrep, fd-find, exa, bat, tokei)
# - rust-analyzer for IDE support
# - CI mode detection for faster installs

# Source shared extension library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$(dirname "$SCRIPT_DIR")/extensions-common.sh"

# ============================================================================
# METADATA
# ============================================================================

EXT_NAME="rust"
EXT_VERSION="1.0.0"
EXT_DESCRIPTION="Rust toolchain via rustup with cargo tools"
EXT_CATEGORY="language"

# Initialize extension environment
extension_init

# ============================================================================
# PREREQUISITES
# ============================================================================

prerequisites() {
  print_status "Checking prerequisites for ${EXT_NAME}..."

  # Check for curl
  if ! command_exists curl; then
    print_error "curl is required but not installed"
    print_status "Install with: sudo apt-get install curl"
    return 1
  fi

  # Check disk space (Rust needs ~1-2GB)
  local available_space
  available_space=$(df -BM "$HOME" | awk 'NR==2 {print $4}' | sed 's/M//')
  if [[ $available_space -lt 2000 ]]; then
    print_warning "Low disk space: ${available_space}MB available (2GB recommended for Rust)"
  fi

  print_success "All prerequisites met"
  return 0
}

# ============================================================================
# INSTALL
# ============================================================================

install() {
  print_status "Installing Rust toolchain..."

  # Check if already installed
  if command_exists rustc && command_exists cargo; then
    local rust_version
    rust_version=$(rustc --version 2>/dev/null)
    print_warning "Rust is already installed: $rust_version"
    print_status "Skipping installation (use 'rustup update' to upgrade)"
    return 0
  fi

  # Install Rust via rustup
  print_status "Installing Rust via rustup..."
  if curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y; then
    # Source cargo environment
    source "$HOME/.cargo/env"
    print_success "Rust installed: $(rustc --version)"
  else
    print_error "Failed to install Rust"
    return 1
  fi

  # Install rust-analyzer for IDE support
  print_status "Installing rust-analyzer..."
  if rustup component add rust-analyzer 2>/dev/null; then
    print_success "rust-analyzer installed"
  else
    print_warning "Failed to install rust-analyzer"
  fi

  # Check if running in CI mode
  if [[ "$CI_MODE" == "true" ]]; then
    print_status "CI mode detected - skipping cargo tools"
    return 0
  fi

  # Install essential cargo tools
  local essential_tools=(
    cargo-watch
    cargo-edit
  )

  print_status "Installing essential cargo tools..."
  print_warning "This may take 10-15 minutes (compiling from source)"

  for tool in "${essential_tools[@]}"; do
    print_debug "Installing $tool..."
    if timeout 900 cargo install "$tool" 2>/dev/null; then
      print_debug "✓ $tool installed"
    else
      print_warning "Failed to install $tool (timeout)"
    fi
  done

  # Install optional tools in background
  local optional_tools=(
    cargo-audit
    cargo-expand
    cargo-outdated
    ripgrep
    fd-find
    exa
    bat
    tokei
  )

  print_status "Installing optional tools in background..."
  print_status "Check progress: tail -f /workspace/rust-install.log"

  for tool in "${optional_tools[@]}"; do
    (
      if timeout 600 cargo install "$tool" &>/dev/null; then
        echo "[$(date)] ✓ $tool installed" >> /workspace/rust-install.log
      else
        echo "[$(date)] ✗ $tool failed/timeout" >> /workspace/rust-install.log
      fi
    ) &
  done

  return 0
}

# ============================================================================
# CONFIGURE
# ============================================================================

configure() {
  print_status "Configuring Rust environment..."

  # Source cargo environment
  if [[ -f "$HOME/.cargo/env" ]]; then
    source "$HOME/.cargo/env"
  fi

  # Configure PATH for SSH sessions
  if command_exists setup_tool_path 2>/dev/null; then
    setup_tool_path "rust" \
      'export PATH="$HOME/.cargo/bin:$PATH"' \
      'source $HOME/.cargo/env'
  else
    # Fallback: add to bashrc
    if ! grep -q "$HOME/.cargo/bin" "$HOME/.bashrc" 2>/dev/null; then
      echo "" >> "$HOME/.bashrc"
      echo "# ${EXT_NAME} - cargo bin" >> "$HOME/.bashrc"
      echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> "$HOME/.bashrc"
      print_success "Added cargo bin to PATH"
    fi
  fi

  # Create SSH wrappers
  if command_exists create_tool_wrapper 2>/dev/null; then
    create_tool_wrapper "rustc" "$HOME/.cargo/bin/rustc"
    create_tool_wrapper "cargo" "$HOME/.cargo/bin/cargo"
    create_tool_wrapper "rustup" "$HOME/.cargo/bin/rustup"
  fi

  # Create Rust project template script
  print_status "Creating Rust project template..."
  cat > /workspace/scripts/create-rust-project.sh << 'EOF'
#!/bin/bash
# Create a new Rust project with Cargo

project_name="$1"
project_type="${2:-binary}"

if [[ -z "$project_name" ]]; then
    echo "Usage: $0 <project-name> [binary|library]"
    exit 1
fi

cd /workspace/projects/active

if [[ "$project_type" == "library" ]]; then
    cargo new --lib "$project_name"
else
    cargo new "$project_name"
fi

cd "$project_name"

cat >> Cargo.toml << 'DEPS'

[dependencies]
serde = { version = "1.0", features = ["derive"] }
tokio = { version = "1", features = ["full"] }
anyhow = "1.0"
thiserror = "1.0"

[dev-dependencies]
criterion = "0.5"
pretty_assertions = "1.4"
DEPS

cat > Makefile << 'MAKEFILE'
.PHONY: build run test clean watch doc

build:
	cargo build --release

run:
	cargo run

test:
	cargo test

clean:
	cargo clean

watch:
	cargo watch -x check -x test -x run

doc:
	cargo doc --open

bench:
	cargo bench

audit:
	cargo audit

fmt:
	cargo fmt

clippy:
	cargo clippy -- -D warnings
MAKEFILE

cat > README.md << 'README'
# $project_name

## Build
\`\`\`bash
cargo build --release
\`\`\`

## Run
\`\`\`bash
cargo run
\`\`\`

## Test
\`\`\`bash
cargo test
\`\`\`

## Development
\`\`\`bash
# Watch for changes
cargo watch -x check -x test -x run

# Format code
cargo fmt

# Lint code
cargo clippy
\`\`\`
README

mkdir -p .github/workflows
cat > .github/workflows/rust.yml << 'WORKFLOW'
name: Rust

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose
    - name: Check formatting
      run: cargo fmt -- --check
    - name: Run clippy
      run: cargo clippy -- -D warnings
WORKFLOW

echo "Rust project '$project_name' created!"
echo "To run: cd /workspace/projects/active/$project_name && cargo run"
EOF

  chmod +x /workspace/scripts/create-rust-project.sh
  print_success "Project template created"

  # Add Git aliases
  if command_exists git; then
    git config --global alias.cargotest '!cargo test'
    git config --global alias.cargofmt '!cargo fmt'
    git config --global alias.cargoclippy '!cargo clippy -- -D warnings'
    print_debug "Git aliases configured"
  fi

  print_success "Rust configured"
  return 0
}

# ============================================================================
# VALIDATE
# ============================================================================

validate() {
  print_status "Validating Rust installation..."

  local all_valid=true

  # Check rustc
  if ! command_exists rustc; then
    print_error "rustc not found"
    all_valid=false
  else
    print_success "rustc: $(rustc --version)"
  fi

  # Check cargo
  if ! command_exists cargo; then
    print_error "cargo not found"
    all_valid=false
  else
    print_success "cargo: $(cargo --version)"
  fi

  # Check rustup
  if command_exists rustup; then
    print_success "rustup: $(rustup --version)"
  else
    print_warning "rustup not found"
  fi

  # Check essential tools
  local tools=(cargo-watch cargo-edit)
  local tools_found=0
  for tool in "${tools[@]}"; do
    command_exists "$tool" && ((tools_found++))
  done
  print_status "Essential tools: $tools_found/${#tools[@]}"

  # Check project template
  [[ -f "/workspace/scripts/create-rust-project.sh" ]] && print_success "Project template: installed"

  if [[ "$all_valid" == "true" ]]; then
    print_success "Validation passed"
    return 0
  else
    print_error "Validation failed"
    return 1
  fi
}

# ============================================================================
# STATUS
# ============================================================================

status() {
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo "Extension: $EXT_NAME v$EXT_VERSION"
  echo "Description: $EXT_DESCRIPTION"
  echo "Category: $EXT_CATEGORY"
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo ""

  # Check installation status
  if ! command_exists rustc; then
    echo "Status: ✗ NOT INSTALLED"
    return 1
  fi

  echo "Status: ✓ INSTALLED"
  echo ""

  # Show installed tools with versions
  print_status "Installed tools:"
  echo "  ✓ rustc $(rustc --version | awk '{print $2}')"
  command_exists cargo && echo "  ✓ cargo $(cargo --version | awk '{print $2}')"
  command_exists rustup && echo "  ✓ rustup $(rustup --version | awk '{print $2}')"

  echo ""
  print_status "Installed cargo tools:"
  local tools=(cargo-watch cargo-edit cargo-audit ripgrep fd-find exa bat tokei)
  for tool in "${tools[@]}"; do
    command_exists "$tool" && echo "  ✓ $tool"
  done

  # Show background install log if exists
  if [[ -f "/workspace/rust-install.log" ]]; then
    echo ""
    print_status "Background install log available: /workspace/rust-install.log"
  fi

  [[ -f "/workspace/scripts/create-rust-project.sh" ]] && echo "" && print_status "Project template: installed"

  return 0
}

# ============================================================================
# HELPER FUNCTIONS
# ============================================================================

check_dependent_extensions() {
  local provided_commands=("$@")
  local dependent_extensions=()
  local manifest_file="$SCRIPT_DIR/active-extensions.conf"
  [[ ! -f "$manifest_file" ]] && manifest_file="/workspace/scripts/extensions.d/active-extensions.conf"
  [[ ! -f "$manifest_file" ]] && return 0

  while IFS= read -r line; do
    [[ "$line" =~ ^[[:space:]]*# ]] && continue
    [[ -z "${line// }" ]] && continue
    local ext_name=$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
    [[ "$ext_name" == "$EXT_NAME" ]] && continue
    local ext_file="$SCRIPT_DIR/${ext_name}.sh"
    if [[ ! -f "$ext_file" ]]; then
      local matches=("$SCRIPT_DIR/"*"-${ext_name}.sh")
      ext_file="${matches[0]}"
    fi
    [[ ! -f "$ext_file" ]] && continue
    for cmd in "${provided_commands[@]}"; do
      if grep -q "$cmd" "$ext_file" 2>/dev/null; then
        dependent_extensions+=("$ext_name")
        break
      fi
    done
  done < "$manifest_file"

  printf '%s\n' "${dependent_extensions[@]}"
}

# ============================================================================
# REMOVE
# ============================================================================

remove() {
  print_warning "Uninstalling Rust..."

  local dependent_exts=()
  mapfile -t dependent_exts < <(check_dependent_extensions "rustc" "cargo" "rustup")
  if [[ ${#dependent_exts[@]} -gt 0 ]]; then
    print_warning "The following extensions depend on Rust and may stop working:"
    for ext in "${dependent_exts[@]}"; do
      echo "  - $ext"
    done
    echo ""
  fi

  if ! prompt_confirmation "Continue with Rust removal?"; then
    print_status "Removal cancelled"
    return 1
  fi

  # Uninstall Rust via rustup
  if command_exists rustup; then
    print_status "Uninstalling Rust toolchain..."
    rustup self uninstall -y
    print_success "Rust uninstalled"
  else
    print_warning "rustup not found, manual cleanup may be needed"
  fi

  # Remove cargo directory
  if [[ -d "$HOME/.cargo" ]]; then
    read -p "Remove $HOME/.cargo directory? (y/N): " -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      rm -rf "$HOME/.cargo"
      print_success "Cargo directory removed"
    fi
  fi

  # Cleanup
  rm -f "/workspace/scripts/create-rust-project.sh"
  rm -f "/workspace/rust-install.log"
  cleanup_bashrc "# ${EXT_NAME}"
  command_exists git && git config --global --unset-all alias.cargotest 2>/dev/null
  command_exists git && git config --global --unset-all alias.cargofmt 2>/dev/null
  command_exists git && git config --global --unset-all alias.cargoclippy 2>/dev/null

  print_success "Rust uninstalled"
  print_warning "Restart shell: source ~/.bashrc"
  return 0
}

# ============================================================================
# MAIN EXECUTION
# ============================================================================

extension_main "$@"
