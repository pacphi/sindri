#!/bin/bash
# workspace-structure.sh.example - Create /workspace directory structure
# Extension API v1.0
#
# This extension creates the base directory structure for the Sindri workspace.
# This is foundational infrastructure needed by other extensions.

# Source shared extension library
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$(dirname "$SCRIPT_DIR")/extensions-common.sh"

# ============================================================================
# METADATA
# ============================================================================

EXT_NAME="workspace-structure"
EXT_VERSION="1.0.0"
EXT_DESCRIPTION="Creates workspace directory structure"
EXT_CATEGORY="infrastructure"

# Initialize extension environment
extension_init

# ============================================================================
# PREREQUISITES
# ============================================================================

prerequisites() {
  print_status "Checking prerequisites for ${EXT_NAME}..."

  # Check WORKSPACE_DIR is set and exists
  if [[ -z "${WORKSPACE_DIR:-}" ]]; then
    print_error "WORKSPACE_DIR is not set"
    return 1
  fi

  if [[ ! -d "$WORKSPACE_DIR" ]]; then
    print_error "Workspace directory does not exist: $WORKSPACE_DIR"
    return 1
  fi

  # Check write permissions
  if [[ ! -w "$WORKSPACE_DIR" ]]; then
    print_error "No write permission to workspace: $WORKSPACE_DIR"
    return 1
  fi

  print_success "All prerequisites met"
  return 0
}

# ============================================================================
# INSTALL
# ============================================================================

install() {
  print_status "Creating workspace directory structure..."

  cd "$WORKSPACE_DIR" || return 1

  # Create main directories
  local main_dirs=(
    "src"
    "tests"
    "docs"
    "scripts"
    "examples"
    "config"
    "agents"
    "context"
    "bin"
    "backups"
  )

  for dir in "${main_dirs[@]}"; do
    if mkdir -p "$dir"; then
      print_debug "Created: $dir"
    else
      print_error "Failed to create: $dir"
      return 1
    fi
  done

  # Create subdirectories for context management
  local context_dirs=(
    "context/global"
    "context/templates"
  )

  for dir in "${context_dirs[@]}"; do
    if mkdir -p "$dir"; then
      print_debug "Created: $dir"
    else
      print_error "Failed to create: $dir"
      return 1
    fi
  done

  # Create scripts subdirectories
  local script_dirs=(
    "scripts/lib"
    "scripts/extensions.d"
  )

  for dir in "${script_dirs[@]}"; do
    if mkdir -p "$dir"; then
      print_debug "Created: $dir"
    else
      print_error "Failed to create: $dir"
      return 1
    fi
  done

  # Create config subdirectories
  local config_dirs=(
    "config/templates"
  )

  for dir in "${config_dirs[@]}"; do
    if mkdir -p "$dir"; then
      print_debug "Created: $dir"
    else
      print_error "Failed to create: $dir"
      return 1
    fi
  done

  print_success "Workspace directory structure created"
  return 0
}

# ============================================================================
# CONFIGURE
# ============================================================================

configure() {
  print_status "Configuring workspace structure..."

  # Set proper permissions
  chmod 755 "$WORKSPACE_DIR"/bin 2>/dev/null || true
  chmod 755 "$WORKSPACE_DIR"/scripts 2>/dev/null || true
  chmod 755 "$WORKSPACE_DIR"/scripts/lib 2>/dev/null || true

  # Create a README in the workspace if it doesn't exist
  if [[ ! -f "$WORKSPACE_DIR/README.md" ]]; then
    cat > "$WORKSPACE_DIR/README.md" << 'EOF'
# Sindri Workspace

## Directory Structure

- `src/` - Source code for projects
- `tests/` - Test files
- `docs/` - Documentation
- `scripts/` - Utility and management scripts
  - `lib/` - Shared script libraries
  - `extensions.d/` - Extension scripts
- `examples/` - Example code and templates
- `config/` - Configuration files
  - `templates/` - Configuration templates
- `agents/` - Agent configurations and data
- `context/` - Context management
  - `global/` - Global context files
  - `templates/` - Context templates
- `bin/` - User binaries and executables
- `backups/` - Backup files

## Usage

This workspace is managed by Sindri's extension system. Use `extension-manager` to
activate, install, and manage components.

For more information, see the main project README.
EOF
    print_success "Created workspace README"
  fi

  print_success "Workspace structure configured"
  return 0
}

# ============================================================================
# VALIDATE
# ============================================================================

validate() {
  print_status "Validating workspace structure..."

  local all_valid=true

  # Check all main directories exist
  local required_dirs=(
    "src" "tests" "docs" "scripts" "examples" "config"
    "agents" "context" "bin" "backups"
    "context/global" "context/templates"
    "scripts/lib" "scripts/extensions.d"
    "config/templates"
  )

  for dir in "${required_dirs[@]}"; do
    if [[ ! -d "$WORKSPACE_DIR/$dir" ]]; then
      print_error "Missing directory: $dir"
      all_valid=false
    else
      print_debug "Verified: $dir"
    fi
  done

  # Check permissions
  if [[ ! -w "$WORKSPACE_DIR" ]]; then
    print_error "Workspace not writable: $WORKSPACE_DIR"
    all_valid=false
  fi

  if [[ "$all_valid" == "true" ]]; then
    print_success "Workspace structure validation passed"
    return 0
  else
    print_error "Workspace structure validation failed"
    return 1
  fi
}

# ============================================================================
# STATUS
# ============================================================================

status() {
  print_status "Checking workspace structure status..."

  if [[ -z "${WORKSPACE_DIR:-}" ]]; then
    print_warning "WORKSPACE_DIR not set"
    return 1
  fi

  print_success "Workspace: $WORKSPACE_DIR"

  # Count directories
  local dir_count=0
  for dir in src tests docs scripts examples config agents context bin backups; do
    if [[ -d "$WORKSPACE_DIR/$dir" ]]; then
      ((dir_count++))
    fi
  done

  print_success "Main directories: $dir_count/10 present"

  # Show disk usage
  if command -v du >/dev/null 2>&1; then
    local usage=$(du -sh "$WORKSPACE_DIR" 2>/dev/null | cut -f1)
    print_status "Disk usage: $usage"
  fi

  return 0
}

# ============================================================================
# REMOVE
# ============================================================================

remove() {
  print_warning "Removing workspace structure..."
  print_error "This operation is DANGEROUS and will delete all workspace directories!"
  echo ""
  print_status "Directories that will be affected:"
  echo "  - $WORKSPACE_DIR/src"
  echo "  - $WORKSPACE_DIR/tests"
  echo "  - $WORKSPACE_DIR/docs"
  echo "  - $WORKSPACE_DIR/scripts"
  echo "  - $WORKSPACE_DIR/examples"
  echo "  - $WORKSPACE_DIR/config"
  echo "  - $WORKSPACE_DIR/agents"
  echo "  - $WORKSPACE_DIR/context"
  echo "  - $WORKSPACE_DIR/bin"
  echo "  - $WORKSPACE_DIR/backups"
  echo ""
  print_warning "User data in these directories will be PERMANENTLY DELETED"
  echo ""

  read -p "Are you ABSOLUTELY SURE you want to delete the workspace structure? (type 'DELETE' to confirm): " -r
  if [[ "$REPLY" != "DELETE" ]]; then
    print_status "Removal cancelled"
    return 1
  fi

  # Remove directories (but keep user projects)
  local dirs_to_remove=(
    "agents"
    "context"
    "backups"
  )

  for dir in "${dirs_to_remove[@]}"; do
    if [[ -d "$WORKSPACE_DIR/$dir" ]]; then
      print_status "Removing: $dir"
      rm -rf "${WORKSPACE_DIR:?}/$dir"
    fi
  done

  print_warning "Workspace structure partially removed"
  print_status "Preserved: src, tests, docs, scripts, examples, config (may contain user data)"
  print_status "To fully reset, manually remove $WORKSPACE_DIR"

  return 0
}

# ============================================================================
# MAIN EXECUTION
# ============================================================================

extension_main "$@"
